{"ast":null,"code":"import 'nanoid/non-secure';\nimport './Debug-8242c26e.js';\nimport 'redux';\nimport './turn-order-8cc4909b.js';\nimport 'immer';\nimport './plugin-random-087f861e.js';\nimport 'lodash.isplainobject';\nimport './reducer-24ea3e4c.js';\nimport 'rfc6902';\nimport './initialize-7316768f.js';\nimport './transport-ce07b771.js';\nimport { C as Client$1 } from './client-f7f02b82.js';\nimport 'flatted';\nimport 'setimmediate';\nimport { M as MCTSBot } from './ai-7998b00f.js';\nimport { L as LobbyClient } from './client-5f57c3f2.js';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Cookies from 'react-cookies';\nimport './util-991e76bb.js';\nimport { S as SocketIO, L as Local } from './socketio-a82b84e4.js';\nimport './master-17425f07.js';\nimport './filter-player-view-43ed49b0.js';\nimport 'socket.io-client';\n\n/*\r\n * Copyright 2017 The boardgame.io Authors\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\n/**\r\n * Client\r\n *\r\n * boardgame.io React client.\r\n *\r\n * @param {...object} game - The return value of `Game`.\r\n * @param {...object} numPlayers - The number of players.\r\n * @param {...object} board - The React component for the game.\r\n * @param {...object} loading - (optional) The React component for the loading state.\r\n * @param {...object} multiplayer - Set to a falsy value or a transportFactory, e.g., SocketIO()\r\n * @param {...object} debug - Enables the Debug UI.\r\n * @param {...object} enhancer - Optional enhancer to send to the Redux store\r\n *\r\n * Returns:\r\n *   A React component that wraps board and provides an\r\n *   API through props for it to interact with the framework\r\n *   and dispatch actions such as MAKE_MOVE, GAME_EVENT, RESET,\r\n *   UNDO and REDO.\r\n */\nfunction Client(opts) {\n  var _a;\n  const {\n    game,\n    numPlayers,\n    board,\n    multiplayer,\n    enhancer\n  } = opts;\n  let {\n    loading,\n    debug\n  } = opts;\n  // Component that is displayed before the client has synced\n  // with the game master.\n  if (loading === undefined) {\n    const Loading = () => React.createElement(\"div\", {\n      className: \"bgio-loading\"\n    }, \"connecting...\");\n    loading = Loading;\n  }\n  /*\r\n   * WrappedBoard\r\n   *\r\n   * The main React component that wraps the passed in\r\n   * board component and adds the API to its props.\r\n   */\n  return _a = class WrappedBoard extends React.Component {\n    constructor(props) {\n      super(props);\n      if (debug === undefined) {\n        debug = props.debug;\n      }\n      this.client = Client$1({\n        game,\n        debug,\n        numPlayers,\n        multiplayer,\n        matchID: props.matchID,\n        playerID: props.playerID,\n        credentials: props.credentials,\n        enhancer\n      });\n    }\n    componentDidMount() {\n      this.unsubscribe = this.client.subscribe(() => this.forceUpdate());\n      this.client.start();\n    }\n    componentWillUnmount() {\n      this.client.stop();\n      this.unsubscribe();\n    }\n    componentDidUpdate(prevProps) {\n      if (this.props.matchID != prevProps.matchID) {\n        this.client.updateMatchID(this.props.matchID);\n      }\n      if (this.props.playerID != prevProps.playerID) {\n        this.client.updatePlayerID(this.props.playerID);\n      }\n      if (this.props.credentials != prevProps.credentials) {\n        this.client.updateCredentials(this.props.credentials);\n      }\n    }\n    render() {\n      const state = this.client.getState();\n      if (state === null) {\n        return React.createElement(loading);\n      }\n      let _board = null;\n      if (board) {\n        _board = React.createElement(board, {\n          ...state,\n          ...this.props,\n          isMultiplayer: !!multiplayer,\n          moves: this.client.moves,\n          events: this.client.events,\n          matchID: this.client.matchID,\n          playerID: this.client.playerID,\n          reset: this.client.reset,\n          undo: this.client.undo,\n          redo: this.client.redo,\n          log: this.client.log,\n          matchData: this.client.matchData,\n          sendChatMessage: this.client.sendChatMessage,\n          chatMessages: this.client.chatMessages\n        });\n      }\n      return React.createElement(\"div\", {\n        className: \"bgio-client\"\n      }, _board);\n    }\n  }, _a.propTypes = {\n    // The ID of a game to connect to.\n    // Only relevant in multiplayer.\n    matchID: PropTypes.string,\n    // The ID of the player associated with this client.\n    // Only relevant in multiplayer.\n    playerID: PropTypes.string,\n    // This client's authentication credentials.\n    // Only relevant in multiplayer.\n    credentials: PropTypes.string,\n    // Enable / disable the Debug UI.\n    debug: PropTypes.any\n  }, _a.defaultProps = {\n    matchID: 'default',\n    playerID: null,\n    credentials: null,\n    debug: true\n  }, _a;\n}\n\n/*\r\n * Copyright 2018 The boardgame.io Authors\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\nclass _LobbyConnectionImpl {\n  constructor(_ref) {\n    let {\n      server,\n      gameComponents,\n      playerName,\n      playerCredentials\n    } = _ref;\n    this.client = new LobbyClient({\n      server\n    });\n    this.gameComponents = gameComponents;\n    this.playerName = playerName || 'Visitor';\n    this.playerCredentials = playerCredentials;\n    this.matches = [];\n  }\n  async refresh() {\n    try {\n      this.matches = [];\n      const games = await this.client.listGames();\n      for (const game of games) {\n        if (!this._getGameComponents(game)) continue;\n        const {\n          matches\n        } = await this.client.listMatches(game);\n        this.matches.push(...matches);\n      }\n    } catch (error) {\n      throw new Error('failed to retrieve list of matches (' + error + ')');\n    }\n  }\n  _getMatchInstance(matchID) {\n    for (const inst of this.matches) {\n      if (inst['matchID'] === matchID) return inst;\n    }\n  }\n  _getGameComponents(gameName) {\n    for (const comp of this.gameComponents) {\n      if (comp.game.name === gameName) return comp;\n    }\n  }\n  _findPlayer(playerName) {\n    for (const inst of this.matches) {\n      if (inst.players.some(player => player.name === playerName)) return inst;\n    }\n  }\n  async join(gameName, matchID, playerID) {\n    try {\n      let inst = this._findPlayer(this.playerName);\n      if (inst) {\n        throw new Error('player has already joined ' + inst.matchID);\n      }\n      inst = this._getMatchInstance(matchID);\n      if (!inst) {\n        throw new Error('game instance ' + matchID + ' not found');\n      }\n      const json = await this.client.joinMatch(gameName, matchID, {\n        playerID,\n        playerName: this.playerName\n      });\n      inst.players[Number.parseInt(playerID)].name = this.playerName;\n      this.playerCredentials = json.playerCredentials;\n    } catch (error) {\n      throw new Error('failed to join match ' + matchID + ' (' + error + ')');\n    }\n  }\n  async leave(gameName, matchID) {\n    try {\n      const inst = this._getMatchInstance(matchID);\n      if (!inst) throw new Error('match instance not found');\n      for (const player of inst.players) {\n        if (player.name === this.playerName) {\n          await this.client.leaveMatch(gameName, matchID, {\n            playerID: player.id.toString(),\n            credentials: this.playerCredentials\n          });\n          delete player.name;\n          delete this.playerCredentials;\n          return;\n        }\n      }\n      throw new Error('player not found in match');\n    } catch (error) {\n      throw new Error('failed to leave match ' + matchID + ' (' + error + ')');\n    }\n  }\n  async disconnect() {\n    const inst = this._findPlayer(this.playerName);\n    if (inst) {\n      await this.leave(inst.gameName, inst.matchID);\n    }\n    this.matches = [];\n    this.playerName = 'Visitor';\n  }\n  async create(gameName, numPlayers) {\n    try {\n      const comp = this._getGameComponents(gameName);\n      if (!comp) throw new Error('game not found');\n      if (numPlayers < comp.game.minPlayers || numPlayers > comp.game.maxPlayers) throw new Error('invalid number of players ' + numPlayers);\n      await this.client.createMatch(gameName, {\n        numPlayers\n      });\n    } catch (error) {\n      throw new Error('failed to create match for ' + gameName + ' (' + error + ')');\n    }\n  }\n}\n/**\r\n * LobbyConnection\r\n *\r\n * Lobby model.\r\n *\r\n * @param {string}   server - '<host>:<port>' of the server.\r\n * @param {Array}    gameComponents - A map of Board and Game objects for the supported games.\r\n * @param {string}   playerName - The name of the player.\r\n * @param {string}   playerCredentials - The credentials currently used by the player, if any.\r\n *\r\n * Returns:\r\n *   A JS object that synchronizes the list of running game instances with the server and provides an API to create/join/start instances.\r\n */\nfunction LobbyConnection(opts) {\n  return new _LobbyConnectionImpl(opts);\n}\n\n/*\r\n * Copyright 2018 The boardgame.io Authors.\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\nclass LobbyLoginForm extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      playerName: this.props.playerName,\n      nameErrorMsg: ''\n    };\n    this.onClickEnter = () => {\n      if (this.state.playerName === '') return;\n      this.props.onEnter(this.state.playerName);\n    };\n    this.onKeyPress = event => {\n      if (event.key === 'Enter') {\n        this.onClickEnter();\n      }\n    };\n    this.onChangePlayerName = event => {\n      const name = event.target.value.trim();\n      this.setState({\n        playerName: name,\n        nameErrorMsg: name.length > 0 ? '' : 'empty player name'\n      });\n    };\n  }\n  render() {\n    return React.createElement(\"div\", null, React.createElement(\"p\", {\n      className: \"phase-title\"\n    }, \"Choose a player name:\"), React.createElement(\"input\", {\n      type: \"text\",\n      value: this.state.playerName,\n      onChange: this.onChangePlayerName,\n      onKeyPress: this.onKeyPress\n    }), React.createElement(\"span\", {\n      className: \"buttons\"\n    }, React.createElement(\"button\", {\n      className: \"buttons\",\n      onClick: this.onClickEnter\n    }, \"Enter\")), React.createElement(\"br\", null), React.createElement(\"span\", {\n      className: \"error-msg\"\n    }, this.state.nameErrorMsg, React.createElement(\"br\", null)));\n  }\n}\nLobbyLoginForm.defaultProps = {\n  playerName: ''\n};\n\n/*\r\n * Copyright 2018 The boardgame.io Authors.\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\nclass LobbyMatchInstance extends React.Component {\n  constructor() {\n    super(...arguments);\n    this._createSeat = player => {\n      return player.name || '[free]';\n    };\n    this._createButtonJoin = (inst, seatId) => React.createElement(\"button\", {\n      key: 'button-join-' + inst.matchID,\n      onClick: () => this.props.onClickJoin(inst.gameName, inst.matchID, '' + seatId)\n    }, \"Join\");\n    this._createButtonLeave = inst => React.createElement(\"button\", {\n      key: 'button-leave-' + inst.matchID,\n      onClick: () => this.props.onClickLeave(inst.gameName, inst.matchID)\n    }, \"Leave\");\n    this._createButtonPlay = (inst, seatId) => React.createElement(\"button\", {\n      key: 'button-play-' + inst.matchID,\n      onClick: () => this.props.onClickPlay(inst.gameName, {\n        matchID: inst.matchID,\n        playerID: '' + seatId,\n        numPlayers: inst.players.length\n      })\n    }, \"Play\");\n    this._createButtonSpectate = inst => React.createElement(\"button\", {\n      key: 'button-spectate-' + inst.matchID,\n      onClick: () => this.props.onClickPlay(inst.gameName, {\n        matchID: inst.matchID,\n        numPlayers: inst.players.length\n      })\n    }, \"Spectate\");\n    this._createInstanceButtons = inst => {\n      const playerSeat = inst.players.find(player => player.name === this.props.playerName);\n      const freeSeat = inst.players.find(player => !player.name);\n      if (playerSeat && freeSeat) {\n        // already seated: waiting for match to start\n        return this._createButtonLeave(inst);\n      }\n      if (freeSeat) {\n        // at least 1 seat is available\n        return this._createButtonJoin(inst, freeSeat.id);\n      }\n      // match is full\n      if (playerSeat) {\n        return React.createElement(\"div\", null, [this._createButtonPlay(inst, playerSeat.id), this._createButtonLeave(inst)]);\n      }\n      // allow spectating\n      return this._createButtonSpectate(inst);\n    };\n  }\n  render() {\n    const match = this.props.match;\n    let status = 'OPEN';\n    if (!match.players.some(player => !player.name)) {\n      status = 'RUNNING';\n    }\n    return React.createElement(\"tr\", {\n      key: 'line-' + match.matchID\n    }, React.createElement(\"td\", {\n      key: 'cell-name-' + match.matchID\n    }, match.gameName), React.createElement(\"td\", {\n      key: 'cell-status-' + match.matchID\n    }, status), React.createElement(\"td\", {\n      key: 'cell-seats-' + match.matchID\n    }, match.players.map(player => this._createSeat(player)).join(', ')), React.createElement(\"td\", {\n      key: 'cell-buttons-' + match.matchID\n    }, this._createInstanceButtons(match)));\n  }\n}\n\n/*\r\n * Copyright 2018 The boardgame.io Authors.\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\nclass LobbyCreateMatchForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedGame: 0,\n      numPlayers: 2\n    };\n    this._createGameNameOption = (game, idx) => {\n      return React.createElement(\"option\", {\n        key: 'name-option-' + idx,\n        value: idx\n      }, game.game.name);\n    };\n    this._createNumPlayersOption = idx => {\n      return React.createElement(\"option\", {\n        key: 'num-option-' + idx,\n        value: idx\n      }, idx);\n    };\n    this._createNumPlayersRange = game => {\n      return Array.from({\n        length: game.maxPlayers + 1\n      }).map((_, i) => i).slice(game.minPlayers);\n    };\n    this.onChangeNumPlayers = event => {\n      this.setState({\n        numPlayers: Number.parseInt(event.target.value)\n      });\n    };\n    this.onChangeSelectedGame = event => {\n      const idx = Number.parseInt(event.target.value);\n      this.setState({\n        selectedGame: idx,\n        numPlayers: this.props.games[idx].game.minPlayers\n      });\n    };\n    this.onClickCreate = () => {\n      this.props.createMatch(this.props.games[this.state.selectedGame].game.name, this.state.numPlayers);\n    };\n    /* fix min and max number of players */\n    for (const game of props.games) {\n      const matchDetails = game.game;\n      if (!matchDetails.minPlayers) {\n        matchDetails.minPlayers = 1;\n      }\n      if (!matchDetails.maxPlayers) {\n        matchDetails.maxPlayers = 4;\n      }\n      console.assert(matchDetails.maxPlayers >= matchDetails.minPlayers);\n    }\n    this.state = {\n      selectedGame: 0,\n      numPlayers: props.games[0].game.minPlayers\n    };\n  }\n  render() {\n    return React.createElement(\"div\", null, React.createElement(\"select\", {\n      value: this.state.selectedGame,\n      onChange: evt => this.onChangeSelectedGame(evt)\n    }, this.props.games.map((game, index) => this._createGameNameOption(game, index))), React.createElement(\"span\", null, \"Players:\"), React.createElement(\"select\", {\n      value: this.state.numPlayers,\n      onChange: this.onChangeNumPlayers\n    }, this._createNumPlayersRange(this.props.games[this.state.selectedGame].game).map(number => this._createNumPlayersOption(number))), React.createElement(\"span\", {\n      className: \"buttons\"\n    }, React.createElement(\"button\", {\n      onClick: this.onClickCreate\n    }, \"Create\")));\n  }\n}\n\n/*\r\n * Copyright 2018 The boardgame.io Authors.\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\nvar LobbyPhases;\n(function (LobbyPhases) {\n  LobbyPhases[\"ENTER\"] = \"enter\";\n  LobbyPhases[\"PLAY\"] = \"play\";\n  LobbyPhases[\"LIST\"] = \"list\";\n})(LobbyPhases || (LobbyPhases = {}));\n/**\r\n * Lobby\r\n *\r\n * React lobby component.\r\n *\r\n * @param {Array}  gameComponents - An array of Board and Game objects for the supported games.\r\n * @param {string} lobbyServer - Address of the lobby server (for example 'localhost:8000').\r\n *                               If not set, defaults to the server that served the page.\r\n * @param {string} gameServer - Address of the game server (for example 'localhost:8001').\r\n *                              If not set, defaults to the server that served the page.\r\n * @param {function} clientFactory - Function that is used to create the game clients.\r\n * @param {number} refreshInterval - Interval between server updates (default: 2000ms).\r\n * @param {bool}   debug - Enable debug information (default: false).\r\n *\r\n * Returns:\r\n *   A React component that provides a UI to create, list, join, leave, play or\r\n *   spectate matches (game instances).\r\n */\nclass Lobby extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      phase: LobbyPhases.ENTER,\n      playerName: 'Visitor',\n      runningMatch: null,\n      errorMsg: '',\n      credentialStore: {}\n    };\n    this._createConnection = props => {\n      const name = this.state.playerName;\n      this.connection = LobbyConnection({\n        server: props.lobbyServer,\n        gameComponents: props.gameComponents,\n        playerName: name,\n        playerCredentials: this.state.credentialStore[name]\n      });\n    };\n    this._updateCredentials = (playerName, credentials) => {\n      this.setState(prevState => {\n        // clone store or componentDidUpdate will not be triggered\n        const store = Object.assign({}, prevState.credentialStore);\n        store[playerName] = credentials;\n        return {\n          credentialStore: store\n        };\n      });\n    };\n    this._updateConnection = async () => {\n      await this.connection.refresh();\n      this.forceUpdate();\n    };\n    this._enterLobby = playerName => {\n      this._startRefreshInterval();\n      this.setState({\n        playerName,\n        phase: LobbyPhases.LIST\n      });\n    };\n    this._exitLobby = async () => {\n      this._clearRefreshInterval();\n      await this.connection.disconnect();\n      this.setState({\n        phase: LobbyPhases.ENTER,\n        errorMsg: ''\n      });\n    };\n    this._createMatch = async (gameName, numPlayers) => {\n      try {\n        await this.connection.create(gameName, numPlayers);\n        await this.connection.refresh();\n        // rerender\n        this.setState({});\n      } catch (error) {\n        this.setState({\n          errorMsg: error.message\n        });\n      }\n    };\n    this._joinMatch = async (gameName, matchID, playerID) => {\n      try {\n        await this.connection.join(gameName, matchID, playerID);\n        await this.connection.refresh();\n        this._updateCredentials(this.connection.playerName, this.connection.playerCredentials);\n      } catch (error) {\n        this.setState({\n          errorMsg: error.message\n        });\n      }\n    };\n    this._leaveMatch = async (gameName, matchID) => {\n      try {\n        await this.connection.leave(gameName, matchID);\n        await this.connection.refresh();\n        this._updateCredentials(this.connection.playerName, this.connection.playerCredentials);\n      } catch (error) {\n        this.setState({\n          errorMsg: error.message\n        });\n      }\n    };\n    this._startMatch = (gameName, matchOpts) => {\n      const gameCode = this.connection._getGameComponents(gameName);\n      if (!gameCode) {\n        this.setState({\n          errorMsg: 'game ' + gameName + ' not supported'\n        });\n        return;\n      }\n      let multiplayer = undefined;\n      if (matchOpts.numPlayers > 1) {\n        multiplayer = this.props.gameServer ? SocketIO({\n          server: this.props.gameServer\n        }) : SocketIO();\n      }\n      if (matchOpts.numPlayers == 1) {\n        const maxPlayers = gameCode.game.maxPlayers;\n        const bots = {};\n        for (let i = 1; i < maxPlayers; i++) {\n          bots[i + ''] = MCTSBot;\n        }\n        multiplayer = Local({\n          bots\n        });\n      }\n      const app = this.props.clientFactory({\n        game: gameCode.game,\n        board: gameCode.board,\n        debug: this.props.debug,\n        multiplayer\n      });\n      const match = {\n        app: app,\n        matchID: matchOpts.matchID,\n        playerID: matchOpts.numPlayers > 1 ? matchOpts.playerID : '0',\n        credentials: this.connection.playerCredentials\n      };\n      this._clearRefreshInterval();\n      this.setState({\n        phase: LobbyPhases.PLAY,\n        runningMatch: match\n      });\n    };\n    this._exitMatch = () => {\n      this._startRefreshInterval();\n      this.setState({\n        phase: LobbyPhases.LIST,\n        runningMatch: null\n      });\n    };\n    this._getPhaseVisibility = phase => {\n      return this.state.phase !== phase ? 'hidden' : 'phase';\n    };\n    this.renderMatches = (matches, playerName) => {\n      return matches.map(match => {\n        const {\n          matchID,\n          gameName,\n          players\n        } = match;\n        return React.createElement(LobbyMatchInstance, {\n          key: 'instance-' + matchID,\n          match: {\n            matchID,\n            gameName,\n            players: Object.values(players)\n          },\n          playerName: playerName,\n          onClickJoin: this._joinMatch,\n          onClickLeave: this._leaveMatch,\n          onClickPlay: this._startMatch\n        });\n      });\n    };\n    this._createConnection(this.props);\n  }\n  componentDidMount() {\n    const cookie = Cookies.load('lobbyState') || {};\n    if (cookie.phase && cookie.phase === LobbyPhases.PLAY) {\n      cookie.phase = LobbyPhases.LIST;\n    }\n    if (cookie.phase && cookie.phase !== LobbyPhases.ENTER) {\n      this._startRefreshInterval();\n    }\n    this.setState({\n      phase: cookie.phase || LobbyPhases.ENTER,\n      playerName: cookie.playerName || 'Visitor',\n      credentialStore: cookie.credentialStore || {}\n    });\n  }\n  componentDidUpdate(prevProps, prevState) {\n    const name = this.state.playerName;\n    const creds = this.state.credentialStore[name];\n    if (prevState.phase !== this.state.phase || prevState.credentialStore[name] !== creds || prevState.playerName !== name) {\n      this._createConnection(this.props);\n      this._updateConnection();\n      const cookie = {\n        phase: this.state.phase,\n        playerName: name,\n        credentialStore: this.state.credentialStore\n      };\n      Cookies.save('lobbyState', cookie, {\n        path: '/'\n      });\n    }\n    if (prevProps.refreshInterval !== this.props.refreshInterval) {\n      this._startRefreshInterval();\n    }\n  }\n  componentWillUnmount() {\n    this._clearRefreshInterval();\n  }\n  _startRefreshInterval() {\n    this._clearRefreshInterval();\n    this._currentInterval = setInterval(this._updateConnection, this.props.refreshInterval);\n  }\n  _clearRefreshInterval() {\n    clearInterval(this._currentInterval);\n  }\n  render() {\n    const {\n      gameComponents,\n      renderer\n    } = this.props;\n    const {\n      errorMsg,\n      playerName,\n      phase,\n      runningMatch\n    } = this.state;\n    if (renderer) {\n      return renderer({\n        errorMsg,\n        gameComponents,\n        matches: this.connection.matches,\n        phase,\n        playerName,\n        runningMatch,\n        handleEnterLobby: this._enterLobby,\n        handleExitLobby: this._exitLobby,\n        handleCreateMatch: this._createMatch,\n        handleJoinMatch: this._joinMatch,\n        handleLeaveMatch: this._leaveMatch,\n        handleExitMatch: this._exitMatch,\n        handleRefreshMatches: this._updateConnection,\n        handleStartMatch: this._startMatch\n      });\n    }\n    return React.createElement(\"div\", {\n      id: \"lobby-view\",\n      style: {\n        padding: 50\n      }\n    }, React.createElement(\"div\", {\n      className: this._getPhaseVisibility(LobbyPhases.ENTER)\n    }, React.createElement(LobbyLoginForm, {\n      key: playerName,\n      playerName: playerName,\n      onEnter: this._enterLobby\n    })), React.createElement(\"div\", {\n      className: this._getPhaseVisibility(LobbyPhases.LIST)\n    }, React.createElement(\"p\", null, \"Welcome, \", playerName), React.createElement(\"div\", {\n      className: \"phase-title\",\n      id: \"match-creation\"\n    }, React.createElement(\"span\", null, \"Create a match:\"), React.createElement(LobbyCreateMatchForm, {\n      games: gameComponents,\n      createMatch: this._createMatch\n    })), React.createElement(\"p\", {\n      className: \"phase-title\"\n    }, \"Join a match:\"), React.createElement(\"div\", {\n      id: \"instances\"\n    }, React.createElement(\"table\", null, React.createElement(\"tbody\", null, this.renderMatches(this.connection.matches, playerName))), React.createElement(\"span\", {\n      className: \"error-msg\"\n    }, errorMsg, React.createElement(\"br\", null))), React.createElement(\"p\", {\n      className: \"phase-title\"\n    }, \"Matches that become empty are automatically deleted.\")), React.createElement(\"div\", {\n      className: this._getPhaseVisibility(LobbyPhases.PLAY)\n    }, runningMatch && React.createElement(runningMatch.app, {\n      matchID: runningMatch.matchID,\n      playerID: runningMatch.playerID,\n      credentials: runningMatch.credentials\n    }), React.createElement(\"div\", {\n      className: \"buttons\",\n      id: \"match-exit\"\n    }, React.createElement(\"button\", {\n      onClick: this._exitMatch\n    }, \"Exit match\"))), React.createElement(\"div\", {\n      className: \"buttons\",\n      id: \"lobby-exit\"\n    }, React.createElement(\"button\", {\n      onClick: this._exitLobby\n    }, \"Exit lobby\")));\n  }\n}\nLobby.propTypes = {\n  gameComponents: PropTypes.array.isRequired,\n  lobbyServer: PropTypes.string,\n  gameServer: PropTypes.string,\n  debug: PropTypes.bool,\n  clientFactory: PropTypes.func,\n  refreshInterval: PropTypes.number\n};\nLobby.defaultProps = {\n  debug: false,\n  clientFactory: Client,\n  refreshInterval: 2000\n};\nexport { Client, Lobby };","map":{"version":3,"names":["C","Client$1","M","MCTSBot","L","LobbyClient","React","PropTypes","Cookies","S","SocketIO","Local","Client","opts","_a","game","numPlayers","board","multiplayer","enhancer","loading","debug","undefined","Loading","createElement","className","WrappedBoard","Component","constructor","props","client","matchID","playerID","credentials","componentDidMount","unsubscribe","subscribe","forceUpdate","start","componentWillUnmount","stop","componentDidUpdate","prevProps","updateMatchID","updatePlayerID","updateCredentials","render","state","getState","_board","isMultiplayer","moves","events","reset","undo","redo","log","matchData","sendChatMessage","chatMessages","propTypes","string","any","defaultProps","_LobbyConnectionImpl","_ref","server","gameComponents","playerName","playerCredentials","matches","refresh","games","listGames","_getGameComponents","listMatches","push","error","Error","_getMatchInstance","inst","gameName","comp","name","_findPlayer","players","some","player","join","json","joinMatch","Number","parseInt","leave","leaveMatch","id","toString","disconnect","create","minPlayers","maxPlayers","createMatch","LobbyConnection","LobbyLoginForm","arguments","nameErrorMsg","onClickEnter","onEnter","onKeyPress","event","key","onChangePlayerName","target","value","trim","setState","length","type","onChange","onClick","LobbyMatchInstance","_createSeat","_createButtonJoin","seatId","onClickJoin","_createButtonLeave","onClickLeave","_createButtonPlay","onClickPlay","_createButtonSpectate","_createInstanceButtons","playerSeat","find","freeSeat","match","status","map","LobbyCreateMatchForm","selectedGame","_createGameNameOption","idx","_createNumPlayersOption","_createNumPlayersRange","Array","from","_","i","slice","onChangeNumPlayers","onChangeSelectedGame","onClickCreate","matchDetails","console","assert","evt","index","number","LobbyPhases","Lobby","phase","ENTER","runningMatch","errorMsg","credentialStore","_createConnection","connection","lobbyServer","_updateCredentials","prevState","store","Object","assign","_updateConnection","_enterLobby","_startRefreshInterval","LIST","_exitLobby","_clearRefreshInterval","_createMatch","message","_joinMatch","_leaveMatch","_startMatch","matchOpts","gameCode","gameServer","bots","app","clientFactory","PLAY","_exitMatch","_getPhaseVisibility","renderMatches","values","cookie","load","creds","save","path","refreshInterval","_currentInterval","setInterval","clearInterval","renderer","handleEnterLobby","handleExitLobby","handleCreateMatch","handleJoinMatch","handleLeaveMatch","handleExitMatch","handleRefreshMatches","handleStartMatch","style","padding","array","isRequired","bool","func"],"sources":["/Users/aaron/Desktop/School/488_CMPSC/GUI-based-Web-Game-with-Cloud-Native-Infrastructure-Backend 3-21 copy 2/upwardmobility/node_modules/boardgame.io/dist/esm/react.js"],"sourcesContent":["import 'nanoid/non-secure';\nimport './Debug-8242c26e.js';\nimport 'redux';\nimport './turn-order-8cc4909b.js';\nimport 'immer';\nimport './plugin-random-087f861e.js';\nimport 'lodash.isplainobject';\nimport './reducer-24ea3e4c.js';\nimport 'rfc6902';\nimport './initialize-7316768f.js';\nimport './transport-ce07b771.js';\nimport { C as Client$1 } from './client-f7f02b82.js';\nimport 'flatted';\nimport 'setimmediate';\nimport { M as MCTSBot } from './ai-7998b00f.js';\nimport { L as LobbyClient } from './client-5f57c3f2.js';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Cookies from 'react-cookies';\nimport './util-991e76bb.js';\nimport { S as SocketIO, L as Local } from './socketio-a82b84e4.js';\nimport './master-17425f07.js';\nimport './filter-player-view-43ed49b0.js';\nimport 'socket.io-client';\n\n/*\r\n * Copyright 2017 The boardgame.io Authors\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\r\n/**\r\n * Client\r\n *\r\n * boardgame.io React client.\r\n *\r\n * @param {...object} game - The return value of `Game`.\r\n * @param {...object} numPlayers - The number of players.\r\n * @param {...object} board - The React component for the game.\r\n * @param {...object} loading - (optional) The React component for the loading state.\r\n * @param {...object} multiplayer - Set to a falsy value or a transportFactory, e.g., SocketIO()\r\n * @param {...object} debug - Enables the Debug UI.\r\n * @param {...object} enhancer - Optional enhancer to send to the Redux store\r\n *\r\n * Returns:\r\n *   A React component that wraps board and provides an\r\n *   API through props for it to interact with the framework\r\n *   and dispatch actions such as MAKE_MOVE, GAME_EVENT, RESET,\r\n *   UNDO and REDO.\r\n */\r\nfunction Client(opts) {\r\n    var _a;\r\n    const { game, numPlayers, board, multiplayer, enhancer } = opts;\r\n    let { loading, debug } = opts;\r\n    // Component that is displayed before the client has synced\r\n    // with the game master.\r\n    if (loading === undefined) {\r\n        const Loading = () => React.createElement(\"div\", { className: \"bgio-loading\" }, \"connecting...\");\r\n        loading = Loading;\r\n    }\r\n    /*\r\n     * WrappedBoard\r\n     *\r\n     * The main React component that wraps the passed in\r\n     * board component and adds the API to its props.\r\n     */\r\n    return _a = class WrappedBoard extends React.Component {\r\n            constructor(props) {\r\n                super(props);\r\n                if (debug === undefined) {\r\n                    debug = props.debug;\r\n                }\r\n                this.client = Client$1({\r\n                    game,\r\n                    debug,\r\n                    numPlayers,\r\n                    multiplayer,\r\n                    matchID: props.matchID,\r\n                    playerID: props.playerID,\r\n                    credentials: props.credentials,\r\n                    enhancer,\r\n                });\r\n            }\r\n            componentDidMount() {\r\n                this.unsubscribe = this.client.subscribe(() => this.forceUpdate());\r\n                this.client.start();\r\n            }\r\n            componentWillUnmount() {\r\n                this.client.stop();\r\n                this.unsubscribe();\r\n            }\r\n            componentDidUpdate(prevProps) {\r\n                if (this.props.matchID != prevProps.matchID) {\r\n                    this.client.updateMatchID(this.props.matchID);\r\n                }\r\n                if (this.props.playerID != prevProps.playerID) {\r\n                    this.client.updatePlayerID(this.props.playerID);\r\n                }\r\n                if (this.props.credentials != prevProps.credentials) {\r\n                    this.client.updateCredentials(this.props.credentials);\r\n                }\r\n            }\r\n            render() {\r\n                const state = this.client.getState();\r\n                if (state === null) {\r\n                    return React.createElement(loading);\r\n                }\r\n                let _board = null;\r\n                if (board) {\r\n                    _board = React.createElement(board, {\r\n                        ...state,\r\n                        ...this.props,\r\n                        isMultiplayer: !!multiplayer,\r\n                        moves: this.client.moves,\r\n                        events: this.client.events,\r\n                        matchID: this.client.matchID,\r\n                        playerID: this.client.playerID,\r\n                        reset: this.client.reset,\r\n                        undo: this.client.undo,\r\n                        redo: this.client.redo,\r\n                        log: this.client.log,\r\n                        matchData: this.client.matchData,\r\n                        sendChatMessage: this.client.sendChatMessage,\r\n                        chatMessages: this.client.chatMessages,\r\n                    });\r\n                }\r\n                return React.createElement(\"div\", { className: \"bgio-client\" }, _board);\r\n            }\r\n        },\r\n        _a.propTypes = {\r\n            // The ID of a game to connect to.\r\n            // Only relevant in multiplayer.\r\n            matchID: PropTypes.string,\r\n            // The ID of the player associated with this client.\r\n            // Only relevant in multiplayer.\r\n            playerID: PropTypes.string,\r\n            // This client's authentication credentials.\r\n            // Only relevant in multiplayer.\r\n            credentials: PropTypes.string,\r\n            // Enable / disable the Debug UI.\r\n            debug: PropTypes.any,\r\n        },\r\n        _a.defaultProps = {\r\n            matchID: 'default',\r\n            playerID: null,\r\n            credentials: null,\r\n            debug: true,\r\n        },\r\n        _a;\r\n}\n\n/*\r\n * Copyright 2018 The boardgame.io Authors\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\r\nclass _LobbyConnectionImpl {\r\n    constructor({ server, gameComponents, playerName, playerCredentials, }) {\r\n        this.client = new LobbyClient({ server });\r\n        this.gameComponents = gameComponents;\r\n        this.playerName = playerName || 'Visitor';\r\n        this.playerCredentials = playerCredentials;\r\n        this.matches = [];\r\n    }\r\n    async refresh() {\r\n        try {\r\n            this.matches = [];\r\n            const games = await this.client.listGames();\r\n            for (const game of games) {\r\n                if (!this._getGameComponents(game))\r\n                    continue;\r\n                const { matches } = await this.client.listMatches(game);\r\n                this.matches.push(...matches);\r\n            }\r\n        }\r\n        catch (error) {\r\n            throw new Error('failed to retrieve list of matches (' + error + ')');\r\n        }\r\n    }\r\n    _getMatchInstance(matchID) {\r\n        for (const inst of this.matches) {\r\n            if (inst['matchID'] === matchID)\r\n                return inst;\r\n        }\r\n    }\r\n    _getGameComponents(gameName) {\r\n        for (const comp of this.gameComponents) {\r\n            if (comp.game.name === gameName)\r\n                return comp;\r\n        }\r\n    }\r\n    _findPlayer(playerName) {\r\n        for (const inst of this.matches) {\r\n            if (inst.players.some((player) => player.name === playerName))\r\n                return inst;\r\n        }\r\n    }\r\n    async join(gameName, matchID, playerID) {\r\n        try {\r\n            let inst = this._findPlayer(this.playerName);\r\n            if (inst) {\r\n                throw new Error('player has already joined ' + inst.matchID);\r\n            }\r\n            inst = this._getMatchInstance(matchID);\r\n            if (!inst) {\r\n                throw new Error('game instance ' + matchID + ' not found');\r\n            }\r\n            const json = await this.client.joinMatch(gameName, matchID, {\r\n                playerID,\r\n                playerName: this.playerName,\r\n            });\r\n            inst.players[Number.parseInt(playerID)].name = this.playerName;\r\n            this.playerCredentials = json.playerCredentials;\r\n        }\r\n        catch (error) {\r\n            throw new Error('failed to join match ' + matchID + ' (' + error + ')');\r\n        }\r\n    }\r\n    async leave(gameName, matchID) {\r\n        try {\r\n            const inst = this._getMatchInstance(matchID);\r\n            if (!inst)\r\n                throw new Error('match instance not found');\r\n            for (const player of inst.players) {\r\n                if (player.name === this.playerName) {\r\n                    await this.client.leaveMatch(gameName, matchID, {\r\n                        playerID: player.id.toString(),\r\n                        credentials: this.playerCredentials,\r\n                    });\r\n                    delete player.name;\r\n                    delete this.playerCredentials;\r\n                    return;\r\n                }\r\n            }\r\n            throw new Error('player not found in match');\r\n        }\r\n        catch (error) {\r\n            throw new Error('failed to leave match ' + matchID + ' (' + error + ')');\r\n        }\r\n    }\r\n    async disconnect() {\r\n        const inst = this._findPlayer(this.playerName);\r\n        if (inst) {\r\n            await this.leave(inst.gameName, inst.matchID);\r\n        }\r\n        this.matches = [];\r\n        this.playerName = 'Visitor';\r\n    }\r\n    async create(gameName, numPlayers) {\r\n        try {\r\n            const comp = this._getGameComponents(gameName);\r\n            if (!comp)\r\n                throw new Error('game not found');\r\n            if (numPlayers < comp.game.minPlayers ||\r\n                numPlayers > comp.game.maxPlayers)\r\n                throw new Error('invalid number of players ' + numPlayers);\r\n            await this.client.createMatch(gameName, { numPlayers });\r\n        }\r\n        catch (error) {\r\n            throw new Error('failed to create match for ' + gameName + ' (' + error + ')');\r\n        }\r\n    }\r\n}\r\n/**\r\n * LobbyConnection\r\n *\r\n * Lobby model.\r\n *\r\n * @param {string}   server - '<host>:<port>' of the server.\r\n * @param {Array}    gameComponents - A map of Board and Game objects for the supported games.\r\n * @param {string}   playerName - The name of the player.\r\n * @param {string}   playerCredentials - The credentials currently used by the player, if any.\r\n *\r\n * Returns:\r\n *   A JS object that synchronizes the list of running game instances with the server and provides an API to create/join/start instances.\r\n */\r\nfunction LobbyConnection(opts) {\r\n    return new _LobbyConnectionImpl(opts);\r\n}\n\n/*\r\n * Copyright 2018 The boardgame.io Authors.\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\r\nclass LobbyLoginForm extends React.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {\r\n            playerName: this.props.playerName,\r\n            nameErrorMsg: '',\r\n        };\r\n        this.onClickEnter = () => {\r\n            if (this.state.playerName === '')\r\n                return;\r\n            this.props.onEnter(this.state.playerName);\r\n        };\r\n        this.onKeyPress = (event) => {\r\n            if (event.key === 'Enter') {\r\n                this.onClickEnter();\r\n            }\r\n        };\r\n        this.onChangePlayerName = (event) => {\r\n            const name = event.target.value.trim();\r\n            this.setState({\r\n                playerName: name,\r\n                nameErrorMsg: name.length > 0 ? '' : 'empty player name',\r\n            });\r\n        };\r\n    }\r\n    render() {\r\n        return (React.createElement(\"div\", null,\r\n            React.createElement(\"p\", { className: \"phase-title\" }, \"Choose a player name:\"),\r\n            React.createElement(\"input\", { type: \"text\", value: this.state.playerName, onChange: this.onChangePlayerName, onKeyPress: this.onKeyPress }),\r\n            React.createElement(\"span\", { className: \"buttons\" },\r\n                React.createElement(\"button\", { className: \"buttons\", onClick: this.onClickEnter }, \"Enter\")),\r\n            React.createElement(\"br\", null),\r\n            React.createElement(\"span\", { className: \"error-msg\" },\r\n                this.state.nameErrorMsg,\r\n                React.createElement(\"br\", null))));\r\n    }\r\n}\r\nLobbyLoginForm.defaultProps = {\r\n    playerName: '',\r\n};\n\n/*\r\n * Copyright 2018 The boardgame.io Authors.\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\r\nclass LobbyMatchInstance extends React.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._createSeat = (player) => {\r\n            return player.name || '[free]';\r\n        };\r\n        this._createButtonJoin = (inst, seatId) => (React.createElement(\"button\", { key: 'button-join-' + inst.matchID, onClick: () => this.props.onClickJoin(inst.gameName, inst.matchID, '' + seatId) }, \"Join\"));\r\n        this._createButtonLeave = (inst) => (React.createElement(\"button\", { key: 'button-leave-' + inst.matchID, onClick: () => this.props.onClickLeave(inst.gameName, inst.matchID) }, \"Leave\"));\r\n        this._createButtonPlay = (inst, seatId) => (React.createElement(\"button\", { key: 'button-play-' + inst.matchID, onClick: () => this.props.onClickPlay(inst.gameName, {\r\n                matchID: inst.matchID,\r\n                playerID: '' + seatId,\r\n                numPlayers: inst.players.length,\r\n            }) }, \"Play\"));\r\n        this._createButtonSpectate = (inst) => (React.createElement(\"button\", { key: 'button-spectate-' + inst.matchID, onClick: () => this.props.onClickPlay(inst.gameName, {\r\n                matchID: inst.matchID,\r\n                numPlayers: inst.players.length,\r\n            }) }, \"Spectate\"));\r\n        this._createInstanceButtons = (inst) => {\r\n            const playerSeat = inst.players.find((player) => player.name === this.props.playerName);\r\n            const freeSeat = inst.players.find((player) => !player.name);\r\n            if (playerSeat && freeSeat) {\r\n                // already seated: waiting for match to start\r\n                return this._createButtonLeave(inst);\r\n            }\r\n            if (freeSeat) {\r\n                // at least 1 seat is available\r\n                return this._createButtonJoin(inst, freeSeat.id);\r\n            }\r\n            // match is full\r\n            if (playerSeat) {\r\n                return (React.createElement(\"div\", null, [\r\n                    this._createButtonPlay(inst, playerSeat.id),\r\n                    this._createButtonLeave(inst),\r\n                ]));\r\n            }\r\n            // allow spectating\r\n            return this._createButtonSpectate(inst);\r\n        };\r\n    }\r\n    render() {\r\n        const match = this.props.match;\r\n        let status = 'OPEN';\r\n        if (!match.players.some((player) => !player.name)) {\r\n            status = 'RUNNING';\r\n        }\r\n        return (React.createElement(\"tr\", { key: 'line-' + match.matchID },\r\n            React.createElement(\"td\", { key: 'cell-name-' + match.matchID }, match.gameName),\r\n            React.createElement(\"td\", { key: 'cell-status-' + match.matchID }, status),\r\n            React.createElement(\"td\", { key: 'cell-seats-' + match.matchID }, match.players.map((player) => this._createSeat(player)).join(', ')),\r\n            React.createElement(\"td\", { key: 'cell-buttons-' + match.matchID }, this._createInstanceButtons(match))));\r\n    }\r\n}\n\n/*\r\n * Copyright 2018 The boardgame.io Authors.\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\r\nclass LobbyCreateMatchForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            selectedGame: 0,\r\n            numPlayers: 2,\r\n        };\r\n        this._createGameNameOption = (game, idx) => {\r\n            return (React.createElement(\"option\", { key: 'name-option-' + idx, value: idx }, game.game.name));\r\n        };\r\n        this._createNumPlayersOption = (idx) => {\r\n            return (React.createElement(\"option\", { key: 'num-option-' + idx, value: idx }, idx));\r\n        };\r\n        this._createNumPlayersRange = (game) => {\r\n            return Array.from({ length: game.maxPlayers + 1 })\r\n                .map((_, i) => i)\r\n                .slice(game.minPlayers);\r\n        };\r\n        this.onChangeNumPlayers = (event) => {\r\n            this.setState({\r\n                numPlayers: Number.parseInt(event.target.value),\r\n            });\r\n        };\r\n        this.onChangeSelectedGame = (event) => {\r\n            const idx = Number.parseInt(event.target.value);\r\n            this.setState({\r\n                selectedGame: idx,\r\n                numPlayers: this.props.games[idx].game.minPlayers,\r\n            });\r\n        };\r\n        this.onClickCreate = () => {\r\n            this.props.createMatch(this.props.games[this.state.selectedGame].game.name, this.state.numPlayers);\r\n        };\r\n        /* fix min and max number of players */\r\n        for (const game of props.games) {\r\n            const matchDetails = game.game;\r\n            if (!matchDetails.minPlayers) {\r\n                matchDetails.minPlayers = 1;\r\n            }\r\n            if (!matchDetails.maxPlayers) {\r\n                matchDetails.maxPlayers = 4;\r\n            }\r\n            console.assert(matchDetails.maxPlayers >= matchDetails.minPlayers);\r\n        }\r\n        this.state = {\r\n            selectedGame: 0,\r\n            numPlayers: props.games[0].game.minPlayers,\r\n        };\r\n    }\r\n    render() {\r\n        return (React.createElement(\"div\", null,\r\n            React.createElement(\"select\", { value: this.state.selectedGame, onChange: (evt) => this.onChangeSelectedGame(evt) }, this.props.games.map((game, index) => this._createGameNameOption(game, index))),\r\n            React.createElement(\"span\", null, \"Players:\"),\r\n            React.createElement(\"select\", { value: this.state.numPlayers, onChange: this.onChangeNumPlayers }, this._createNumPlayersRange(this.props.games[this.state.selectedGame].game).map((number) => this._createNumPlayersOption(number))),\r\n            React.createElement(\"span\", { className: \"buttons\" },\r\n                React.createElement(\"button\", { onClick: this.onClickCreate }, \"Create\"))));\r\n    }\r\n}\n\n/*\r\n * Copyright 2018 The boardgame.io Authors.\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\r\nvar LobbyPhases;\r\n(function (LobbyPhases) {\r\n    LobbyPhases[\"ENTER\"] = \"enter\";\r\n    LobbyPhases[\"PLAY\"] = \"play\";\r\n    LobbyPhases[\"LIST\"] = \"list\";\r\n})(LobbyPhases || (LobbyPhases = {}));\r\n/**\r\n * Lobby\r\n *\r\n * React lobby component.\r\n *\r\n * @param {Array}  gameComponents - An array of Board and Game objects for the supported games.\r\n * @param {string} lobbyServer - Address of the lobby server (for example 'localhost:8000').\r\n *                               If not set, defaults to the server that served the page.\r\n * @param {string} gameServer - Address of the game server (for example 'localhost:8001').\r\n *                              If not set, defaults to the server that served the page.\r\n * @param {function} clientFactory - Function that is used to create the game clients.\r\n * @param {number} refreshInterval - Interval between server updates (default: 2000ms).\r\n * @param {bool}   debug - Enable debug information (default: false).\r\n *\r\n * Returns:\r\n *   A React component that provides a UI to create, list, join, leave, play or\r\n *   spectate matches (game instances).\r\n */\r\nclass Lobby extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            phase: LobbyPhases.ENTER,\r\n            playerName: 'Visitor',\r\n            runningMatch: null,\r\n            errorMsg: '',\r\n            credentialStore: {},\r\n        };\r\n        this._createConnection = (props) => {\r\n            const name = this.state.playerName;\r\n            this.connection = LobbyConnection({\r\n                server: props.lobbyServer,\r\n                gameComponents: props.gameComponents,\r\n                playerName: name,\r\n                playerCredentials: this.state.credentialStore[name],\r\n            });\r\n        };\r\n        this._updateCredentials = (playerName, credentials) => {\r\n            this.setState((prevState) => {\r\n                // clone store or componentDidUpdate will not be triggered\r\n                const store = Object.assign({}, prevState.credentialStore);\r\n                store[playerName] = credentials;\r\n                return { credentialStore: store };\r\n            });\r\n        };\r\n        this._updateConnection = async () => {\r\n            await this.connection.refresh();\r\n            this.forceUpdate();\r\n        };\r\n        this._enterLobby = (playerName) => {\r\n            this._startRefreshInterval();\r\n            this.setState({ playerName, phase: LobbyPhases.LIST });\r\n        };\r\n        this._exitLobby = async () => {\r\n            this._clearRefreshInterval();\r\n            await this.connection.disconnect();\r\n            this.setState({ phase: LobbyPhases.ENTER, errorMsg: '' });\r\n        };\r\n        this._createMatch = async (gameName, numPlayers) => {\r\n            try {\r\n                await this.connection.create(gameName, numPlayers);\r\n                await this.connection.refresh();\r\n                // rerender\r\n                this.setState({});\r\n            }\r\n            catch (error) {\r\n                this.setState({ errorMsg: error.message });\r\n            }\r\n        };\r\n        this._joinMatch = async (gameName, matchID, playerID) => {\r\n            try {\r\n                await this.connection.join(gameName, matchID, playerID);\r\n                await this.connection.refresh();\r\n                this._updateCredentials(this.connection.playerName, this.connection.playerCredentials);\r\n            }\r\n            catch (error) {\r\n                this.setState({ errorMsg: error.message });\r\n            }\r\n        };\r\n        this._leaveMatch = async (gameName, matchID) => {\r\n            try {\r\n                await this.connection.leave(gameName, matchID);\r\n                await this.connection.refresh();\r\n                this._updateCredentials(this.connection.playerName, this.connection.playerCredentials);\r\n            }\r\n            catch (error) {\r\n                this.setState({ errorMsg: error.message });\r\n            }\r\n        };\r\n        this._startMatch = (gameName, matchOpts) => {\r\n            const gameCode = this.connection._getGameComponents(gameName);\r\n            if (!gameCode) {\r\n                this.setState({\r\n                    errorMsg: 'game ' + gameName + ' not supported',\r\n                });\r\n                return;\r\n            }\r\n            let multiplayer = undefined;\r\n            if (matchOpts.numPlayers > 1) {\r\n                multiplayer = this.props.gameServer\r\n                    ? SocketIO({ server: this.props.gameServer })\r\n                    : SocketIO();\r\n            }\r\n            if (matchOpts.numPlayers == 1) {\r\n                const maxPlayers = gameCode.game.maxPlayers;\r\n                const bots = {};\r\n                for (let i = 1; i < maxPlayers; i++) {\r\n                    bots[i + ''] = MCTSBot;\r\n                }\r\n                multiplayer = Local({ bots });\r\n            }\r\n            const app = this.props.clientFactory({\r\n                game: gameCode.game,\r\n                board: gameCode.board,\r\n                debug: this.props.debug,\r\n                multiplayer,\r\n            });\r\n            const match = {\r\n                app: app,\r\n                matchID: matchOpts.matchID,\r\n                playerID: matchOpts.numPlayers > 1 ? matchOpts.playerID : '0',\r\n                credentials: this.connection.playerCredentials,\r\n            };\r\n            this._clearRefreshInterval();\r\n            this.setState({ phase: LobbyPhases.PLAY, runningMatch: match });\r\n        };\r\n        this._exitMatch = () => {\r\n            this._startRefreshInterval();\r\n            this.setState({ phase: LobbyPhases.LIST, runningMatch: null });\r\n        };\r\n        this._getPhaseVisibility = (phase) => {\r\n            return this.state.phase !== phase ? 'hidden' : 'phase';\r\n        };\r\n        this.renderMatches = (matches, playerName) => {\r\n            return matches.map((match) => {\r\n                const { matchID, gameName, players } = match;\r\n                return (React.createElement(LobbyMatchInstance, { key: 'instance-' + matchID, match: { matchID, gameName, players: Object.values(players) }, playerName: playerName, onClickJoin: this._joinMatch, onClickLeave: this._leaveMatch, onClickPlay: this._startMatch }));\r\n            });\r\n        };\r\n        this._createConnection(this.props);\r\n    }\r\n    componentDidMount() {\r\n        const cookie = Cookies.load('lobbyState') || {};\r\n        if (cookie.phase && cookie.phase === LobbyPhases.PLAY) {\r\n            cookie.phase = LobbyPhases.LIST;\r\n        }\r\n        if (cookie.phase && cookie.phase !== LobbyPhases.ENTER) {\r\n            this._startRefreshInterval();\r\n        }\r\n        this.setState({\r\n            phase: cookie.phase || LobbyPhases.ENTER,\r\n            playerName: cookie.playerName || 'Visitor',\r\n            credentialStore: cookie.credentialStore || {},\r\n        });\r\n    }\r\n    componentDidUpdate(prevProps, prevState) {\r\n        const name = this.state.playerName;\r\n        const creds = this.state.credentialStore[name];\r\n        if (prevState.phase !== this.state.phase ||\r\n            prevState.credentialStore[name] !== creds ||\r\n            prevState.playerName !== name) {\r\n            this._createConnection(this.props);\r\n            this._updateConnection();\r\n            const cookie = {\r\n                phase: this.state.phase,\r\n                playerName: name,\r\n                credentialStore: this.state.credentialStore,\r\n            };\r\n            Cookies.save('lobbyState', cookie, { path: '/' });\r\n        }\r\n        if (prevProps.refreshInterval !== this.props.refreshInterval) {\r\n            this._startRefreshInterval();\r\n        }\r\n    }\r\n    componentWillUnmount() {\r\n        this._clearRefreshInterval();\r\n    }\r\n    _startRefreshInterval() {\r\n        this._clearRefreshInterval();\r\n        this._currentInterval = setInterval(this._updateConnection, this.props.refreshInterval);\r\n    }\r\n    _clearRefreshInterval() {\r\n        clearInterval(this._currentInterval);\r\n    }\r\n    render() {\r\n        const { gameComponents, renderer } = this.props;\r\n        const { errorMsg, playerName, phase, runningMatch } = this.state;\r\n        if (renderer) {\r\n            return renderer({\r\n                errorMsg,\r\n                gameComponents,\r\n                matches: this.connection.matches,\r\n                phase,\r\n                playerName,\r\n                runningMatch,\r\n                handleEnterLobby: this._enterLobby,\r\n                handleExitLobby: this._exitLobby,\r\n                handleCreateMatch: this._createMatch,\r\n                handleJoinMatch: this._joinMatch,\r\n                handleLeaveMatch: this._leaveMatch,\r\n                handleExitMatch: this._exitMatch,\r\n                handleRefreshMatches: this._updateConnection,\r\n                handleStartMatch: this._startMatch,\r\n            });\r\n        }\r\n        return (React.createElement(\"div\", { id: \"lobby-view\", style: { padding: 50 } },\r\n            React.createElement(\"div\", { className: this._getPhaseVisibility(LobbyPhases.ENTER) },\r\n                React.createElement(LobbyLoginForm, { key: playerName, playerName: playerName, onEnter: this._enterLobby })),\r\n            React.createElement(\"div\", { className: this._getPhaseVisibility(LobbyPhases.LIST) },\r\n                React.createElement(\"p\", null,\r\n                    \"Welcome, \",\r\n                    playerName),\r\n                React.createElement(\"div\", { className: \"phase-title\", id: \"match-creation\" },\r\n                    React.createElement(\"span\", null, \"Create a match:\"),\r\n                    React.createElement(LobbyCreateMatchForm, { games: gameComponents, createMatch: this._createMatch })),\r\n                React.createElement(\"p\", { className: \"phase-title\" }, \"Join a match:\"),\r\n                React.createElement(\"div\", { id: \"instances\" },\r\n                    React.createElement(\"table\", null,\r\n                        React.createElement(\"tbody\", null, this.renderMatches(this.connection.matches, playerName))),\r\n                    React.createElement(\"span\", { className: \"error-msg\" },\r\n                        errorMsg,\r\n                        React.createElement(\"br\", null))),\r\n                React.createElement(\"p\", { className: \"phase-title\" }, \"Matches that become empty are automatically deleted.\")),\r\n            React.createElement(\"div\", { className: this._getPhaseVisibility(LobbyPhases.PLAY) },\r\n                runningMatch && (React.createElement(runningMatch.app, { matchID: runningMatch.matchID, playerID: runningMatch.playerID, credentials: runningMatch.credentials })),\r\n                React.createElement(\"div\", { className: \"buttons\", id: \"match-exit\" },\r\n                    React.createElement(\"button\", { onClick: this._exitMatch }, \"Exit match\"))),\r\n            React.createElement(\"div\", { className: \"buttons\", id: \"lobby-exit\" },\r\n                React.createElement(\"button\", { onClick: this._exitLobby }, \"Exit lobby\"))));\r\n    }\r\n}\r\nLobby.propTypes = {\r\n    gameComponents: PropTypes.array.isRequired,\r\n    lobbyServer: PropTypes.string,\r\n    gameServer: PropTypes.string,\r\n    debug: PropTypes.bool,\r\n    clientFactory: PropTypes.func,\r\n    refreshInterval: PropTypes.number,\r\n};\r\nLobby.defaultProps = {\r\n    debug: false,\r\n    clientFactory: Client,\r\n    refreshInterval: 2000,\r\n};\n\nexport { Client, Lobby };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
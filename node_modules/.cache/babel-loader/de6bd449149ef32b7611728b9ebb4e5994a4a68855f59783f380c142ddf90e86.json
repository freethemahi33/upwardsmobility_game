{"ast":null,"code":"const assertString = (str, label) => {\n  if (!str || typeof str !== 'string') {\n    throw new Error(`Expected ${label} string, got \"${str}\".`);\n  }\n};\nconst assertGameName = name => assertString(name, 'game name');\nconst assertMatchID = id => assertString(id, 'match ID');\nconst validateBody = (body, schema) => {\n  if (!body) throw new Error(`Expected body, got “${body}”.`);\n  for (const key in schema) {\n    const propSchema = schema[key];\n    const types = Array.isArray(propSchema) ? propSchema : [propSchema];\n    const received = body[key];\n    if (!types.includes(typeof received)) {\n      const union = types.join('|');\n      throw new TypeError(`Expected body.${key} to be of type ${union}, got “${received}”.`);\n    }\n  }\n};\nclass LobbyClientError extends Error {\n  constructor(message, details) {\n    super(message);\n    this.details = details;\n  }\n}\n/**\r\n * Create a boardgame.io Lobby API client.\r\n * @param server The API’s base URL, e.g. `http://localhost:8000`.\r\n */\nclass LobbyClient {\n  constructor() {\n    let {\n      server = ''\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    // strip trailing slash if passed\n    this.server = server.replace(/\\/$/, '');\n  }\n  async request(route, init) {\n    const response = await fetch(this.server + route, init);\n    if (!response.ok) {\n      let details;\n      try {\n        details = await response.clone().json();\n      } catch {\n        try {\n          details = await response.text();\n        } catch (error) {\n          details = error.message;\n        }\n      }\n      throw new LobbyClientError(`HTTP status ${response.status}`, details);\n    }\n    return response.json();\n  }\n  async post(route, opts) {\n    let init = {\n      method: 'post',\n      body: JSON.stringify(opts.body),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    if (opts.init) init = {\n      ...init,\n      ...opts.init,\n      headers: {\n        ...init.headers,\n        ...opts.init.headers\n      }\n    };\n    return this.request(route, init);\n  }\n  /**\r\n   * Get a list of the game names available on this server.\r\n   * @param  init Optional RequestInit interface to override defaults.\r\n   * @return Array of game names.\r\n   *\r\n   * @example\r\n   * lobbyClient.listGames()\r\n   *   .then(console.log); // => ['chess', 'tic-tac-toe']\r\n   */\n  async listGames(init) {\n    return this.request('/games', init);\n  }\n  /**\r\n   * Get a list of the matches for a specific game type on the server.\r\n   * @param  gameName The game to list for, e.g. 'tic-tac-toe'.\r\n   * @param  where    Options to filter matches by update time or gameover state\r\n   * @param  init     Optional RequestInit interface to override defaults.\r\n   * @return Array of match metadata objects.\r\n   *\r\n   * @example\r\n   * lobbyClient.listMatches('tic-tac-toe', where: { isGameover: false })\r\n   *   .then(data => console.log(data.matches));\r\n   * // => [\r\n   * //   {\r\n   * //     matchID: 'xyz',\r\n   * //     gameName: 'tic-tac-toe',\r\n   * //     players: [{ id: 0, name: 'Alice' }, { id: 1 }]\r\n   * //   },\r\n   * //   ...\r\n   * // ]\r\n   */\n  async listMatches(gameName, where, init) {\n    assertGameName(gameName);\n    let query = '';\n    if (where) {\n      const queries = [];\n      const {\n        isGameover,\n        updatedBefore,\n        updatedAfter\n      } = where;\n      if (isGameover !== undefined) queries.push(`isGameover=${isGameover}`);\n      if (updatedBefore) queries.push(`updatedBefore=${updatedBefore}`);\n      if (updatedAfter) queries.push(`updatedAfter=${updatedAfter}`);\n      if (queries.length > 0) query = '?' + queries.join('&');\n    }\n    return this.request(`/games/${gameName}${query}`, init);\n  }\n  /**\r\n   * Get metadata for a specific match.\r\n   * @param  gameName The match’s game type, e.g. 'tic-tac-toe'.\r\n   * @param  matchID  Match ID for the match to fetch.\r\n   * @param  init     Optional RequestInit interface to override defaults.\r\n   * @return A match metadata object.\r\n   *\r\n   * @example\r\n   * lobbyClient.getMatch('tic-tac-toe', 'xyz').then(console.log);\r\n   * // => {\r\n   * //   matchID: 'xyz',\r\n   * //   gameName: 'tic-tac-toe',\r\n   * //   players: [{ id: 0, name: 'Alice' }, { id: 1 }]\r\n   * // }\r\n   */\n  async getMatch(gameName, matchID, init) {\n    assertGameName(gameName);\n    assertMatchID(matchID);\n    return this.request(`/games/${gameName}/${matchID}`, init);\n  }\n  /**\r\n   * Create a new match for a specific game type.\r\n   * @param  gameName The game to create a match for, e.g. 'tic-tac-toe'.\r\n   * @param  body     Options required to configure match creation.\r\n   * @param  init     Optional RequestInit interface to override defaults.\r\n   * @return An object containing the created `matchID`.\r\n   *\r\n   * @example\r\n   * lobbyClient.createMatch('tic-tac-toe', { numPlayers: 2 })\r\n   *   .then(console.log);\r\n   * // => { matchID: 'xyz' }\r\n   */\n  async createMatch(gameName, body, init) {\n    assertGameName(gameName);\n    validateBody(body, {\n      numPlayers: 'number'\n    });\n    return this.post(`/games/${gameName}/create`, {\n      body,\n      init\n    });\n  }\n  /**\r\n   * Join a match using its matchID.\r\n   * @param  gameName The match’s game type, e.g. 'tic-tac-toe'.\r\n   * @param  matchID  Match ID for the match to join.\r\n   * @param  body     Options required to join match.\r\n   * @param  init     Optional RequestInit interface to override defaults.\r\n   * @return Object containing `playerCredentials` for the player who joined.\r\n   *\r\n   * @example\r\n   * lobbyClient.joinMatch('tic-tac-toe', 'xyz', {\r\n   *   playerID: '1',\r\n   *   playerName: 'Bob',\r\n   * }).then(console.log);\r\n   * // => { playerID: '1', playerCredentials: 'random-string' }\r\n   */\n  async joinMatch(gameName, matchID, body, init) {\n    assertGameName(gameName);\n    assertMatchID(matchID);\n    validateBody(body, {\n      playerID: ['string', 'undefined'],\n      playerName: 'string'\n    });\n    return this.post(`/games/${gameName}/${matchID}/join`, {\n      body,\n      init\n    });\n  }\n  /**\r\n   * Leave a previously joined match.\r\n   * @param  gameName The match’s game type, e.g. 'tic-tac-toe'.\r\n   * @param  matchID  Match ID for the match to leave.\r\n   * @param  body     Options required to leave match.\r\n   * @param  init     Optional RequestInit interface to override defaults.\r\n   * @return Promise resolves if successful.\r\n   *\r\n   * @example\r\n   * lobbyClient.leaveMatch('tic-tac-toe', 'xyz', {\r\n   *   playerID: '1',\r\n   *   credentials: 'credentials-returned-when-joining',\r\n   * })\r\n   *   .then(() => console.log('Left match.'))\r\n   *   .catch(error => console.error('Error leaving match', error));\r\n   */\n  async leaveMatch(gameName, matchID, body, init) {\n    assertGameName(gameName);\n    assertMatchID(matchID);\n    validateBody(body, {\n      playerID: 'string',\n      credentials: 'string'\n    });\n    await this.post(`/games/${gameName}/${matchID}/leave`, {\n      body,\n      init\n    });\n  }\n  /**\r\n   * Update a player’s name or custom metadata.\r\n   * @param  gameName The match’s game type, e.g. 'tic-tac-toe'.\r\n   * @param  matchID  Match ID for the match to update.\r\n   * @param  body     Options required to update player.\r\n   * @param  init     Optional RequestInit interface to override defaults.\r\n   * @return Promise resolves if successful.\r\n   *\r\n   * @example\r\n   * lobbyClient.updatePlayer('tic-tac-toe', 'xyz', {\r\n   *   playerID: '0',\r\n   *   credentials: 'credentials-returned-when-joining',\r\n   *   newName: 'Al',\r\n   * })\r\n   *   .then(() => console.log('Updated player data.'))\r\n   *   .catch(error => console.error('Error updating data', error));\r\n   */\n  async updatePlayer(gameName, matchID, body, init) {\n    assertGameName(gameName);\n    assertMatchID(matchID);\n    validateBody(body, {\n      playerID: 'string',\n      credentials: 'string'\n    });\n    await this.post(`/games/${gameName}/${matchID}/update`, {\n      body,\n      init\n    });\n  }\n  /**\r\n   * Create a new match based on the configuration of the current match.\r\n   * @param  gameName The match’s game type, e.g. 'tic-tac-toe'.\r\n   * @param  matchID  Match ID for the match to play again.\r\n   * @param  body     Options required to configure match.\r\n   * @param  init     Optional RequestInit interface to override defaults.\r\n   * @return Object containing `nextMatchID`.\r\n   *\r\n   * @example\r\n   * lobbyClient.playAgain('tic-tac-toe', 'xyz', {\r\n   *   playerID: '0',\r\n   *   credentials: 'credentials-returned-when-joining',\r\n   * })\r\n   *   .then(({ nextMatchID }) => {\r\n   *     return lobbyClient.joinMatch('tic-tac-toe', nextMatchID, {\r\n   *       playerID: '0',\r\n   *       playerName: 'Al',\r\n   *     })\r\n   *   })\r\n   *   .then({ playerCredentials } => {\r\n   *     console.log(playerCredentials);\r\n   *   })\r\n   *   .catch(console.error);\r\n   */\n  async playAgain(gameName, matchID, body, init) {\n    assertGameName(gameName);\n    assertMatchID(matchID);\n    validateBody(body, {\n      playerID: 'string',\n      credentials: 'string'\n    });\n    return this.post(`/games/${gameName}/${matchID}/playAgain`, {\n      body,\n      init\n    });\n  }\n}\nexport { LobbyClient as L, LobbyClientError as a };","map":{"version":3,"names":["assertString","str","label","Error","assertGameName","name","assertMatchID","id","validateBody","body","schema","key","propSchema","types","Array","isArray","received","includes","union","join","TypeError","LobbyClientError","constructor","message","details","LobbyClient","server","arguments","length","undefined","replace","request","route","init","response","fetch","ok","clone","json","text","error","status","post","opts","method","JSON","stringify","headers","listGames","listMatches","gameName","where","query","queries","isGameover","updatedBefore","updatedAfter","push","getMatch","matchID","createMatch","numPlayers","joinMatch","playerID","playerName","leaveMatch","credentials","updatePlayer","playAgain","L","a"],"sources":["/Users/aaron/Desktop/School/488_CMPSC/GUI-based-Web-Game-with-Cloud-Native-Infrastructure-Backend 3-21 copy/upwardmobility/node_modules/boardgame.io/dist/esm/client-5f57c3f2.js"],"sourcesContent":["const assertString = (str, label) => {\r\n    if (!str || typeof str !== 'string') {\r\n        throw new Error(`Expected ${label} string, got \"${str}\".`);\r\n    }\r\n};\r\nconst assertGameName = (name) => assertString(name, 'game name');\r\nconst assertMatchID = (id) => assertString(id, 'match ID');\r\nconst validateBody = (body, schema) => {\r\n    if (!body)\r\n        throw new Error(`Expected body, got “${body}”.`);\r\n    for (const key in schema) {\r\n        const propSchema = schema[key];\r\n        const types = Array.isArray(propSchema) ? propSchema : [propSchema];\r\n        const received = body[key];\r\n        if (!types.includes(typeof received)) {\r\n            const union = types.join('|');\r\n            throw new TypeError(`Expected body.${key} to be of type ${union}, got “${received}”.`);\r\n        }\r\n    }\r\n};\r\nclass LobbyClientError extends Error {\r\n    constructor(message, details) {\r\n        super(message);\r\n        this.details = details;\r\n    }\r\n}\r\n/**\r\n * Create a boardgame.io Lobby API client.\r\n * @param server The API’s base URL, e.g. `http://localhost:8000`.\r\n */\r\nclass LobbyClient {\r\n    constructor({ server = '' } = {}) {\r\n        // strip trailing slash if passed\r\n        this.server = server.replace(/\\/$/, '');\r\n    }\r\n    async request(route, init) {\r\n        const response = await fetch(this.server + route, init);\r\n        if (!response.ok) {\r\n            let details;\r\n            try {\r\n                details = await response.clone().json();\r\n            }\r\n            catch {\r\n                try {\r\n                    details = await response.text();\r\n                }\r\n                catch (error) {\r\n                    details = error.message;\r\n                }\r\n            }\r\n            throw new LobbyClientError(`HTTP status ${response.status}`, details);\r\n        }\r\n        return response.json();\r\n    }\r\n    async post(route, opts) {\r\n        let init = {\r\n            method: 'post',\r\n            body: JSON.stringify(opts.body),\r\n            headers: { 'Content-Type': 'application/json' },\r\n        };\r\n        if (opts.init)\r\n            init = {\r\n                ...init,\r\n                ...opts.init,\r\n                headers: { ...init.headers, ...opts.init.headers },\r\n            };\r\n        return this.request(route, init);\r\n    }\r\n    /**\r\n     * Get a list of the game names available on this server.\r\n     * @param  init Optional RequestInit interface to override defaults.\r\n     * @return Array of game names.\r\n     *\r\n     * @example\r\n     * lobbyClient.listGames()\r\n     *   .then(console.log); // => ['chess', 'tic-tac-toe']\r\n     */\r\n    async listGames(init) {\r\n        return this.request('/games', init);\r\n    }\r\n    /**\r\n     * Get a list of the matches for a specific game type on the server.\r\n     * @param  gameName The game to list for, e.g. 'tic-tac-toe'.\r\n     * @param  where    Options to filter matches by update time or gameover state\r\n     * @param  init     Optional RequestInit interface to override defaults.\r\n     * @return Array of match metadata objects.\r\n     *\r\n     * @example\r\n     * lobbyClient.listMatches('tic-tac-toe', where: { isGameover: false })\r\n     *   .then(data => console.log(data.matches));\r\n     * // => [\r\n     * //   {\r\n     * //     matchID: 'xyz',\r\n     * //     gameName: 'tic-tac-toe',\r\n     * //     players: [{ id: 0, name: 'Alice' }, { id: 1 }]\r\n     * //   },\r\n     * //   ...\r\n     * // ]\r\n     */\r\n    async listMatches(gameName, where, init) {\r\n        assertGameName(gameName);\r\n        let query = '';\r\n        if (where) {\r\n            const queries = [];\r\n            const { isGameover, updatedBefore, updatedAfter } = where;\r\n            if (isGameover !== undefined)\r\n                queries.push(`isGameover=${isGameover}`);\r\n            if (updatedBefore)\r\n                queries.push(`updatedBefore=${updatedBefore}`);\r\n            if (updatedAfter)\r\n                queries.push(`updatedAfter=${updatedAfter}`);\r\n            if (queries.length > 0)\r\n                query = '?' + queries.join('&');\r\n        }\r\n        return this.request(`/games/${gameName}${query}`, init);\r\n    }\r\n    /**\r\n     * Get metadata for a specific match.\r\n     * @param  gameName The match’s game type, e.g. 'tic-tac-toe'.\r\n     * @param  matchID  Match ID for the match to fetch.\r\n     * @param  init     Optional RequestInit interface to override defaults.\r\n     * @return A match metadata object.\r\n     *\r\n     * @example\r\n     * lobbyClient.getMatch('tic-tac-toe', 'xyz').then(console.log);\r\n     * // => {\r\n     * //   matchID: 'xyz',\r\n     * //   gameName: 'tic-tac-toe',\r\n     * //   players: [{ id: 0, name: 'Alice' }, { id: 1 }]\r\n     * // }\r\n     */\r\n    async getMatch(gameName, matchID, init) {\r\n        assertGameName(gameName);\r\n        assertMatchID(matchID);\r\n        return this.request(`/games/${gameName}/${matchID}`, init);\r\n    }\r\n    /**\r\n     * Create a new match for a specific game type.\r\n     * @param  gameName The game to create a match for, e.g. 'tic-tac-toe'.\r\n     * @param  body     Options required to configure match creation.\r\n     * @param  init     Optional RequestInit interface to override defaults.\r\n     * @return An object containing the created `matchID`.\r\n     *\r\n     * @example\r\n     * lobbyClient.createMatch('tic-tac-toe', { numPlayers: 2 })\r\n     *   .then(console.log);\r\n     * // => { matchID: 'xyz' }\r\n     */\r\n    async createMatch(gameName, body, init) {\r\n        assertGameName(gameName);\r\n        validateBody(body, { numPlayers: 'number' });\r\n        return this.post(`/games/${gameName}/create`, { body, init });\r\n    }\r\n    /**\r\n     * Join a match using its matchID.\r\n     * @param  gameName The match’s game type, e.g. 'tic-tac-toe'.\r\n     * @param  matchID  Match ID for the match to join.\r\n     * @param  body     Options required to join match.\r\n     * @param  init     Optional RequestInit interface to override defaults.\r\n     * @return Object containing `playerCredentials` for the player who joined.\r\n     *\r\n     * @example\r\n     * lobbyClient.joinMatch('tic-tac-toe', 'xyz', {\r\n     *   playerID: '1',\r\n     *   playerName: 'Bob',\r\n     * }).then(console.log);\r\n     * // => { playerID: '1', playerCredentials: 'random-string' }\r\n     */\r\n    async joinMatch(gameName, matchID, body, init) {\r\n        assertGameName(gameName);\r\n        assertMatchID(matchID);\r\n        validateBody(body, {\r\n            playerID: ['string', 'undefined'],\r\n            playerName: 'string',\r\n        });\r\n        return this.post(`/games/${gameName}/${matchID}/join`, { body, init });\r\n    }\r\n    /**\r\n     * Leave a previously joined match.\r\n     * @param  gameName The match’s game type, e.g. 'tic-tac-toe'.\r\n     * @param  matchID  Match ID for the match to leave.\r\n     * @param  body     Options required to leave match.\r\n     * @param  init     Optional RequestInit interface to override defaults.\r\n     * @return Promise resolves if successful.\r\n     *\r\n     * @example\r\n     * lobbyClient.leaveMatch('tic-tac-toe', 'xyz', {\r\n     *   playerID: '1',\r\n     *   credentials: 'credentials-returned-when-joining',\r\n     * })\r\n     *   .then(() => console.log('Left match.'))\r\n     *   .catch(error => console.error('Error leaving match', error));\r\n     */\r\n    async leaveMatch(gameName, matchID, body, init) {\r\n        assertGameName(gameName);\r\n        assertMatchID(matchID);\r\n        validateBody(body, { playerID: 'string', credentials: 'string' });\r\n        await this.post(`/games/${gameName}/${matchID}/leave`, { body, init });\r\n    }\r\n    /**\r\n     * Update a player’s name or custom metadata.\r\n     * @param  gameName The match’s game type, e.g. 'tic-tac-toe'.\r\n     * @param  matchID  Match ID for the match to update.\r\n     * @param  body     Options required to update player.\r\n     * @param  init     Optional RequestInit interface to override defaults.\r\n     * @return Promise resolves if successful.\r\n     *\r\n     * @example\r\n     * lobbyClient.updatePlayer('tic-tac-toe', 'xyz', {\r\n     *   playerID: '0',\r\n     *   credentials: 'credentials-returned-when-joining',\r\n     *   newName: 'Al',\r\n     * })\r\n     *   .then(() => console.log('Updated player data.'))\r\n     *   .catch(error => console.error('Error updating data', error));\r\n     */\r\n    async updatePlayer(gameName, matchID, body, init) {\r\n        assertGameName(gameName);\r\n        assertMatchID(matchID);\r\n        validateBody(body, { playerID: 'string', credentials: 'string' });\r\n        await this.post(`/games/${gameName}/${matchID}/update`, { body, init });\r\n    }\r\n    /**\r\n     * Create a new match based on the configuration of the current match.\r\n     * @param  gameName The match’s game type, e.g. 'tic-tac-toe'.\r\n     * @param  matchID  Match ID for the match to play again.\r\n     * @param  body     Options required to configure match.\r\n     * @param  init     Optional RequestInit interface to override defaults.\r\n     * @return Object containing `nextMatchID`.\r\n     *\r\n     * @example\r\n     * lobbyClient.playAgain('tic-tac-toe', 'xyz', {\r\n     *   playerID: '0',\r\n     *   credentials: 'credentials-returned-when-joining',\r\n     * })\r\n     *   .then(({ nextMatchID }) => {\r\n     *     return lobbyClient.joinMatch('tic-tac-toe', nextMatchID, {\r\n     *       playerID: '0',\r\n     *       playerName: 'Al',\r\n     *     })\r\n     *   })\r\n     *   .then({ playerCredentials } => {\r\n     *     console.log(playerCredentials);\r\n     *   })\r\n     *   .catch(console.error);\r\n     */\r\n    async playAgain(gameName, matchID, body, init) {\r\n        assertGameName(gameName);\r\n        assertMatchID(matchID);\r\n        validateBody(body, { playerID: 'string', credentials: 'string' });\r\n        return this.post(`/games/${gameName}/${matchID}/playAgain`, { body, init });\r\n    }\r\n}\n\nexport { LobbyClient as L, LobbyClientError as a };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
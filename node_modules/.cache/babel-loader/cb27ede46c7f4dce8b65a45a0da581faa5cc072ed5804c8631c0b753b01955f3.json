{"ast":null,"code":"import { B as makeMove, g as gameEvent } from './turn-order-8cc4909b.js';\nimport { a as alea } from './plugin-random-087f861e.js';\nimport { C as CreateGameReducer } from './reducer-24ea3e4c.js';\nimport 'setimmediate';\n\n/*\r\n * Copyright 2018 The boardgame.io Authors\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\n/**\r\n * Base class that bots can extend.\r\n */\nclass Bot {\n  constructor(_ref) {\n    let {\n      enumerate,\n      seed\n    } = _ref;\n    this.enumerateFn = enumerate;\n    this.seed = seed;\n    this.iterationCounter = 0;\n    this._opts = {};\n  }\n  addOpt(_ref2) {\n    let {\n      key,\n      range,\n      initial\n    } = _ref2;\n    this._opts[key] = {\n      range,\n      value: initial\n    };\n  }\n  getOpt(key) {\n    return this._opts[key].value;\n  }\n  setOpt(key, value) {\n    if (key in this._opts) {\n      this._opts[key].value = value;\n    }\n  }\n  opts() {\n    return this._opts;\n  }\n  enumerate(G, ctx, playerID) {\n    const actions = this.enumerateFn(G, ctx, playerID);\n    return actions.map(a => {\n      if ('payload' in a) {\n        return a;\n      }\n      if ('move' in a) {\n        return makeMove(a.move, a.args, playerID);\n      }\n      if ('event' in a) {\n        return gameEvent(a.event, a.args, playerID);\n      }\n    });\n  }\n  random(arg) {\n    let number;\n    if (this.seed !== undefined) {\n      const seed = this.prngstate ? '' : this.seed;\n      const rand = alea(seed, this.prngstate);\n      number = rand();\n      this.prngstate = rand.state();\n    } else {\n      number = Math.random();\n    }\n    if (arg) {\n      if (Array.isArray(arg)) {\n        const id = Math.floor(number * arg.length);\n        return arg[id];\n      } else {\n        return Math.floor(number * arg);\n      }\n    }\n    return number;\n  }\n}\n\n/*\r\n * Copyright 2018 The boardgame.io Authors\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\n/**\r\n * The number of iterations to run before yielding to\r\n * the JS event loop (in async mode).\r\n */\nconst CHUNK_SIZE = 25;\n/**\r\n * Bot that uses Monte-Carlo Tree Search to find promising moves.\r\n */\nclass MCTSBot extends Bot {\n  constructor(_ref3) {\n    let {\n      enumerate,\n      seed,\n      objectives,\n      game,\n      iterations,\n      playoutDepth,\n      iterationCallback\n    } = _ref3;\n    super({\n      enumerate,\n      seed\n    });\n    if (objectives === undefined) {\n      objectives = () => ({});\n    }\n    this.objectives = objectives;\n    this.iterationCallback = iterationCallback || (() => {});\n    this.reducer = CreateGameReducer({\n      game\n    });\n    this.iterations = iterations;\n    this.playoutDepth = playoutDepth;\n    this.addOpt({\n      key: 'async',\n      initial: false\n    });\n    this.addOpt({\n      key: 'iterations',\n      initial: typeof iterations === 'number' ? iterations : 1000,\n      range: {\n        min: 1,\n        max: 2000\n      }\n    });\n    this.addOpt({\n      key: 'playoutDepth',\n      initial: typeof playoutDepth === 'number' ? playoutDepth : 50,\n      range: {\n        min: 1,\n        max: 100\n      }\n    });\n  }\n  createNode(_ref4) {\n    let {\n      state,\n      parentAction,\n      parent,\n      playerID\n    } = _ref4;\n    const {\n      G,\n      ctx\n    } = state;\n    let actions = [];\n    let objectives = [];\n    if (playerID !== undefined) {\n      actions = this.enumerate(G, ctx, playerID);\n      objectives = this.objectives(G, ctx, playerID);\n    } else if (ctx.activePlayers) {\n      for (const playerID in ctx.activePlayers) {\n        actions.push(...this.enumerate(G, ctx, playerID));\n        objectives.push(this.objectives(G, ctx, playerID));\n      }\n    } else {\n      actions = this.enumerate(G, ctx, ctx.currentPlayer);\n      objectives = this.objectives(G, ctx, ctx.currentPlayer);\n    }\n    return {\n      state,\n      parent,\n      parentAction,\n      actions,\n      objectives,\n      children: [],\n      visits: 0,\n      value: 0\n    };\n  }\n  select(node) {\n    // This node has unvisited children.\n    if (node.actions.length > 0) {\n      return node;\n    }\n    // This is a terminal node.\n    if (node.children.length === 0) {\n      return node;\n    }\n    let selectedChild = null;\n    let best = 0;\n    for (const child of node.children) {\n      const childVisits = child.visits + Number.EPSILON;\n      const uct = child.value / childVisits + Math.sqrt(2 * Math.log(node.visits) / childVisits);\n      if (selectedChild == null || uct > best) {\n        best = uct;\n        selectedChild = child;\n      }\n    }\n    return this.select(selectedChild);\n  }\n  expand(node) {\n    const actions = node.actions;\n    if (actions.length === 0 || node.state.ctx.gameover !== undefined) {\n      return node;\n    }\n    const id = this.random(actions.length);\n    const action = actions[id];\n    node.actions.splice(id, 1);\n    const childState = this.reducer(node.state, action);\n    const childNode = this.createNode({\n      state: childState,\n      parentAction: action,\n      parent: node\n    });\n    node.children.push(childNode);\n    return childNode;\n  }\n  playout(_ref5) {\n    let {\n      state\n    } = _ref5;\n    let playoutDepth = this.getOpt('playoutDepth');\n    if (typeof this.playoutDepth === 'function') {\n      playoutDepth = this.playoutDepth(state.G, state.ctx);\n    }\n    for (let i = 0; i < playoutDepth && state.ctx.gameover === undefined; i++) {\n      const {\n        G,\n        ctx\n      } = state;\n      let playerID = ctx.currentPlayer;\n      if (ctx.activePlayers) {\n        playerID = Object.keys(ctx.activePlayers)[0];\n      }\n      const moves = this.enumerate(G, ctx, playerID);\n      // Check if any objectives are met.\n      const objectives = this.objectives(G, ctx, playerID);\n      const score = Object.keys(objectives).reduce((score, key) => {\n        const objective = objectives[key];\n        if (objective.checker(G, ctx)) {\n          return score + objective.weight;\n        }\n        return score;\n      }, 0);\n      // If so, stop and return the score.\n      if (score > 0) {\n        return {\n          score\n        };\n      }\n      if (!moves || moves.length === 0) {\n        return undefined;\n      }\n      const id = this.random(moves.length);\n      const childState = this.reducer(state, moves[id]);\n      state = childState;\n    }\n    return state.ctx.gameover;\n  }\n  backpropagate(node) {\n    let result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    node.visits++;\n    if (result.score !== undefined) {\n      node.value += result.score;\n    }\n    if (result.draw === true) {\n      node.value += 0.5;\n    }\n    if (node.parentAction && result.winner === node.parentAction.payload.playerID) {\n      node.value++;\n    }\n    if (node.parent) {\n      this.backpropagate(node.parent, result);\n    }\n  }\n  play(state, playerID) {\n    const root = this.createNode({\n      state,\n      playerID\n    });\n    let numIterations = this.getOpt('iterations');\n    if (typeof this.iterations === 'function') {\n      numIterations = this.iterations(state.G, state.ctx);\n    }\n    const getResult = () => {\n      let selectedChild = null;\n      for (const child of root.children) {\n        if (selectedChild == null || child.visits > selectedChild.visits) {\n          selectedChild = child;\n        }\n      }\n      const action = selectedChild && selectedChild.parentAction;\n      const metadata = root;\n      return {\n        action,\n        metadata\n      };\n    };\n    return new Promise(resolve => {\n      const iteration = () => {\n        for (let i = 0; i < CHUNK_SIZE && this.iterationCounter < numIterations; i++) {\n          const leaf = this.select(root);\n          const child = this.expand(leaf);\n          const result = this.playout(child);\n          this.backpropagate(child, result);\n          this.iterationCounter++;\n        }\n        this.iterationCallback({\n          iterationCounter: this.iterationCounter,\n          numIterations,\n          metadata: root\n        });\n      };\n      this.iterationCounter = 0;\n      if (this.getOpt('async')) {\n        const asyncIteration = () => {\n          if (this.iterationCounter < numIterations) {\n            iteration();\n            setImmediate(asyncIteration);\n          } else {\n            resolve(getResult());\n          }\n        };\n        asyncIteration();\n      } else {\n        while (this.iterationCounter < numIterations) {\n          iteration();\n        }\n        resolve(getResult());\n      }\n    });\n  }\n}\n\n/*\r\n * Copyright 2018 The boardgame.io Authors\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\n/**\r\n * Bot that picks a move at random.\r\n */\nclass RandomBot extends Bot {\n  play(_ref6, playerID) {\n    let {\n      G,\n      ctx\n    } = _ref6;\n    const moves = this.enumerate(G, ctx, playerID);\n    return Promise.resolve({\n      action: this.random(moves)\n    });\n  }\n}\n\n/*\r\n * Copyright 2018 The boardgame.io Authors\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\n/**\r\n * Make a single move on the client with a bot.\r\n *\r\n * @param {...object} client - The game client.\r\n * @param {...object} bot - The bot.\r\n */\nasync function Step(client, bot) {\n  const state = client.store.getState();\n  let playerID = state.ctx.currentPlayer;\n  if (state.ctx.activePlayers) {\n    playerID = Object.keys(state.ctx.activePlayers)[0];\n  }\n  const {\n    action,\n    metadata\n  } = await bot.play(state, playerID);\n  if (action) {\n    const a = {\n      ...action,\n      payload: {\n        ...action.payload,\n        metadata\n      }\n    };\n    client.store.dispatch(a);\n    return a;\n  }\n}\n/**\r\n * Simulates the game till the end or a max depth.\r\n *\r\n * @param {...object} game - The game object.\r\n * @param {...object} bots - An array of bots.\r\n * @param {...object} state - The game state to start from.\r\n */\nasync function Simulate(_ref7) {\n  let {\n    game,\n    bots,\n    state,\n    depth\n  } = _ref7;\n  if (depth === undefined) depth = 10000;\n  const reducer = CreateGameReducer({\n    game\n  });\n  let metadata = null;\n  let iter = 0;\n  while (state.ctx.gameover === undefined && iter < depth) {\n    let playerID = state.ctx.currentPlayer;\n    if (state.ctx.activePlayers) {\n      playerID = Object.keys(state.ctx.activePlayers)[0];\n    }\n    const bot = bots instanceof Bot ? bots : bots[playerID];\n    const t = await bot.play(state, playerID);\n    if (!t.action) {\n      break;\n    }\n    metadata = t.metadata;\n    state = reducer(state, t.action);\n    iter++;\n  }\n  return {\n    state,\n    metadata\n  };\n}\nexport { Bot as B, MCTSBot as M, RandomBot as R, Step as S, Simulate as a };","map":{"version":3,"names":["B","makeMove","g","gameEvent","a","alea","C","CreateGameReducer","Bot","constructor","_ref","enumerate","seed","enumerateFn","iterationCounter","_opts","addOpt","_ref2","key","range","initial","value","getOpt","setOpt","opts","G","ctx","playerID","actions","map","move","args","event","random","arg","number","undefined","prngstate","rand","state","Math","Array","isArray","id","floor","length","CHUNK_SIZE","MCTSBot","_ref3","objectives","game","iterations","playoutDepth","iterationCallback","reducer","min","max","createNode","_ref4","parentAction","parent","activePlayers","push","currentPlayer","children","visits","select","node","selectedChild","best","child","childVisits","Number","EPSILON","uct","sqrt","log","expand","gameover","action","splice","childState","childNode","playout","_ref5","i","Object","keys","moves","score","reduce","objective","checker","weight","backpropagate","result","arguments","draw","winner","payload","play","root","numIterations","getResult","metadata","Promise","resolve","iteration","leaf","asyncIteration","setImmediate","RandomBot","_ref6","Step","client","bot","store","getState","dispatch","Simulate","_ref7","bots","depth","iter","t","M","R","S"],"sources":["/Users/aaron/Desktop/School/488_CMPSC/GUI-based-Web-Game-with-Cloud-Native-Infrastructure-Backend 3-21 copy 2/upwardmobility/node_modules/boardgame.io/dist/esm/ai-7998b00f.js"],"sourcesContent":["import { B as makeMove, g as gameEvent } from './turn-order-8cc4909b.js';\nimport { a as alea } from './plugin-random-087f861e.js';\nimport { C as CreateGameReducer } from './reducer-24ea3e4c.js';\nimport 'setimmediate';\n\n/*\r\n * Copyright 2018 The boardgame.io Authors\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\r\n/**\r\n * Base class that bots can extend.\r\n */\r\nclass Bot {\r\n    constructor({ enumerate, seed, }) {\r\n        this.enumerateFn = enumerate;\r\n        this.seed = seed;\r\n        this.iterationCounter = 0;\r\n        this._opts = {};\r\n    }\r\n    addOpt({ key, range, initial, }) {\r\n        this._opts[key] = {\r\n            range,\r\n            value: initial,\r\n        };\r\n    }\r\n    getOpt(key) {\r\n        return this._opts[key].value;\r\n    }\r\n    setOpt(key, value) {\r\n        if (key in this._opts) {\r\n            this._opts[key].value = value;\r\n        }\r\n    }\r\n    opts() {\r\n        return this._opts;\r\n    }\r\n    enumerate(G, ctx, playerID) {\r\n        const actions = this.enumerateFn(G, ctx, playerID);\r\n        return actions.map((a) => {\r\n            if ('payload' in a) {\r\n                return a;\r\n            }\r\n            if ('move' in a) {\r\n                return makeMove(a.move, a.args, playerID);\r\n            }\r\n            if ('event' in a) {\r\n                return gameEvent(a.event, a.args, playerID);\r\n            }\r\n        });\r\n    }\r\n    random(arg) {\r\n        let number;\r\n        if (this.seed !== undefined) {\r\n            const seed = this.prngstate ? '' : this.seed;\r\n            const rand = alea(seed, this.prngstate);\r\n            number = rand();\r\n            this.prngstate = rand.state();\r\n        }\r\n        else {\r\n            number = Math.random();\r\n        }\r\n        if (arg) {\r\n            if (Array.isArray(arg)) {\r\n                const id = Math.floor(number * arg.length);\r\n                return arg[id];\r\n            }\r\n            else {\r\n                return Math.floor(number * arg);\r\n            }\r\n        }\r\n        return number;\r\n    }\r\n}\n\n/*\r\n * Copyright 2018 The boardgame.io Authors\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\r\n/**\r\n * The number of iterations to run before yielding to\r\n * the JS event loop (in async mode).\r\n */\r\nconst CHUNK_SIZE = 25;\r\n/**\r\n * Bot that uses Monte-Carlo Tree Search to find promising moves.\r\n */\r\nclass MCTSBot extends Bot {\r\n    constructor({ enumerate, seed, objectives, game, iterations, playoutDepth, iterationCallback, }) {\r\n        super({ enumerate, seed });\r\n        if (objectives === undefined) {\r\n            objectives = () => ({});\r\n        }\r\n        this.objectives = objectives;\r\n        this.iterationCallback = iterationCallback || (() => { });\r\n        this.reducer = CreateGameReducer({ game });\r\n        this.iterations = iterations;\r\n        this.playoutDepth = playoutDepth;\r\n        this.addOpt({\r\n            key: 'async',\r\n            initial: false,\r\n        });\r\n        this.addOpt({\r\n            key: 'iterations',\r\n            initial: typeof iterations === 'number' ? iterations : 1000,\r\n            range: { min: 1, max: 2000 },\r\n        });\r\n        this.addOpt({\r\n            key: 'playoutDepth',\r\n            initial: typeof playoutDepth === 'number' ? playoutDepth : 50,\r\n            range: { min: 1, max: 100 },\r\n        });\r\n    }\r\n    createNode({ state, parentAction, parent, playerID, }) {\r\n        const { G, ctx } = state;\r\n        let actions = [];\r\n        let objectives = [];\r\n        if (playerID !== undefined) {\r\n            actions = this.enumerate(G, ctx, playerID);\r\n            objectives = this.objectives(G, ctx, playerID);\r\n        }\r\n        else if (ctx.activePlayers) {\r\n            for (const playerID in ctx.activePlayers) {\r\n                actions.push(...this.enumerate(G, ctx, playerID));\r\n                objectives.push(this.objectives(G, ctx, playerID));\r\n            }\r\n        }\r\n        else {\r\n            actions = this.enumerate(G, ctx, ctx.currentPlayer);\r\n            objectives = this.objectives(G, ctx, ctx.currentPlayer);\r\n        }\r\n        return {\r\n            state,\r\n            parent,\r\n            parentAction,\r\n            actions,\r\n            objectives,\r\n            children: [],\r\n            visits: 0,\r\n            value: 0,\r\n        };\r\n    }\r\n    select(node) {\r\n        // This node has unvisited children.\r\n        if (node.actions.length > 0) {\r\n            return node;\r\n        }\r\n        // This is a terminal node.\r\n        if (node.children.length === 0) {\r\n            return node;\r\n        }\r\n        let selectedChild = null;\r\n        let best = 0;\r\n        for (const child of node.children) {\r\n            const childVisits = child.visits + Number.EPSILON;\r\n            const uct = child.value / childVisits +\r\n                Math.sqrt((2 * Math.log(node.visits)) / childVisits);\r\n            if (selectedChild == null || uct > best) {\r\n                best = uct;\r\n                selectedChild = child;\r\n            }\r\n        }\r\n        return this.select(selectedChild);\r\n    }\r\n    expand(node) {\r\n        const actions = node.actions;\r\n        if (actions.length === 0 || node.state.ctx.gameover !== undefined) {\r\n            return node;\r\n        }\r\n        const id = this.random(actions.length);\r\n        const action = actions[id];\r\n        node.actions.splice(id, 1);\r\n        const childState = this.reducer(node.state, action);\r\n        const childNode = this.createNode({\r\n            state: childState,\r\n            parentAction: action,\r\n            parent: node,\r\n        });\r\n        node.children.push(childNode);\r\n        return childNode;\r\n    }\r\n    playout({ state }) {\r\n        let playoutDepth = this.getOpt('playoutDepth');\r\n        if (typeof this.playoutDepth === 'function') {\r\n            playoutDepth = this.playoutDepth(state.G, state.ctx);\r\n        }\r\n        for (let i = 0; i < playoutDepth && state.ctx.gameover === undefined; i++) {\r\n            const { G, ctx } = state;\r\n            let playerID = ctx.currentPlayer;\r\n            if (ctx.activePlayers) {\r\n                playerID = Object.keys(ctx.activePlayers)[0];\r\n            }\r\n            const moves = this.enumerate(G, ctx, playerID);\r\n            // Check if any objectives are met.\r\n            const objectives = this.objectives(G, ctx, playerID);\r\n            const score = Object.keys(objectives).reduce((score, key) => {\r\n                const objective = objectives[key];\r\n                if (objective.checker(G, ctx)) {\r\n                    return score + objective.weight;\r\n                }\r\n                return score;\r\n            }, 0);\r\n            // If so, stop and return the score.\r\n            if (score > 0) {\r\n                return { score };\r\n            }\r\n            if (!moves || moves.length === 0) {\r\n                return undefined;\r\n            }\r\n            const id = this.random(moves.length);\r\n            const childState = this.reducer(state, moves[id]);\r\n            state = childState;\r\n        }\r\n        return state.ctx.gameover;\r\n    }\r\n    backpropagate(node, result = {}) {\r\n        node.visits++;\r\n        if (result.score !== undefined) {\r\n            node.value += result.score;\r\n        }\r\n        if (result.draw === true) {\r\n            node.value += 0.5;\r\n        }\r\n        if (node.parentAction &&\r\n            result.winner === node.parentAction.payload.playerID) {\r\n            node.value++;\r\n        }\r\n        if (node.parent) {\r\n            this.backpropagate(node.parent, result);\r\n        }\r\n    }\r\n    play(state, playerID) {\r\n        const root = this.createNode({ state, playerID });\r\n        let numIterations = this.getOpt('iterations');\r\n        if (typeof this.iterations === 'function') {\r\n            numIterations = this.iterations(state.G, state.ctx);\r\n        }\r\n        const getResult = () => {\r\n            let selectedChild = null;\r\n            for (const child of root.children) {\r\n                if (selectedChild == null || child.visits > selectedChild.visits) {\r\n                    selectedChild = child;\r\n                }\r\n            }\r\n            const action = selectedChild && selectedChild.parentAction;\r\n            const metadata = root;\r\n            return { action, metadata };\r\n        };\r\n        return new Promise((resolve) => {\r\n            const iteration = () => {\r\n                for (let i = 0; i < CHUNK_SIZE && this.iterationCounter < numIterations; i++) {\r\n                    const leaf = this.select(root);\r\n                    const child = this.expand(leaf);\r\n                    const result = this.playout(child);\r\n                    this.backpropagate(child, result);\r\n                    this.iterationCounter++;\r\n                }\r\n                this.iterationCallback({\r\n                    iterationCounter: this.iterationCounter,\r\n                    numIterations,\r\n                    metadata: root,\r\n                });\r\n            };\r\n            this.iterationCounter = 0;\r\n            if (this.getOpt('async')) {\r\n                const asyncIteration = () => {\r\n                    if (this.iterationCounter < numIterations) {\r\n                        iteration();\r\n                        setImmediate(asyncIteration);\r\n                    }\r\n                    else {\r\n                        resolve(getResult());\r\n                    }\r\n                };\r\n                asyncIteration();\r\n            }\r\n            else {\r\n                while (this.iterationCounter < numIterations) {\r\n                    iteration();\r\n                }\r\n                resolve(getResult());\r\n            }\r\n        });\r\n    }\r\n}\n\n/*\r\n * Copyright 2018 The boardgame.io Authors\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\r\n/**\r\n * Bot that picks a move at random.\r\n */\r\nclass RandomBot extends Bot {\r\n    play({ G, ctx }, playerID) {\r\n        const moves = this.enumerate(G, ctx, playerID);\r\n        return Promise.resolve({ action: this.random(moves) });\r\n    }\r\n}\n\n/*\r\n * Copyright 2018 The boardgame.io Authors\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\r\n/**\r\n * Make a single move on the client with a bot.\r\n *\r\n * @param {...object} client - The game client.\r\n * @param {...object} bot - The bot.\r\n */\r\nasync function Step(client, bot) {\r\n    const state = client.store.getState();\r\n    let playerID = state.ctx.currentPlayer;\r\n    if (state.ctx.activePlayers) {\r\n        playerID = Object.keys(state.ctx.activePlayers)[0];\r\n    }\r\n    const { action, metadata } = await bot.play(state, playerID);\r\n    if (action) {\r\n        const a = {\r\n            ...action,\r\n            payload: {\r\n                ...action.payload,\r\n                metadata,\r\n            },\r\n        };\r\n        client.store.dispatch(a);\r\n        return a;\r\n    }\r\n}\r\n/**\r\n * Simulates the game till the end or a max depth.\r\n *\r\n * @param {...object} game - The game object.\r\n * @param {...object} bots - An array of bots.\r\n * @param {...object} state - The game state to start from.\r\n */\r\nasync function Simulate({ game, bots, state, depth, }) {\r\n    if (depth === undefined)\r\n        depth = 10000;\r\n    const reducer = CreateGameReducer({ game });\r\n    let metadata = null;\r\n    let iter = 0;\r\n    while (state.ctx.gameover === undefined && iter < depth) {\r\n        let playerID = state.ctx.currentPlayer;\r\n        if (state.ctx.activePlayers) {\r\n            playerID = Object.keys(state.ctx.activePlayers)[0];\r\n        }\r\n        const bot = bots instanceof Bot ? bots : bots[playerID];\r\n        const t = await bot.play(state, playerID);\r\n        if (!t.action) {\r\n            break;\r\n        }\r\n        metadata = t.metadata;\r\n        state = reducer(state, t.action);\r\n        iter++;\r\n    }\r\n    return { state, metadata };\r\n}\n\nexport { Bot as B, MCTSBot as M, RandomBot as R, Step as S, Simulate as a };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
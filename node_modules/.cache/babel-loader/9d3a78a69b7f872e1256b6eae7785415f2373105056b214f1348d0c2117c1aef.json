{"ast":null,"code":"import { x as PlayerView } from './turn-order-8cc4909b.js';\nimport { createPatch } from 'rfc6902';\nconst applyPlayerView = (game, playerID, state) => ({\n  ...state,\n  G: game.playerView({\n    G: state.G,\n    ctx: state.ctx,\n    playerID\n  }),\n  plugins: PlayerView(state, {\n    playerID,\n    game\n  }),\n  deltalog: undefined,\n  _undo: [],\n  _redo: []\n});\n/** Gets a function that filters the TransportData for a given player and game. */\nconst getFilterPlayerView = game => (playerID, payload) => {\n  switch (payload.type) {\n    case 'patch':\n      {\n        const [matchID, stateID, prevState, state] = payload.args;\n        const log = redactLog(state.deltalog, playerID);\n        const filteredState = applyPlayerView(game, playerID, state);\n        const newStateID = state._stateID;\n        const prevFilteredState = applyPlayerView(game, playerID, prevState);\n        const patch = createPatch(prevFilteredState, filteredState);\n        return {\n          type: 'patch',\n          args: [matchID, stateID, newStateID, patch, log]\n        };\n      }\n    case 'update':\n      {\n        const [matchID, state] = payload.args;\n        const log = redactLog(state.deltalog, playerID);\n        const filteredState = applyPlayerView(game, playerID, state);\n        return {\n          type: 'update',\n          args: [matchID, filteredState, log]\n        };\n      }\n    case 'sync':\n      {\n        const [matchID, syncInfo] = payload.args;\n        const filteredState = applyPlayerView(game, playerID, syncInfo.state);\n        const log = redactLog(syncInfo.log, playerID);\n        const newSyncInfo = {\n          ...syncInfo,\n          state: filteredState,\n          log\n        };\n        return {\n          type: 'sync',\n          args: [matchID, newSyncInfo]\n        };\n      }\n    default:\n      {\n        return payload;\n      }\n  }\n};\n/**\r\n * Redact the log.\r\n *\r\n * @param {Array} log - The game log (or deltalog).\r\n * @param {String} playerID - The playerID that this log is\r\n *                            to be sent to.\r\n */\nfunction redactLog(log, playerID) {\n  if (log === undefined) {\n    return log;\n  }\n  return log.map(logEvent => {\n    // filter for all other players and spectators.\n    if (playerID !== null && +playerID === +logEvent.action.payload.playerID) {\n      return logEvent;\n    }\n    if (logEvent.redact !== true) {\n      return logEvent;\n    }\n    const payload = {\n      ...logEvent.action.payload,\n      args: null\n    };\n    const filteredEvent = {\n      ...logEvent,\n      action: {\n        ...logEvent.action,\n        payload\n      }\n    };\n    const {\n      redact,\n      ...remaining\n    } = filteredEvent;\n    return remaining;\n  });\n}\nexport { getFilterPlayerView as g };","map":{"version":3,"names":["x","PlayerView","createPatch","applyPlayerView","game","playerID","state","G","playerView","ctx","plugins","deltalog","undefined","_undo","_redo","getFilterPlayerView","payload","type","matchID","stateID","prevState","args","log","redactLog","filteredState","newStateID","_stateID","prevFilteredState","patch","syncInfo","newSyncInfo","map","logEvent","action","redact","filteredEvent","remaining","g"],"sources":["/Users/aaron/Desktop/School/488_CMPSC/GUI-based-Web-Game-with-Cloud-Native-Infrastructure-Backend 3-21 copy/upwardmobility/node_modules/boardgame.io/dist/esm/filter-player-view-43ed49b0.js"],"sourcesContent":["import { x as PlayerView } from './turn-order-8cc4909b.js';\nimport { createPatch } from 'rfc6902';\n\nconst applyPlayerView = (game, playerID, state) => ({\r\n    ...state,\r\n    G: game.playerView({ G: state.G, ctx: state.ctx, playerID }),\r\n    plugins: PlayerView(state, { playerID, game }),\r\n    deltalog: undefined,\r\n    _undo: [],\r\n    _redo: [],\r\n});\r\n/** Gets a function that filters the TransportData for a given player and game. */\r\nconst getFilterPlayerView = (game) => (playerID, payload) => {\r\n    switch (payload.type) {\r\n        case 'patch': {\r\n            const [matchID, stateID, prevState, state] = payload.args;\r\n            const log = redactLog(state.deltalog, playerID);\r\n            const filteredState = applyPlayerView(game, playerID, state);\r\n            const newStateID = state._stateID;\r\n            const prevFilteredState = applyPlayerView(game, playerID, prevState);\r\n            const patch = createPatch(prevFilteredState, filteredState);\r\n            return {\r\n                type: 'patch',\r\n                args: [matchID, stateID, newStateID, patch, log],\r\n            };\r\n        }\r\n        case 'update': {\r\n            const [matchID, state] = payload.args;\r\n            const log = redactLog(state.deltalog, playerID);\r\n            const filteredState = applyPlayerView(game, playerID, state);\r\n            return {\r\n                type: 'update',\r\n                args: [matchID, filteredState, log],\r\n            };\r\n        }\r\n        case 'sync': {\r\n            const [matchID, syncInfo] = payload.args;\r\n            const filteredState = applyPlayerView(game, playerID, syncInfo.state);\r\n            const log = redactLog(syncInfo.log, playerID);\r\n            const newSyncInfo = {\r\n                ...syncInfo,\r\n                state: filteredState,\r\n                log,\r\n            };\r\n            return {\r\n                type: 'sync',\r\n                args: [matchID, newSyncInfo],\r\n            };\r\n        }\r\n        default: {\r\n            return payload;\r\n        }\r\n    }\r\n};\r\n/**\r\n * Redact the log.\r\n *\r\n * @param {Array} log - The game log (or deltalog).\r\n * @param {String} playerID - The playerID that this log is\r\n *                            to be sent to.\r\n */\r\nfunction redactLog(log, playerID) {\r\n    if (log === undefined) {\r\n        return log;\r\n    }\r\n    return log.map((logEvent) => {\r\n        // filter for all other players and spectators.\r\n        if (playerID !== null && +playerID === +logEvent.action.payload.playerID) {\r\n            return logEvent;\r\n        }\r\n        if (logEvent.redact !== true) {\r\n            return logEvent;\r\n        }\r\n        const payload = {\r\n            ...logEvent.action.payload,\r\n            args: null,\r\n        };\r\n        const filteredEvent = {\r\n            ...logEvent,\r\n            action: { ...logEvent.action, payload },\r\n        };\r\n        const { redact, ...remaining } = filteredEvent;\r\n        return remaining;\r\n    });\r\n}\n\nexport { getFilterPlayerView as g };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
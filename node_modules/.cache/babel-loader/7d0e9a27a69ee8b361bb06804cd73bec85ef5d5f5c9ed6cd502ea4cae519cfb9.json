{"ast":null,"code":"import { TurnOrder, Client, Server, Game } from \"boardgame.io/core\";\nimport react from 'react';\nimport { UpwardMobilityBoard } from \"./Board\";\nimport { eventsArray, itemsArray, buffsArray } from \"./eventsfile\";\nexport const UpwardsMobility = {\n  // Turn phase flow\n  // 1) Roll dice move piece\n  // 2) Choose event or use item\n  // 3a) If event, show event, if answer question correctly something good happens otherwise something bad happens\n  // if correct answer than they pick up item and or gain currency then end turn\n  // if incorrect answer than negativeness happens then end turn\n  // 3b) If they choose the item, activate the item and do item thing and then show event\n\n  // rollScreen\n  // eventOrItemScreen\n  // itemScreen\n  // eventScreen\n  // correctAnswerScreen\n  // wrongAnswerScreen\n  // endTurnScreen\n\n  setup: () => ({\n    players: {\n      0: {\n        position: 0,\n        inventory: [],\n        buffs: [],\n        currency: 0\n      },\n      1: {\n        position: 0,\n        inventory: [],\n        buffs: [],\n        currency: 0\n      },\n      moveDist: 0\n    },\n    currentEvent: null,\n    board: {\n      0: {\n        currency: 0\n      },\n      1: {\n        currency: 2\n      },\n      2: {\n        currency: 2\n      },\n      3: {\n        currency: -1\n      },\n      4: {\n        currency: 3\n      },\n      5: {\n        currency: 5\n      },\n      6: {\n        currency: 1\n      },\n      7: {\n        currency: 0\n      },\n      8: {\n        currency: 0\n      },\n      9: {\n        currency: -2\n      },\n      10: {\n        currency: 0\n      },\n      11: {\n        currency: 0\n      },\n      12: {\n        currency: 2\n      },\n      13: {\n        currency: 2\n      },\n      14: {\n        currency: -1\n      },\n      15: {\n        currency: 3\n      },\n      16: {\n        currency: -2\n      },\n      17: {\n        currency: 1\n      },\n      18: {\n        currency: 2\n      },\n      19: {\n        currency: 0\n      },\n      20: {\n        currency: -2\n      },\n      21: {\n        currency: 2\n      },\n      22: {\n        currency: -2\n      },\n      23: {\n        currency: -2\n      },\n      24: {\n        currency: 0\n      },\n      25: {\n        currency: 0\n      }\n    }\n  }),\n  turn: {\n    order: TurnOrder.CONTINUE\n  },\n  // Define the moves for rolling the dice and updating the game state.\n  moves: {\n    rollDice: _ref => {\n      let {\n        G,\n        ctx,\n        events\n      } = _ref;\n      const die1 = Math.floor(Math.random() * 6) + 1;\n      const die2 = Math.floor(Math.random() * 6) + 1;\n      let moveDist = die1 + die2;\n      G.moveDist = moveDist;\n      G.players[ctx.currentPlayer].position += moveDist;\n\n      // Check for players active buffs\n      // G.players[ctx.currentPlayer].buffs.forEach((buff) => {\n      //     if (buff.type === \"moMoneyBuff\") {\n      //         moveDist += 1;\n      //         buff.duration--;\n      //         if (buff.duration === 0) {\n      //             G.players[ctx.currentPlayer].buffs.splice(\n      //                 G.players[ctx.currentPlayer].buffs.indexOf(buff),\n      //                 1\n      //             );\n      //         }\n      //     }\n      // });\n\n      G.players[ctx.currentPlayer].buffs.forEach((buff, index) => {\n        switch (buff.name) {\n          case \"Buff of Mo Money\":\n            G.players[ctx.currentPlayer].currency += 2;\n            buff.duration--;\n            if (buff.duration === 0) {\n              G.players[ctx.currentPlayer].buffs.splice(index, 1);\n            }\n            break;\n        }\n      });\n      G.currentEvent = eventsArray[Math.floor(Math.random() * eventsArray.length)];\n      console.log(\"current event reward type: \", G.currentEvent.eventReward.type);\n      if (G.currentEvent.eventReward.type === \"item\") {\n        G.players[ctx.currentPlayer].inventory.push(G.currentEvent.eventReward.item.name);\n      }\n      if (G.currentEvent.eventReward.type === \"buff\") {\n        G.players[ctx.currentPlayer].buffs.push(G.currentEvent.eventReward.buff);\n      }\n      events.setPhase(\"eventOrItemScreen\");\n    },\n    addCurrency: (_ref2, currency) => {\n      let {\n        G,\n        ctx,\n        events\n      } = _ref2;\n      G.players[ctx.currentPlayer].currency += currency;\n    },\n    loseCurrency: (_ref3, currency) => {\n      let {\n        G,\n        ctx,\n        events\n      } = _ref3;\n      G.players[ctx.currentPlayer].currency -= currency;\n    },\n    moveForward: (_ref4, moveDist) => {\n      let {\n        G,\n        ctx,\n        events\n      } = _ref4;\n      G.players[ctx.currentPlayer].position += moveDist;\n    },\n    moveBackward: (_ref5, moveDist) => {\n      let {\n        G,\n        ctx,\n        events\n      } = _ref5;\n      G.players[ctx.currentPlayer].position -= moveDist;\n    },\n    // pickUpItem: ({G, ctx, events}, id) => {\n    //     // const itemCell = G.board[G.players[ctx.currentPlayer].position];\n    //     // const itemRef = itemCell.item;\n    //\n    //     G.players[ctx.currentPlayer].inventory.push(itemsArray[id]);\n    //\n    // },\n\n    // use item function\n\n    useItem: (_ref6, item) => {\n      let {\n        G,\n        ctx,\n        events\n      } = _ref6;\n      console.log(\"use item function\");\n      switch (item) {\n        case \"Staff of MoMoney\":\n          G.players[ctx.currentPlayer].currency += Math.random() * 5;\n          break;\n      }\n      const itemIndex = G.players[ctx.currentPlayer].inventory.indexOf(item);\n      G.players[ctx.currentPlayer].inventory.splice(itemIndex, 1);\n    },\n    // apply buff function\n\n    applyBuff: (_ref7, playerId, buffType, duration) => {\n      let {\n        G,\n        ctx\n      } = _ref7;\n      G.players[ctx.currentPlayer].buffs.push({\n        type: buffType,\n        duration: duration\n      });\n    }\n  },\n  phases: {\n    rollScreen: {\n      start: true\n    },\n    eventOrItemScreen: {},\n    useItemScreen: {},\n    eventScreen: {},\n    correctAnswerScreen: {},\n    wrongAnswerScreen: {},\n    endTurnScreen: {},\n    pickUpItemScreen: {}\n  }\n};","map":{"version":3,"names":["TurnOrder","Client","Server","Game","react","UpwardMobilityBoard","eventsArray","itemsArray","buffsArray","UpwardsMobility","setup","players","position","inventory","buffs","currency","moveDist","currentEvent","board","turn","order","CONTINUE","moves","rollDice","_ref","G","ctx","events","die1","Math","floor","random","die2","currentPlayer","forEach","buff","index","name","duration","splice","length","console","log","eventReward","type","push","item","setPhase","addCurrency","_ref2","loseCurrency","_ref3","moveForward","_ref4","moveBackward","_ref5","useItem","_ref6","itemIndex","indexOf","applyBuff","_ref7","playerId","buffType","phases","rollScreen","start","eventOrItemScreen","useItemScreen","eventScreen","correctAnswerScreen","wrongAnswerScreen","endTurnScreen","pickUpItemScreen"],"sources":["/Users/aaron/Desktop/School/Upwardsmobility_Game/src/Game.js"],"sourcesContent":["import { TurnOrder, Client, Server, Game } from \"boardgame.io/core\";\nimport react from 'react';\nimport { UpwardMobilityBoard } from \"./Board\";\nimport {eventsArray, itemsArray, buffsArray} from \"./eventsfile\";\nexport const UpwardsMobility = {\n\n    // Turn phase flow\n    // 1) Roll dice move piece\n    // 2) Choose event or use item\n    // 3a) If event, show event, if answer question correctly something good happens otherwise something bad happens\n    // if correct answer than they pick up item and or gain currency then end turn\n    // if incorrect answer than negativeness happens then end turn\n    // 3b) If they choose the item, activate the item and do item thing and then show event\n\n    // rollScreen\n    // eventOrItemScreen\n    // itemScreen\n    // eventScreen\n    // correctAnswerScreen\n    // wrongAnswerScreen\n    // endTurnScreen\n\n  setup: () => ({\n    players: {\n      0: {\n        position: 0,\n        inventory: [],\n          buffs: [],\n          currency: 0,\n      },\n      1: {\n        position: 0,\n        inventory: [],\n          buffs: [],\n          currency: 0,\n      },\n        moveDist: 0,\n    },\n\n      currentEvent: null,\n\n      board: {\n          0: { currency: 0 },\n          1: { currency: 2 },\n          2: { currency: 2 },\n          3: { currency: -1 },\n          4: { currency: 3 },\n          5: { currency: 5, },\n          6: { currency: 1 },\n          7: { currency: 0 },\n          8: { currency: 0 },\n          9: { currency: -2 },\n          10: { currency: 0 },\n          11: { currency: 0 },\n          12: { currency: 2 },\n          13: { currency: 2 },\n          14: { currency: -1 },\n          15: { currency: 3 },\n          16: { currency: -2 },\n          17: { currency: 1 },\n          18: { currency: 2 },\n          19: { currency: 0 },\n          20: { currency: -2 },\n          21: { currency: 2 },\n          22: { currency: -2 },\n          23: { currency: -2 },\n          24: { currency: 0 },\n          25: { currency: 0 },\n      },\n\n\n  }),\n    turn: {\n        order: TurnOrder.CONTINUE,\n    },\n\n    // Define the moves for rolling the dice and updating the game state.\n    moves: {\n      rollDice: ({G, ctx, events}) => {\n          const die1 = Math.floor(Math.random() * 6) + 1;\n          const die2 = Math.floor(Math.random() * 6) + 1;\n          let moveDist = die1 + die2;\n          G.moveDist = moveDist;\n          G.players[ctx.currentPlayer].position += moveDist;\n\n          // Check for players active buffs\n          // G.players[ctx.currentPlayer].buffs.forEach((buff) => {\n          //     if (buff.type === \"moMoneyBuff\") {\n          //         moveDist += 1;\n          //         buff.duration--;\n          //         if (buff.duration === 0) {\n          //             G.players[ctx.currentPlayer].buffs.splice(\n          //                 G.players[ctx.currentPlayer].buffs.indexOf(buff),\n          //                 1\n          //             );\n          //         }\n          //     }\n          // });\n\n          G.players[ctx.currentPlayer].buffs.forEach((buff, index) => {\n              switch (buff.name) {\n                  case \"Buff of Mo Money\":\n                      G.players[ctx.currentPlayer].currency += 2;\n                      buff.duration--;\n\n                      if (buff.duration === 0) {\n                          G.players[ctx.currentPlayer].buffs.splice(index, 1);\n                      }\n                      break;\n              }\n          });\n\n          G.currentEvent = eventsArray[Math.floor(Math.random() * eventsArray.length)];\n\n          console.log(\"current event reward type: \", G.currentEvent.eventReward.type)\n\n          if (G.currentEvent.eventReward.type === \"item\") {\n              G.players[ctx.currentPlayer].inventory.push(G.currentEvent.eventReward.item.name);\n          }\n          if (G.currentEvent.eventReward.type === \"buff\") {\n              G.players[ctx.currentPlayer].buffs.push(G.currentEvent.eventReward.buff);\n          }\n\n          events.setPhase(\"eventOrItemScreen\");\n      },\n\n        addCurrency: ({G, ctx, events}, currency) => {\n            G.players[ctx.currentPlayer].currency += currency;\n        },\n\n        loseCurrency: ({G, ctx, events}, currency) => {\n            G.players[ctx.currentPlayer].currency -= currency;\n        },\n\n        moveForward: ({G, ctx, events}, moveDist) => {\n            G.players[ctx.currentPlayer].position += moveDist;\n        },\n\n        moveBackward: ({G, ctx, events}, moveDist) => {\n            G.players[ctx.currentPlayer].position -= moveDist;\n        },\n\n        // pickUpItem: ({G, ctx, events}, id) => {\n        //     // const itemCell = G.board[G.players[ctx.currentPlayer].position];\n        //     // const itemRef = itemCell.item;\n        //\n        //     G.players[ctx.currentPlayer].inventory.push(itemsArray[id]);\n        //\n        // },\n\n        // use item function\n\n        useItem: ({G, ctx, events}, item) => {\n\n          console.log(\"use item function\");\n\n          switch (item) {\n                case \"Staff of MoMoney\":\n                    G.players[ctx.currentPlayer].currency += Math.random() * 5;\n                    break;\n          }\n\n          const itemIndex = G.players[ctx.currentPlayer].inventory.indexOf(item);\n          G.players[ctx.currentPlayer].inventory.splice(itemIndex, 1);\n\n        },\n\n        // apply buff function\n\n        applyBuff: ({ G, ctx }, playerId, buffType, duration) => {\n            G.players[ctx.currentPlayer].buffs.push({ type: buffType, duration: duration });\n        },\n\n    },\n    phases: {\n        rollScreen: {\n            start: true\n        },\n        eventOrItemScreen: {\n\n        },\n        useItemScreen: {\n\n        },\n        eventScreen: {\n\n        },\n        correctAnswerScreen: {\n\n        },\n        wrongAnswerScreen: {\n\n        },\n        endTurnScreen: {\n\n        },\n        pickUpItemScreen: {\n\n        }\n    },\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
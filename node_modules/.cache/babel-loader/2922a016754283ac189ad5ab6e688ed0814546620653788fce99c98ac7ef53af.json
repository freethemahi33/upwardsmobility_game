{"ast":null,"code":"import { TurnOrder, Client, Server, Game } from \"boardgame.io/core\";\n// import { getEvent} from \"./eventsfile\";\nimport react from 'react';\nimport { UpwardMobilityBoard } from \"./Board\";\nexport const UpwardsMobility = {\n  // Turn phase flow\n  // 1) Roll dice move piece\n  // 2) Choose event or use item\n  // 3a) If event, show event, if answer question correctly something good happens otherwise something bad happens\n  // if correct answer than they pick up item and or gain currency then end turn\n  // if incorrect answer than negativeness happens then end turn\n  // 3b) If they choose the item, activate the item and do item thing and then show event\n\n  // rollScreen\n  // eventOrItemScreen\n  // itemScreen\n  // eventScreen\n  // correctAnswerScreen\n  // wrongAnswerScreen\n  // endTurnScreen\n\n  setup: () => ({\n    players: {\n      0: {\n        position: 0,\n        inventory: ['Staff of MoMoney', 'Staff of NoMoney', 'Orb of Steal Yo Buffs'],\n        buffs: [],\n        currency: 0\n      },\n      1: {\n        position: 0,\n        inventory: ['Orb of MoMoney', 'Orb of NoMoney', 'Orb of Steal Yo Buffs'],\n        buffs: [],\n        currency: 0\n      },\n      moveDist: 0,\n      currentEvent: null\n    },\n    board: {\n      0: {\n        event: 'start',\n        currency: 0\n      },\n      1: {\n        event: 'advance',\n        currency: 2\n      },\n      2: {\n        event: 'advance',\n        currency: 2\n      },\n      3: {\n        event: 'reverse',\n        currency: -1\n      },\n      4: {\n        event: 'advance',\n        currency: 3\n      },\n      5: {\n        event: 'wizardEvent',\n        currency: 5,\n        item: 'Staff of MoMoney'\n      },\n      6: {\n        event: 'advance',\n        currency: 1\n      },\n      7: {\n        event: 'none',\n        currency: 0\n      },\n      8: {\n        event: 'none',\n        currency: 0\n      },\n      9: {\n        event: 'reverse',\n        currency: -2\n      },\n      10: {\n        event: 'wizardEvent',\n        currency: 0\n      },\n      11: {\n        event: 'none',\n        currency: 0\n      },\n      12: {\n        event: 'advance',\n        currency: 2\n      },\n      13: {\n        event: 'advance',\n        currency: 2\n      },\n      14: {\n        event: 'reverse',\n        currency: -1\n      },\n      15: {\n        event: 'wizardEvent',\n        currency: 3\n      },\n      16: {\n        event: 'advance',\n        currency: -2\n      },\n      17: {\n        event: 'advance',\n        currency: 1\n      },\n      18: {\n        event: 'advance',\n        currency: 2\n      },\n      19: {\n        event: 'none',\n        currency: 0\n      },\n      20: {\n        event: 'wizardEvent',\n        currency: -2\n      },\n      21: {\n        event: 'advance',\n        currency: 2\n      },\n      22: {\n        event: 'reverse',\n        currency: -2\n      },\n      23: {\n        event: 'reverse',\n        currency: -2\n      },\n      24: {\n        event: 'none',\n        currency: 0\n      },\n      25: {\n        event: 'win',\n        currency: 0\n      }\n    }\n  }),\n  turn: {\n    order: TurnOrder.CONTINUE\n  },\n  // Define the moves for rolling the dice and updating the game state.\n  moves: {\n    rollDice: _ref => {\n      let {\n        G,\n        ctx,\n        events\n      } = _ref;\n      const die1 = Math.floor(Math.random() * 6) + 1;\n      const die2 = Math.floor(Math.random() * 6) + 1;\n      let moveDist = die1 + die2;\n      // let moveDist = 5;\n      G.moveDist = moveDist;\n      G.players[ctx.currentPlayer].position += moveDist;\n      G.currentEvent = G.board[G.players[ctx.currentPlayer].position].event;\n      // Check for players active buffs\n      G.players[ctx.currentPlayer].buffs.forEach(buff => {\n        if (buff.type === \"moMoneyBuff\") {\n          moveDist += 1;\n          buff.duration--;\n          if (buff.duration === 0) {\n            G.players[ctx.currentPlayer].buffs.splice(G.players[ctx.currentPlayer].buffs.indexOf(buff), 1);\n          }\n        }\n      });\n      events.setPhase(\"eventOrItemScreen\");\n    },\n    addCurrency: (_ref2, currency) => {\n      let {\n        G,\n        ctx,\n        events\n      } = _ref2;\n      G.players[ctx.currentPlayer].currency += currency;\n    },\n    loseCurrency: (_ref3, currency) => {\n      let {\n        G,\n        ctx,\n        events\n      } = _ref3;\n      G.players[ctx.currentPlayer].currency -= currency;\n    },\n    moveForward: (_ref4, moveDist) => {\n      let {\n        G,\n        ctx,\n        events\n      } = _ref4;\n      G.players[ctx.currentPlayer].position += moveDist;\n    },\n    moveBackward: (_ref5, moveDist) => {\n      let {\n        G,\n        ctx,\n        events\n      } = _ref5;\n      G.players[ctx.currentPlayer].position -= moveDist;\n    },\n    pickUpItem: _ref6 => {\n      let {\n        G,\n        ctx,\n        events\n      } = _ref6;\n      const itemCell = G.board[G.players[ctx.currentPlayer].position];\n      const itemRef = itemCell.item;\n      G.players[ctx.currentPlayer].inventory.push(itemRef);\n      events.setPhase(\"endTurnScreen\");\n    },\n    useItem: (_ref7, item) => {\n      let {\n        G,\n        ctx,\n        events\n      } = _ref7;\n      console.log(\"use item function\");\n      const itemIndex = G.players[ctx.currentPlayer].inventory.indexOf(item);\n      G.players[ctx.currentPlayer].inventory.splice(itemIndex, 1);\n      switch (item) {\n        case 'Staff of MoMoney':\n          G.players[ctx.currentPlayer].currency += 2;\n          break;\n        case 'Staff of NoMoney':\n          break;\n        case 'Orb of Steal Yo Buffs':\n          break;\n      }\n    },\n    applyBuff: (_ref8, playerId, buffType, duration) => {\n      let {\n        G,\n        ctx\n      } = _ref8;\n      G.players[playerId].buffs.push({\n        type: buffType,\n        duration: duration\n      });\n    },\n    moveNoEvent: _ref9 => {\n      let {\n        G,\n        ctx\n      } = _ref9;\n      let moveDist = 5;\n      G.players[ctx.currentPlayer].position += moveDist;\n    }\n  },\n  phases: {\n    rollScreen: {\n      start: true\n    },\n    eventOrItemScreen: {},\n    itemScreen: {},\n    eventScreen: {},\n    correctAnswerScreen: {},\n    wrongAnswerScreen: {},\n    endTurnScreen: {},\n    pickUpItemScreen: {}\n  }\n};","map":{"version":3,"names":["TurnOrder","Client","Server","Game","react","UpwardMobilityBoard","UpwardsMobility","setup","players","position","inventory","buffs","currency","moveDist","currentEvent","board","event","item","turn","order","CONTINUE","moves","rollDice","_ref","G","ctx","events","die1","Math","floor","random","die2","currentPlayer","forEach","buff","type","duration","splice","indexOf","setPhase","addCurrency","_ref2","loseCurrency","_ref3","moveForward","_ref4","moveBackward","_ref5","pickUpItem","_ref6","itemCell","itemRef","push","useItem","_ref7","console","log","itemIndex","applyBuff","_ref8","playerId","buffType","moveNoEvent","_ref9","phases","rollScreen","start","eventOrItemScreen","itemScreen","eventScreen","correctAnswerScreen","wrongAnswerScreen","endTurnScreen","pickUpItemScreen"],"sources":["/Users/aaron/Desktop/School/488_CMPSC/GUI-based-Web-Game-with-Cloud-Native-Infrastructure-Backend 3-21 copy 2/upwardmobility/src/Game.js"],"sourcesContent":["import { TurnOrder, Client, Server, Game } from \"boardgame.io/core\";\n// import { getEvent} from \"./eventsfile\";\nimport react from 'react';\nimport { UpwardMobilityBoard } from \"./Board\";\nexport const UpwardsMobility = {\n\n    // Turn phase flow\n    // 1) Roll dice move piece\n    // 2) Choose event or use item\n    // 3a) If event, show event, if answer question correctly something good happens otherwise something bad happens\n    // if correct answer than they pick up item and or gain currency then end turn\n    // if incorrect answer than negativeness happens then end turn\n    // 3b) If they choose the item, activate the item and do item thing and then show event\n\n    // rollScreen\n    // eventOrItemScreen\n    // itemScreen\n    // eventScreen\n    // correctAnswerScreen\n    // wrongAnswerScreen\n    // endTurnScreen\n\n  setup: () => ({\n    players: {\n      0: {\n        position: 0,\n        inventory: ['Staff of MoMoney', 'Staff of NoMoney', 'Orb of Steal Yo Buffs'],\n          buffs: [],\n          currency: 0,\n      },\n      1: {\n        position: 0,\n        inventory: ['Orb of MoMoney', 'Orb of NoMoney', 'Orb of Steal Yo Buffs'],\n          buffs: [],\n          currency: 0,\n      },\n        moveDist: 0,\n        currentEvent: null,\n    },\n    board: {\n        0: { event: 'start',    currency: 0 },\n        1: { event: 'advance',  currency: 2 },\n        2: { event: 'advance',  currency: 2 },\n        3: { event: 'reverse',  currency: -1 },\n        4: { event: 'advance',  currency: 3 },\n        5: { event: 'wizardEvent',  currency: 5, item: 'Staff of MoMoney'},\n        6: { event: 'advance',  currency: 1 },\n        7: { event: 'none',     currency: 0 },\n        8: { event: 'none',     currency: 0 },\n        9: { event: 'reverse',  currency: -2 },\n        10: { event: 'wizardEvent',    currency: 0 },\n        11: { event: 'none',    currency: 0 },\n        12: { event: 'advance', currency: 2 },\n        13: { event: 'advance', currency: 2 },\n        14: { event: 'reverse', currency: -1 },\n        15: { event: 'wizardEvent', currency: 3 },\n        16: { event: 'advance', currency: -2 },\n        17: { event: 'advance', currency: 1 },\n        18: { event: 'advance', currency: 2 },\n        19: { event: 'none',    currency: 0 },\n        20: { event: 'wizardEvent', currency: -2 },\n        21: { event: 'advance', currency: 2 },\n        22: { event: 'reverse', currency: -2 },\n        23: { event: 'reverse', currency: -2 },\n        24: { event: 'none', currency: 0 },\n        25: { event: 'win', currency: 0 },\n    },\n\n  }),\n    turn: {\n        order: TurnOrder.CONTINUE,\n    },\n\n    // Define the moves for rolling the dice and updating the game state.\n    moves: {\n      rollDice: ({G, ctx, events}) => {\n          const die1 = Math.floor(Math.random() * 6) + 1;\n          const die2 = Math.floor(Math.random() * 6) + 1;\n          let moveDist = die1 + die2;\n          // let moveDist = 5;\n          G.moveDist = moveDist;\n          G.players[ctx.currentPlayer].position += moveDist;\n\n          G.currentEvent = G.board[G.players[ctx.currentPlayer].position].event;\n          // Check for players active buffs\n          G.players[ctx.currentPlayer].buffs.forEach((buff) => {\n              if (buff.type === \"moMoneyBuff\") {\n                  moveDist += 1;\n                  buff.duration--;\n                  if (buff.duration === 0) {\n                      G.players[ctx.currentPlayer].buffs.splice(\n                          G.players[ctx.currentPlayer].buffs.indexOf(buff),\n                          1\n                      );\n                  }\n              }\n          });\n\n          events.setPhase(\"eventOrItemScreen\");\n      },\n\n        addCurrency: ({G, ctx, events}, currency) => {\n            G.players[ctx.currentPlayer].currency += currency;\n        },\n\n        loseCurrency: ({G, ctx, events}, currency) => {\n            G.players[ctx.currentPlayer].currency -= currency;\n        },\n\n        moveForward: ({G, ctx, events}, moveDist) => {\n            G.players[ctx.currentPlayer].position += moveDist;\n        },\n\n        moveBackward: ({G, ctx, events}, moveDist) => {\n            G.players[ctx.currentPlayer].position -= moveDist;\n        },\n\n        pickUpItem: ({G, ctx, events}) => {\n            const itemCell = G.board[G.players[ctx.currentPlayer].position];\n            const itemRef = itemCell.item;\n\n            G.players[ctx.currentPlayer].inventory.push(itemRef);\n\n            events.setPhase(\"endTurnScreen\");\n        },\n\n        useItem: ({G, ctx, events}, item) => {\n\n          console.log(\"use item function\");\n\n          const itemIndex = G.players[ctx.currentPlayer].inventory.indexOf(item);\n          G.players[ctx.currentPlayer].inventory.splice(itemIndex, 1);\n\n          switch (item) {\n              case 'Staff of MoMoney':\n                    G.players[ctx.currentPlayer].currency += 2;\n                    break;\n              case 'Staff of NoMoney':\n                  break;\n                  case 'Orb of Steal Yo Buffs':\n                      break;\n\n          }\n        },\n\n        applyBuff: ({ G, ctx }, playerId, buffType, duration) => {\n            G.players[playerId].buffs.push({ type: buffType, duration: duration });\n        },\n\n        moveNoEvent: ({ G, ctx }) => {\n          let moveDist = 5;\n          G.players[ctx.currentPlayer].position += moveDist;\n\n        },\n\n    },\n    phases: {\n        rollScreen: {\n            start: true\n        },\n        eventOrItemScreen: {\n\n        },\n        itemScreen: {\n\n        },\n        eventScreen: {\n\n        },\n        correctAnswerScreen: {\n\n        },\n        wrongAnswerScreen: {\n\n        },\n        endTurnScreen: {\n\n        },\n        pickUpItemScreen: {\n\n        }\n    },\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import produce from 'immer';\nimport { R as RandomPlugin } from './plugin-random-087f861e.js';\nimport isPlainObject from 'lodash.isplainobject';\n\n/*\r\n * Copyright 2017 The boardgame.io Authors\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\nconst MAKE_MOVE = 'MAKE_MOVE';\nconst GAME_EVENT = 'GAME_EVENT';\nconst REDO = 'REDO';\nconst RESET = 'RESET';\nconst SYNC = 'SYNC';\nconst UNDO = 'UNDO';\nconst UPDATE = 'UPDATE';\nconst PATCH = 'PATCH';\nconst PLUGIN = 'PLUGIN';\nconst STRIP_TRANSIENTS = 'STRIP_TRANSIENTS';\n\n/*\r\n * Copyright 2017 The boardgame.io Authors\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\n/**\r\n * Generate a move to be dispatched to the game move reducer.\r\n *\r\n * @param {string} type - The move type.\r\n * @param {Array}  args - Additional arguments.\r\n * @param {string}  playerID - The ID of the player making this action.\r\n * @param {string}  credentials - (optional) The credentials for the player making this action.\r\n */\nconst makeMove = (type, args, playerID, credentials) => ({\n  type: MAKE_MOVE,\n  payload: {\n    type,\n    args,\n    playerID,\n    credentials\n  }\n});\n/**\r\n * Generate a game event to be dispatched to the flow reducer.\r\n *\r\n * @param {string} type - The event type.\r\n * @param {Array}  args - Additional arguments.\r\n * @param {string}  playerID - The ID of the player making this action.\r\n * @param {string}  credentials - (optional) The credentials for the player making this action.\r\n */\nconst gameEvent = (type, args, playerID, credentials) => ({\n  type: GAME_EVENT,\n  payload: {\n    type,\n    args,\n    playerID,\n    credentials\n  }\n});\n/**\r\n * Generate an automatic game event that is a side-effect of a move.\r\n * @param {string} type - The event type.\r\n * @param {Array}  args - Additional arguments.\r\n * @param {string}  playerID - The ID of the player making this action.\r\n * @param {string}  credentials - (optional) The credentials for the player making this action.\r\n */\nconst automaticGameEvent = (type, args, playerID, credentials) => ({\n  type: GAME_EVENT,\n  payload: {\n    type,\n    args,\n    playerID,\n    credentials\n  },\n  automatic: true\n});\nconst sync = info => ({\n  type: SYNC,\n  state: info.state,\n  log: info.log,\n  initialState: info.initialState,\n  clientOnly: true\n});\n/**\r\n * Used to update the Redux store's state with patch in response to\r\n * an action coming from another player.\r\n * @param prevStateID previous stateID\r\n * @param stateID stateID after this patch\r\n * @param {Operation[]} patch - The patch to apply.\r\n * @param {LogEntry[]} deltalog - A log delta.\r\n */\nconst patch = (prevStateID, stateID, patch, deltalog) => ({\n  type: PATCH,\n  prevStateID,\n  stateID,\n  patch,\n  deltalog,\n  clientOnly: true\n});\n/**\r\n * Used to update the Redux store's state in response to\r\n * an action coming from another player.\r\n * @param {object} state - The state to restore.\r\n * @param {Array} deltalog - A log delta.\r\n */\nconst update = (state, deltalog) => ({\n  type: UPDATE,\n  state,\n  deltalog,\n  clientOnly: true\n});\n/**\r\n * Used to reset the game state.\r\n * @param {object} state - The initial state.\r\n */\nconst reset = state => ({\n  type: RESET,\n  state,\n  clientOnly: true\n});\n/**\r\n * Used to undo the last move.\r\n * @param {string}  playerID - The ID of the player making this action.\r\n * @param {string}  credentials - (optional) The credentials for the player making this action.\r\n */\nconst undo = (playerID, credentials) => ({\n  type: UNDO,\n  payload: {\n    type: null,\n    args: null,\n    playerID,\n    credentials\n  }\n});\n/**\r\n * Used to redo the last undone move.\r\n * @param {string}  playerID - The ID of the player making this action.\r\n * @param {string}  credentials - (optional) The credentials for the player making this action.\r\n */\nconst redo = (playerID, credentials) => ({\n  type: REDO,\n  payload: {\n    type: null,\n    args: null,\n    playerID,\n    credentials\n  }\n});\n/**\r\n * Allows plugins to define their own actions and intercept them.\r\n */\nconst plugin = (type, args, playerID, credentials) => ({\n  type: PLUGIN,\n  payload: {\n    type,\n    args,\n    playerID,\n    credentials\n  }\n});\n/**\r\n * Private action used to strip transient metadata (e.g. errors) from the game\r\n * state.\r\n */\nconst stripTransients = () => ({\n  type: STRIP_TRANSIENTS\n});\nvar ActionCreators = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  makeMove: makeMove,\n  gameEvent: gameEvent,\n  automaticGameEvent: automaticGameEvent,\n  sync: sync,\n  patch: patch,\n  update: update,\n  reset: reset,\n  undo: undo,\n  redo: redo,\n  plugin: plugin,\n  stripTransients: stripTransients\n});\n\n/**\r\n * Moves can return this when they want to indicate\r\n * that the combination of arguments is illegal and\r\n * the move ought to be discarded.\r\n */\nconst INVALID_MOVE = 'INVALID_MOVE';\n\n/*\r\n * Copyright 2018 The boardgame.io Authors\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\n/**\r\n * Plugin that allows using Immer to make immutable changes\r\n * to G by just mutating it.\r\n */\nconst ImmerPlugin = {\n  name: 'plugin-immer',\n  fnWrap: move => function (context) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    let isInvalid = false;\n    const newG = produce(context.G, G => {\n      const result = move({\n        ...context,\n        G\n      }, ...args);\n      if (result === INVALID_MOVE) {\n        isInvalid = true;\n        return;\n      }\n      return result;\n    });\n    if (isInvalid) return INVALID_MOVE;\n    return newG;\n  }\n};\nvar GameMethod;\n(function (GameMethod) {\n  GameMethod[\"MOVE\"] = \"MOVE\";\n  GameMethod[\"GAME_ON_END\"] = \"GAME_ON_END\";\n  GameMethod[\"PHASE_ON_BEGIN\"] = \"PHASE_ON_BEGIN\";\n  GameMethod[\"PHASE_ON_END\"] = \"PHASE_ON_END\";\n  GameMethod[\"TURN_ON_BEGIN\"] = \"TURN_ON_BEGIN\";\n  GameMethod[\"TURN_ON_MOVE\"] = \"TURN_ON_MOVE\";\n  GameMethod[\"TURN_ON_END\"] = \"TURN_ON_END\";\n})(GameMethod || (GameMethod = {}));\n\n/*\r\n * Copyright 2018 The boardgame.io Authors\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\nvar Errors;\n(function (Errors) {\n  Errors[\"CalledOutsideHook\"] = \"Events must be called from moves or the `onBegin`, `onEnd`, and `onMove` hooks.\\nThis error probably means you called an event from other game code, like an `endIf` trigger or one of the `turn.order` methods.\";\n  Errors[\"EndTurnInOnEnd\"] = \"`endTurn` is disallowed in `onEnd` hooks \\u2014 the turn is already ending.\";\n  Errors[\"MaxTurnEndings\"] = \"Maximum number of turn endings exceeded for this update.\\nThis likely means game code is triggering an infinite loop.\";\n  Errors[\"PhaseEventInOnEnd\"] = \"`setPhase` & `endPhase` are disallowed in a phase\\u2019s `onEnd` hook \\u2014 the phase is already ending.\\nIf you\\u2019re trying to dynamically choose the next phase when a phase ends, use the phase\\u2019s `next` trigger.\";\n  Errors[\"StageEventInOnEnd\"] = \"`setStage`, `endStage` & `setActivePlayers` are disallowed in `onEnd` hooks.\";\n  Errors[\"StageEventInPhaseBegin\"] = \"`setStage`, `endStage` & `setActivePlayers` are disallowed in a phase\\u2019s `onBegin` hook.\\nUse `setActivePlayers` in a `turn.onBegin` hook or declare stages with `turn.activePlayers` instead.\";\n  Errors[\"StageEventInTurnBegin\"] = \"`setStage` & `endStage` are disallowed in `turn.onBegin`.\\nUse `setActivePlayers` or declare stages with `turn.activePlayers` instead.\";\n})(Errors || (Errors = {}));\n/**\r\n * Events\r\n */\nclass Events {\n  constructor(flow, ctx, playerID) {\n    this.flow = flow;\n    this.playerID = playerID;\n    this.dispatch = [];\n    this.initialTurn = ctx.turn;\n    this.updateTurnContext(ctx, undefined);\n    // This is an arbitrarily large upper threshold, which could be made\n    // configurable via a game option if the need arises.\n    this.maxEndedTurnsPerAction = ctx.numPlayers * 100;\n  }\n  api() {\n    var _this = this;\n    const events = {\n      _private: this\n    };\n    for (const type of this.flow.eventNames) {\n      events[type] = function () {\n        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n        _this.dispatch.push({\n          type,\n          args,\n          phase: _this.currentPhase,\n          turn: _this.currentTurn,\n          calledFrom: _this.currentMethod,\n          // Used to capture a stack trace in case it is needed later.\n          error: new Error('Events Plugin Error')\n        });\n      };\n    }\n    return events;\n  }\n  isUsed() {\n    return this.dispatch.length > 0;\n  }\n  updateTurnContext(ctx, methodType) {\n    this.currentPhase = ctx.phase;\n    this.currentTurn = ctx.turn;\n    this.currentMethod = methodType;\n  }\n  unsetCurrentMethod() {\n    this.currentMethod = undefined;\n  }\n  /**\r\n   * Updates ctx with the triggered events.\r\n   * @param {object} state - The state object { G, ctx }.\r\n   */\n  update(state) {\n    const initialState = state;\n    const stateWithError = (_ref, message) => {\n      let {\n        stack\n      } = _ref;\n      return {\n        ...initialState,\n        plugins: {\n          ...initialState.plugins,\n          events: {\n            ...initialState.plugins.events,\n            data: {\n              error: message + '\\n' + stack\n            }\n          }\n        }\n      };\n    };\n    EventQueue: for (let i = 0; i < this.dispatch.length; i++) {\n      const event = this.dispatch[i];\n      const turnHasEnded = event.turn !== state.ctx.turn;\n      // This protects against potential infinite loops if specific events are called on hooks.\n      // The moment we exceed the defined threshold, we just bail out of all phases.\n      const endedTurns = this.currentTurn - this.initialTurn;\n      if (endedTurns >= this.maxEndedTurnsPerAction) {\n        return stateWithError(event.error, Errors.MaxTurnEndings);\n      }\n      if (event.calledFrom === undefined) {\n        return stateWithError(event.error, Errors.CalledOutsideHook);\n      }\n      // Stop processing events once the game has finished.\n      if (state.ctx.gameover) break EventQueue;\n      switch (event.type) {\n        case 'endStage':\n        case 'setStage':\n        case 'setActivePlayers':\n          {\n            switch (event.calledFrom) {\n              // Disallow all stage events in onEnd and phase.onBegin hooks.\n              case GameMethod.TURN_ON_END:\n              case GameMethod.PHASE_ON_END:\n                return stateWithError(event.error, Errors.StageEventInOnEnd);\n              case GameMethod.PHASE_ON_BEGIN:\n                return stateWithError(event.error, Errors.StageEventInPhaseBegin);\n              // Disallow setStage & endStage in turn.onBegin hooks.\n              case GameMethod.TURN_ON_BEGIN:\n                if (event.type === 'setActivePlayers') break;\n                return stateWithError(event.error, Errors.StageEventInTurnBegin);\n            }\n            // If the turn already ended, don't try to process stage events.\n            if (turnHasEnded) continue EventQueue;\n            break;\n          }\n        case 'endTurn':\n          {\n            if (event.calledFrom === GameMethod.TURN_ON_END || event.calledFrom === GameMethod.PHASE_ON_END) {\n              return stateWithError(event.error, Errors.EndTurnInOnEnd);\n            }\n            // If the turn already ended some other way,\n            // don't try to end the turn again.\n            if (turnHasEnded) continue EventQueue;\n            break;\n          }\n        case 'endPhase':\n        case 'setPhase':\n          {\n            if (event.calledFrom === GameMethod.PHASE_ON_END) {\n              return stateWithError(event.error, Errors.PhaseEventInOnEnd);\n            }\n            // If the phase already ended some other way,\n            // don't try to end the phase again.\n            if (event.phase !== state.ctx.phase) continue EventQueue;\n            break;\n          }\n      }\n      const action = automaticGameEvent(event.type, event.args, this.playerID);\n      state = this.flow.processEvent(state, action);\n    }\n    return state;\n  }\n}\n\n/*\r\n * Copyright 2020 The boardgame.io Authors\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\nconst EventsPlugin = {\n  name: 'events',\n  noClient: _ref2 => {\n    let {\n      api\n    } = _ref2;\n    return api._private.isUsed();\n  },\n  isInvalid: _ref3 => {\n    let {\n      data\n    } = _ref3;\n    return data.error || false;\n  },\n  // Update the events plugin’s internal turn context each time a move\n  // or hook is called. This allows events called after turn or phase\n  // endings to dispatch the current turn and phase correctly.\n  fnWrap: (method, methodType) => function (context) {\n    const api = context.events;\n    if (api) api._private.updateTurnContext(context.ctx, methodType);\n    for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n      args[_key3 - 1] = arguments[_key3];\n    }\n    const G = method(context, ...args);\n    if (api) api._private.unsetCurrentMethod();\n    return G;\n  },\n  dangerouslyFlushRawState: _ref4 => {\n    let {\n      state,\n      api\n    } = _ref4;\n    return api._private.update(state);\n  },\n  api: _ref5 => {\n    let {\n      game,\n      ctx,\n      playerID\n    } = _ref5;\n    return new Events(game.flow, ctx, playerID).api();\n  }\n};\n\n/*\r\n * Copyright 2018 The boardgame.io Authors\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\n/**\r\n * Plugin that makes it possible to add metadata to log entries.\r\n * During a move, you can set metadata using ctx.log.setMetadata and it will be\r\n * available on the log entry for that move.\r\n */\nconst LogPlugin = {\n  name: 'log',\n  flush: () => ({}),\n  api: _ref6 => {\n    let {\n      data\n    } = _ref6;\n    return {\n      setMetadata: metadata => {\n        data.metadata = metadata;\n      }\n    };\n  },\n  setup: () => ({})\n};\n\n/**\r\n * Check if a value can be serialized (e.g. using `JSON.stringify`).\r\n * Adapted from: https://stackoverflow.com/a/30712764/3829557\r\n */\nfunction isSerializable(value) {\n  // Primitives are OK.\n  if (value === undefined || value === null || typeof value === 'boolean' || typeof value === 'number' || typeof value === 'string') {\n    return true;\n  }\n  // A non-primitive value that is neither a POJO or an array cannot be serialized.\n  if (!isPlainObject(value) && !Array.isArray(value)) {\n    return false;\n  }\n  // Recurse entries if the value is an object or array.\n  for (const key in value) {\n    if (!isSerializable(value[key])) return false;\n  }\n  return true;\n}\n/**\r\n * Plugin that checks whether state is serializable, in order to avoid\r\n * network serialization bugs.\r\n */\nconst SerializablePlugin = {\n  name: 'plugin-serializable',\n  fnWrap: move => function (context) {\n    for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n      args[_key4 - 1] = arguments[_key4];\n    }\n    const result = move(context, ...args);\n    // Check state in non-production environments.\n    if (process.env.NODE_ENV !== 'production' && !isSerializable(result)) {\n      throw new Error('Move state is not JSON-serialiazable.\\n' + 'See https://boardgame.io/documentation/#/?id=state for more information.');\n    }\n    return result;\n  }\n};\n\n/*\r\n * Copyright 2018 The boardgame.io Authors\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\nconst production = process.env.NODE_ENV === 'production';\nconst logfn = production ? () => {} : function () {\n  return console.log(...arguments);\n};\nconst errorfn = function () {\n  return console.error(...arguments);\n};\nfunction info(msg) {\n  logfn(`INFO: ${msg}`);\n}\nfunction error(error) {\n  errorfn('ERROR:', error);\n}\n\n/*\r\n * Copyright 2018 The boardgame.io Authors\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\n/**\r\n * List of plugins that are always added.\r\n */\nconst CORE_PLUGINS = [ImmerPlugin, RandomPlugin, LogPlugin, SerializablePlugin];\nconst DEFAULT_PLUGINS = [...CORE_PLUGINS, EventsPlugin];\n/**\r\n * Allow plugins to intercept actions and process them.\r\n */\nconst ProcessAction = (state, action, opts) => {\n  // TODO(#723): Extend error handling to plugins.\n  opts.game.plugins.filter(plugin => plugin.action !== undefined).filter(plugin => plugin.name === action.payload.type).forEach(plugin => {\n    const name = plugin.name;\n    const pluginState = state.plugins[name] || {\n      data: {}\n    };\n    const data = plugin.action(pluginState.data, action.payload);\n    state = {\n      ...state,\n      plugins: {\n        ...state.plugins,\n        [name]: {\n          ...pluginState,\n          data\n        }\n      }\n    };\n  });\n  return state;\n};\n/**\r\n * The APIs created by various plugins are stored in the plugins\r\n * section of the state object:\r\n *\r\n * {\r\n *   G: {},\r\n *   ctx: {},\r\n *   plugins: {\r\n *     plugin-a: {\r\n *       data: {},  // this is generated by the plugin at Setup / Flush.\r\n *       api: {},   // this is ephemeral and generated by Enhance.\r\n *     }\r\n *   }\r\n * }\r\n *\r\n * This function retrieves plugin APIs and returns them as an object\r\n * for consumption as used by move contexts.\r\n */\nconst GetAPIs = _ref7 => {\n  let {\n    plugins\n  } = _ref7;\n  return Object.entries(plugins || {}).reduce((apis, _ref8) => {\n    let [name, {\n      api\n    }] = _ref8;\n    apis[name] = api;\n    return apis;\n  }, {});\n};\n/**\r\n * Applies the provided plugins to the given move / flow function.\r\n *\r\n * @param methodToWrap - The move function or hook to apply the plugins to.\r\n * @param methodType - The type of the move or hook being wrapped.\r\n * @param plugins - The list of plugins.\r\n */\nconst FnWrap = (methodToWrap, methodType, plugins) => {\n  return [...CORE_PLUGINS, ...plugins, EventsPlugin].filter(plugin => plugin.fnWrap !== undefined).reduce((method, _ref9) => {\n    let {\n      fnWrap\n    } = _ref9;\n    return fnWrap(method, methodType);\n  }, methodToWrap);\n};\n/**\r\n * Allows the plugin to generate its initial state.\r\n */\nconst Setup = (state, opts) => {\n  [...DEFAULT_PLUGINS, ...opts.game.plugins].filter(plugin => plugin.setup !== undefined).forEach(plugin => {\n    const name = plugin.name;\n    const data = plugin.setup({\n      G: state.G,\n      ctx: state.ctx,\n      game: opts.game\n    });\n    state = {\n      ...state,\n      plugins: {\n        ...state.plugins,\n        [name]: {\n          data\n        }\n      }\n    };\n  });\n  return state;\n};\n/**\r\n * Invokes the plugin before a move or event.\r\n * The API that the plugin generates is stored inside\r\n * the `plugins` section of the state (which is subsequently\r\n * merged into ctx).\r\n */\nconst Enhance = (state, opts) => {\n  [...DEFAULT_PLUGINS, ...opts.game.plugins].filter(plugin => plugin.api !== undefined).forEach(plugin => {\n    const name = plugin.name;\n    const pluginState = state.plugins[name] || {\n      data: {}\n    };\n    const api = plugin.api({\n      G: state.G,\n      ctx: state.ctx,\n      data: pluginState.data,\n      game: opts.game,\n      playerID: opts.playerID\n    });\n    state = {\n      ...state,\n      plugins: {\n        ...state.plugins,\n        [name]: {\n          ...pluginState,\n          api\n        }\n      }\n    };\n  });\n  return state;\n};\n/**\r\n * Allows plugins to update their state after a move / event.\r\n */\nconst Flush = (state, opts) => {\n  // We flush the events plugin first, then custom plugins and the core plugins.\n  // This means custom plugins cannot use the events API but will be available in event hooks.\n  // Note that plugins are flushed in reverse, to allow custom plugins calling each other.\n  [...CORE_PLUGINS, ...opts.game.plugins, EventsPlugin].reverse().forEach(plugin => {\n    const name = plugin.name;\n    const pluginState = state.plugins[name] || {\n      data: {}\n    };\n    if (plugin.flush) {\n      const newData = plugin.flush({\n        G: state.G,\n        ctx: state.ctx,\n        game: opts.game,\n        api: pluginState.api,\n        data: pluginState.data\n      });\n      state = {\n        ...state,\n        plugins: {\n          ...state.plugins,\n          [plugin.name]: {\n            data: newData\n          }\n        }\n      };\n    } else if (plugin.dangerouslyFlushRawState) {\n      state = plugin.dangerouslyFlushRawState({\n        state,\n        game: opts.game,\n        api: pluginState.api,\n        data: pluginState.data\n      });\n      // Remove everything other than data.\n      const data = state.plugins[name].data;\n      state = {\n        ...state,\n        plugins: {\n          ...state.plugins,\n          [plugin.name]: {\n            data\n          }\n        }\n      };\n    }\n  });\n  return state;\n};\n/**\r\n * Allows plugins to indicate if they should not be materialized on the client.\r\n * This will cause the client to discard the state update and wait for the\r\n * master instead.\r\n */\nconst NoClient = (state, opts) => {\n  return [...DEFAULT_PLUGINS, ...opts.game.plugins].filter(plugin => plugin.noClient !== undefined).map(plugin => {\n    const name = plugin.name;\n    const pluginState = state.plugins[name];\n    if (pluginState) {\n      return plugin.noClient({\n        G: state.G,\n        ctx: state.ctx,\n        game: opts.game,\n        api: pluginState.api,\n        data: pluginState.data\n      });\n    }\n    return false;\n  }).includes(true);\n};\n/**\r\n * Allows plugins to indicate if the entire action should be thrown out\r\n * as invalid. This will cancel the entire state update.\r\n */\nconst IsInvalid = (state, opts) => {\n  const firstInvalidReturn = [...DEFAULT_PLUGINS, ...opts.game.plugins].filter(plugin => plugin.isInvalid !== undefined).map(plugin => {\n    const {\n      name\n    } = plugin;\n    const pluginState = state.plugins[name];\n    const message = plugin.isInvalid({\n      G: state.G,\n      ctx: state.ctx,\n      game: opts.game,\n      data: pluginState && pluginState.data\n    });\n    return message ? {\n      plugin: name,\n      message\n    } : false;\n  }).find(value => value);\n  return firstInvalidReturn || false;\n};\n/**\r\n * Update plugin state after move/event & check if plugins consider the update to be valid.\r\n * @returns Tuple of `[updatedState]` or `[originalState, invalidError]`.\r\n */\nconst FlushAndValidate = (state, opts) => {\n  const updatedState = Flush(state, opts);\n  const isInvalid = IsInvalid(updatedState, opts);\n  if (!isInvalid) return [updatedState];\n  const {\n    plugin,\n    message\n  } = isInvalid;\n  error(`${plugin} plugin declared action invalid:\\n${message}`);\n  return [state, isInvalid];\n};\n/**\r\n * Allows plugins to customize their data for specific players.\r\n * For example, a plugin may want to share no data with the client, or\r\n * want to keep some player data secret from opponents.\r\n */\nconst PlayerView = (_ref10, _ref11) => {\n  let {\n    G,\n    ctx,\n    plugins = {}\n  } = _ref10;\n  let {\n    game,\n    playerID\n  } = _ref11;\n  [...DEFAULT_PLUGINS, ...game.plugins].forEach(_ref12 => {\n    let {\n      name,\n      playerView\n    } = _ref12;\n    if (!playerView) return;\n    const {\n      data\n    } = plugins[name] || {\n      data: {}\n    };\n    const newData = playerView({\n      G,\n      ctx,\n      game,\n      data,\n      playerID\n    });\n    plugins = {\n      ...plugins,\n      [name]: {\n        data: newData\n      }\n    };\n  });\n  return plugins;\n};\n\n/**\r\n * Adjust the given options to use the new minMoves/maxMoves if a legacy moveLimit was given\r\n * @param options The options object to apply backwards compatibility to\r\n * @param enforceMinMoves Use moveLimit to set both minMoves and maxMoves\r\n */\nfunction supportDeprecatedMoveLimit(options) {\n  let enforceMinMoves = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  if (options.moveLimit) {\n    if (enforceMinMoves) {\n      options.minMoves = options.moveLimit;\n    }\n    options.maxMoves = options.moveLimit;\n    delete options.moveLimit;\n  }\n}\n\n/*\r\n * Copyright 2017 The boardgame.io Authors\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\nfunction SetActivePlayers(ctx, arg) {\n  let activePlayers = {};\n  let _prevActivePlayers = [];\n  let _nextActivePlayers = null;\n  let _activePlayersMinMoves = {};\n  let _activePlayersMaxMoves = {};\n  if (Array.isArray(arg)) {\n    // support a simple array of player IDs as active players\n    const value = {};\n    arg.forEach(v => value[v] = Stage.NULL);\n    activePlayers = value;\n  } else {\n    // process active players argument object\n    // stages previously did not enforce minMoves, this behaviour is kept intentionally\n    supportDeprecatedMoveLimit(arg);\n    if (arg.next) {\n      _nextActivePlayers = arg.next;\n    }\n    if (arg.revert) {\n      _prevActivePlayers = [...ctx._prevActivePlayers, {\n        activePlayers: ctx.activePlayers,\n        _activePlayersMinMoves: ctx._activePlayersMinMoves,\n        _activePlayersMaxMoves: ctx._activePlayersMaxMoves,\n        _activePlayersNumMoves: ctx._activePlayersNumMoves\n      }];\n    }\n    if (arg.currentPlayer !== undefined) {\n      ApplyActivePlayerArgument(activePlayers, _activePlayersMinMoves, _activePlayersMaxMoves, ctx.currentPlayer, arg.currentPlayer);\n    }\n    if (arg.others !== undefined) {\n      for (let i = 0; i < ctx.playOrder.length; i++) {\n        const id = ctx.playOrder[i];\n        if (id !== ctx.currentPlayer) {\n          ApplyActivePlayerArgument(activePlayers, _activePlayersMinMoves, _activePlayersMaxMoves, id, arg.others);\n        }\n      }\n    }\n    if (arg.all !== undefined) {\n      for (let i = 0; i < ctx.playOrder.length; i++) {\n        const id = ctx.playOrder[i];\n        ApplyActivePlayerArgument(activePlayers, _activePlayersMinMoves, _activePlayersMaxMoves, id, arg.all);\n      }\n    }\n    if (arg.value) {\n      for (const id in arg.value) {\n        ApplyActivePlayerArgument(activePlayers, _activePlayersMinMoves, _activePlayersMaxMoves, id, arg.value[id]);\n      }\n    }\n    if (arg.minMoves) {\n      for (const id in activePlayers) {\n        if (_activePlayersMinMoves[id] === undefined) {\n          _activePlayersMinMoves[id] = arg.minMoves;\n        }\n      }\n    }\n    if (arg.maxMoves) {\n      for (const id in activePlayers) {\n        if (_activePlayersMaxMoves[id] === undefined) {\n          _activePlayersMaxMoves[id] = arg.maxMoves;\n        }\n      }\n    }\n  }\n  if (Object.keys(activePlayers).length === 0) {\n    activePlayers = null;\n  }\n  if (Object.keys(_activePlayersMinMoves).length === 0) {\n    _activePlayersMinMoves = null;\n  }\n  if (Object.keys(_activePlayersMaxMoves).length === 0) {\n    _activePlayersMaxMoves = null;\n  }\n  const _activePlayersNumMoves = {};\n  for (const id in activePlayers) {\n    _activePlayersNumMoves[id] = 0;\n  }\n  return {\n    ...ctx,\n    activePlayers,\n    _activePlayersMinMoves,\n    _activePlayersMaxMoves,\n    _activePlayersNumMoves,\n    _prevActivePlayers,\n    _nextActivePlayers\n  };\n}\n/**\r\n * Update activePlayers, setting it to previous, next or null values\r\n * when it becomes empty.\r\n * @param ctx\r\n */\nfunction UpdateActivePlayersOnceEmpty(ctx) {\n  let {\n    activePlayers,\n    _activePlayersMinMoves,\n    _activePlayersMaxMoves,\n    _activePlayersNumMoves,\n    _prevActivePlayers,\n    _nextActivePlayers\n  } = ctx;\n  if (activePlayers && Object.keys(activePlayers).length === 0) {\n    if (_nextActivePlayers) {\n      ctx = SetActivePlayers(ctx, _nextActivePlayers);\n      ({\n        activePlayers,\n        _activePlayersMinMoves,\n        _activePlayersMaxMoves,\n        _activePlayersNumMoves,\n        _prevActivePlayers\n      } = ctx);\n    } else if (_prevActivePlayers.length > 0) {\n      const lastIndex = _prevActivePlayers.length - 1;\n      ({\n        activePlayers,\n        _activePlayersMinMoves,\n        _activePlayersMaxMoves,\n        _activePlayersNumMoves\n      } = _prevActivePlayers[lastIndex]);\n      _prevActivePlayers = _prevActivePlayers.slice(0, lastIndex);\n    } else {\n      activePlayers = null;\n      _activePlayersMinMoves = null;\n      _activePlayersMaxMoves = null;\n    }\n  }\n  return {\n    ...ctx,\n    activePlayers,\n    _activePlayersMinMoves,\n    _activePlayersMaxMoves,\n    _activePlayersNumMoves,\n    _prevActivePlayers\n  };\n}\n/**\r\n * Apply an active player argument to the given player ID\r\n * @param {Object} activePlayers\r\n * @param {Object} _activePlayersMinMoves\r\n * @param {Object} _activePlayersMaxMoves\r\n * @param {String} playerID The player to apply the parameter to\r\n * @param {(String|Object)} arg An active player argument\r\n */\nfunction ApplyActivePlayerArgument(activePlayers, _activePlayersMinMoves, _activePlayersMaxMoves, playerID, arg) {\n  if (typeof arg !== 'object' || arg === Stage.NULL) {\n    arg = {\n      stage: arg\n    };\n  }\n  if (arg.stage !== undefined) {\n    // stages previously did not enforce minMoves, this behaviour is kept intentionally\n    supportDeprecatedMoveLimit(arg);\n    activePlayers[playerID] = arg.stage;\n    if (arg.minMoves) _activePlayersMinMoves[playerID] = arg.minMoves;\n    if (arg.maxMoves) _activePlayersMaxMoves[playerID] = arg.maxMoves;\n  }\n}\n/**\r\n * Converts a playOrderPos index into its value in playOrder.\r\n * @param {Array} playOrder - An array of player ID's.\r\n * @param {number} playOrderPos - An index into the above.\r\n */\nfunction getCurrentPlayer(playOrder, playOrderPos) {\n  // convert to string in case playOrder is set to number[]\n  return playOrder[playOrderPos] + '';\n}\n/**\r\n * Called at the start of a turn to initialize turn order state.\r\n *\r\n * TODO: This is called inside StartTurn, which is called from\r\n * both UpdateTurn and StartPhase (so it's called at the beginning\r\n * of a new phase as well as between turns). We should probably\r\n * split it into two.\r\n */\nfunction InitTurnOrderState(state, turn) {\n  let {\n    G,\n    ctx\n  } = state;\n  const {\n    numPlayers\n  } = ctx;\n  const pluginAPIs = GetAPIs(state);\n  const context = {\n    ...pluginAPIs,\n    G,\n    ctx\n  };\n  const order = turn.order;\n  let playOrder = [...Array.from({\n    length: numPlayers\n  })].map((_, i) => i + '');\n  if (order.playOrder !== undefined) {\n    playOrder = order.playOrder(context);\n  }\n  const playOrderPos = order.first(context);\n  const posType = typeof playOrderPos;\n  if (posType !== 'number') {\n    error(`invalid value returned by turn.order.first — expected number got ${posType} “${playOrderPos}”.`);\n  }\n  const currentPlayer = getCurrentPlayer(playOrder, playOrderPos);\n  ctx = {\n    ...ctx,\n    currentPlayer,\n    playOrderPos,\n    playOrder\n  };\n  ctx = SetActivePlayers(ctx, turn.activePlayers || {});\n  return ctx;\n}\n/**\r\n * Called at the end of each turn to update the turn order state.\r\n * @param {object} G - The game object G.\r\n * @param {object} ctx - The game object ctx.\r\n * @param {object} turn - A turn object for this phase.\r\n * @param {string} endTurnArg - An optional argument to endTurn that\r\n                                may specify the next player.\r\n */\nfunction UpdateTurnOrderState(state, currentPlayer, turn, endTurnArg) {\n  const order = turn.order;\n  let {\n    G,\n    ctx\n  } = state;\n  let playOrderPos = ctx.playOrderPos;\n  let endPhase = false;\n  if (endTurnArg && endTurnArg !== true) {\n    if (typeof endTurnArg !== 'object') {\n      error(`invalid argument to endTurn: ${endTurnArg}`);\n    }\n    Object.keys(endTurnArg).forEach(arg => {\n      switch (arg) {\n        case 'remove':\n          currentPlayer = getCurrentPlayer(ctx.playOrder, playOrderPos);\n          break;\n        case 'next':\n          playOrderPos = ctx.playOrder.indexOf(endTurnArg.next);\n          currentPlayer = endTurnArg.next;\n          break;\n        default:\n          error(`invalid argument to endTurn: ${arg}`);\n      }\n    });\n  } else {\n    const pluginAPIs = GetAPIs(state);\n    const context = {\n      ...pluginAPIs,\n      G,\n      ctx\n    };\n    const t = order.next(context);\n    const type = typeof t;\n    if (t !== undefined && type !== 'number') {\n      error(`invalid value returned by turn.order.next — expected number or undefined got ${type} “${t}”.`);\n    }\n    if (t === undefined) {\n      endPhase = true;\n    } else {\n      playOrderPos = t;\n      currentPlayer = getCurrentPlayer(ctx.playOrder, playOrderPos);\n    }\n  }\n  ctx = {\n    ...ctx,\n    playOrderPos,\n    currentPlayer\n  };\n  return {\n    endPhase,\n    ctx\n  };\n}\n/**\r\n * Set of different turn orders possible in a phase.\r\n * These are meant to be passed to the `turn` setting\r\n * in the flow objects.\r\n *\r\n * Each object defines the first player when the phase / game\r\n * begins, and also a function `next` to determine who the\r\n * next player is when the turn ends.\r\n *\r\n * The phase ends if next() returns undefined.\r\n */\nconst TurnOrder = {\n  /**\r\n   * DEFAULT\r\n   *\r\n   * The default round-robin turn order.\r\n   */\n  DEFAULT: {\n    first: _ref13 => {\n      let {\n        ctx\n      } = _ref13;\n      return ctx.turn === 0 ? ctx.playOrderPos : (ctx.playOrderPos + 1) % ctx.playOrder.length;\n    },\n    next: _ref14 => {\n      let {\n        ctx\n      } = _ref14;\n      return (ctx.playOrderPos + 1) % ctx.playOrder.length;\n    }\n  },\n  /**\r\n   * RESET\r\n   *\r\n   * Similar to DEFAULT, but starts from 0 each time.\r\n   */\n  RESET: {\n    first: () => 0,\n    next: _ref15 => {\n      let {\n        ctx\n      } = _ref15;\n      return (ctx.playOrderPos + 1) % ctx.playOrder.length;\n    }\n  },\n  /**\r\n   * CONTINUE\r\n   *\r\n   * Similar to DEFAULT, but starts with the player who ended the last phase.\r\n   */\n  CONTINUE: {\n    first: _ref16 => {\n      let {\n        ctx\n      } = _ref16;\n      return ctx.playOrderPos;\n    },\n    next: _ref17 => {\n      let {\n        ctx\n      } = _ref17;\n      return (ctx.playOrderPos + 1) % ctx.playOrder.length;\n    }\n  },\n  /**\r\n   * ONCE\r\n   *\r\n   * Another round-robin turn order, but goes around just once.\r\n   * The phase ends after all players have played.\r\n   */\n  ONCE: {\n    first: () => 0,\n    next: _ref18 => {\n      let {\n        ctx\n      } = _ref18;\n      if (ctx.playOrderPos < ctx.playOrder.length - 1) {\n        return ctx.playOrderPos + 1;\n      }\n    }\n  },\n  /**\r\n   * CUSTOM\r\n   *\r\n   * Identical to DEFAULT, but also sets playOrder at the\r\n   * beginning of the phase.\r\n   *\r\n   * @param {Array} playOrder - The play order.\r\n   */\n  CUSTOM: playOrder => ({\n    playOrder: () => playOrder,\n    first: () => 0,\n    next: _ref19 => {\n      let {\n        ctx\n      } = _ref19;\n      return (ctx.playOrderPos + 1) % ctx.playOrder.length;\n    }\n  }),\n  /**\r\n   * CUSTOM_FROM\r\n   *\r\n   * Identical to DEFAULT, but also sets playOrder at the\r\n   * beginning of the phase to a value specified by a field\r\n   * in G.\r\n   *\r\n   * @param {string} playOrderField - Field in G.\r\n   */\n  CUSTOM_FROM: playOrderField => ({\n    playOrder: _ref20 => {\n      let {\n        G\n      } = _ref20;\n      return G[playOrderField];\n    },\n    first: () => 0,\n    next: _ref21 => {\n      let {\n        ctx\n      } = _ref21;\n      return (ctx.playOrderPos + 1) % ctx.playOrder.length;\n    }\n  })\n};\nconst Stage = {\n  NULL: null\n};\nconst ActivePlayers = {\n  /**\r\n   * ALL\r\n   *\r\n   * The turn stays with one player, but any player can play (in any order)\r\n   * until the phase ends.\r\n   */\n  ALL: {\n    all: Stage.NULL\n  },\n  /**\r\n   * ALL_ONCE\r\n   *\r\n   * The turn stays with one player, but any player can play (once, and in any order).\r\n   * This is typically used in a phase where you want to elicit a response\r\n   * from every player in the game.\r\n   */\n  ALL_ONCE: {\n    all: Stage.NULL,\n    minMoves: 1,\n    maxMoves: 1\n  },\n  /**\r\n   * OTHERS\r\n   *\r\n   * The turn stays with one player, and every *other* player can play (in any order)\r\n   * until the phase ends.\r\n   */\n  OTHERS: {\n    others: Stage.NULL\n  },\n  /**\r\n   * OTHERS_ONCE\r\n   *\r\n   * The turn stays with one player, and every *other* player can play (once, and in any order).\r\n   * This is typically used in a phase where you want to elicit a response\r\n   * from every *other* player in the game.\r\n   */\n  OTHERS_ONCE: {\n    others: Stage.NULL,\n    minMoves: 1,\n    maxMoves: 1\n  }\n};\nexport { ActionCreators as A, makeMove as B, ActivePlayers as C, Enhance as E, FnWrap as F, GameMethod as G, InitTurnOrderState as I, MAKE_MOVE as M, NoClient as N, PATCH as P, REDO as R, Stage as S, TurnOrder as T, UpdateTurnOrderState as U, GetAPIs as a, supportDeprecatedMoveLimit as b, SetActivePlayers as c, UpdateActivePlayersOnceEmpty as d, error as e, PLUGIN as f, gameEvent as g, ProcessAction as h, info as i, UNDO as j, SYNC as k, UPDATE as l, RESET as m, INVALID_MOVE as n, GAME_EVENT as o, STRIP_TRANSIENTS as p, FlushAndValidate as q, stripTransients as r, sync as s, Setup as t, reset as u, undo as v, redo as w, PlayerView as x, patch as y, update as z };","map":{"version":3,"names":["produce","R","RandomPlugin","isPlainObject","MAKE_MOVE","GAME_EVENT","REDO","RESET","SYNC","UNDO","UPDATE","PATCH","PLUGIN","STRIP_TRANSIENTS","makeMove","type","args","playerID","credentials","payload","gameEvent","automaticGameEvent","automatic","sync","info","state","log","initialState","clientOnly","patch","prevStateID","stateID","deltalog","update","reset","undo","redo","plugin","stripTransients","ActionCreators","Object","freeze","__proto__","INVALID_MOVE","ImmerPlugin","name","fnWrap","move","context","_len","arguments","length","Array","_key","isInvalid","newG","G","result","GameMethod","Errors","Events","constructor","flow","ctx","dispatch","initialTurn","turn","updateTurnContext","undefined","maxEndedTurnsPerAction","numPlayers","api","_this","events","_private","eventNames","_len2","_key2","push","phase","currentPhase","currentTurn","calledFrom","currentMethod","error","Error","isUsed","methodType","unsetCurrentMethod","stateWithError","_ref","message","stack","plugins","data","EventQueue","i","event","turnHasEnded","endedTurns","MaxTurnEndings","CalledOutsideHook","gameover","TURN_ON_END","PHASE_ON_END","StageEventInOnEnd","PHASE_ON_BEGIN","StageEventInPhaseBegin","TURN_ON_BEGIN","StageEventInTurnBegin","EndTurnInOnEnd","PhaseEventInOnEnd","action","processEvent","EventsPlugin","noClient","_ref2","_ref3","method","_len3","_key3","dangerouslyFlushRawState","_ref4","_ref5","game","LogPlugin","flush","_ref6","setMetadata","metadata","setup","isSerializable","value","isArray","key","SerializablePlugin","_len4","_key4","process","env","NODE_ENV","production","logfn","console","errorfn","msg","CORE_PLUGINS","DEFAULT_PLUGINS","ProcessAction","opts","filter","forEach","pluginState","GetAPIs","_ref7","entries","reduce","apis","_ref8","FnWrap","methodToWrap","_ref9","Setup","Enhance","Flush","reverse","newData","NoClient","map","includes","IsInvalid","firstInvalidReturn","find","FlushAndValidate","updatedState","PlayerView","_ref10","_ref11","_ref12","playerView","supportDeprecatedMoveLimit","options","enforceMinMoves","moveLimit","minMoves","maxMoves","SetActivePlayers","arg","activePlayers","_prevActivePlayers","_nextActivePlayers","_activePlayersMinMoves","_activePlayersMaxMoves","v","Stage","NULL","next","revert","_activePlayersNumMoves","currentPlayer","ApplyActivePlayerArgument","others","playOrder","id","all","keys","UpdateActivePlayersOnceEmpty","lastIndex","slice","stage","getCurrentPlayer","playOrderPos","InitTurnOrderState","pluginAPIs","order","from","_","first","posType","UpdateTurnOrderState","endTurnArg","endPhase","indexOf","t","TurnOrder","DEFAULT","_ref13","_ref14","_ref15","CONTINUE","_ref16","_ref17","ONCE","_ref18","CUSTOM","_ref19","CUSTOM_FROM","playOrderField","_ref20","_ref21","ActivePlayers","ALL","ALL_ONCE","OTHERS","OTHERS_ONCE","A","B","C","E","F","I","M","N","P","S","T","U","a","b","c","d","e","f","g","h","j","k","l","m","n","o","p","q","r","s","u","w","x","y","z"],"sources":["/Users/aaron/Desktop/School/488_CMPSC/GUI-based-Web-Game-with-Cloud-Native-Infrastructure-Backend 3-21/upwardmobility/node_modules/boardgame.io/dist/esm/turn-order-8cc4909b.js"],"sourcesContent":["import produce from 'immer';\nimport { R as RandomPlugin } from './plugin-random-087f861e.js';\nimport isPlainObject from 'lodash.isplainobject';\n\n/*\r\n * Copyright 2017 The boardgame.io Authors\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\r\nconst MAKE_MOVE = 'MAKE_MOVE';\r\nconst GAME_EVENT = 'GAME_EVENT';\r\nconst REDO = 'REDO';\r\nconst RESET = 'RESET';\r\nconst SYNC = 'SYNC';\r\nconst UNDO = 'UNDO';\r\nconst UPDATE = 'UPDATE';\r\nconst PATCH = 'PATCH';\r\nconst PLUGIN = 'PLUGIN';\r\nconst STRIP_TRANSIENTS = 'STRIP_TRANSIENTS';\n\n/*\r\n * Copyright 2017 The boardgame.io Authors\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\r\n/**\r\n * Generate a move to be dispatched to the game move reducer.\r\n *\r\n * @param {string} type - The move type.\r\n * @param {Array}  args - Additional arguments.\r\n * @param {string}  playerID - The ID of the player making this action.\r\n * @param {string}  credentials - (optional) The credentials for the player making this action.\r\n */\r\nconst makeMove = (type, args, playerID, credentials) => ({\r\n    type: MAKE_MOVE,\r\n    payload: { type, args, playerID, credentials },\r\n});\r\n/**\r\n * Generate a game event to be dispatched to the flow reducer.\r\n *\r\n * @param {string} type - The event type.\r\n * @param {Array}  args - Additional arguments.\r\n * @param {string}  playerID - The ID of the player making this action.\r\n * @param {string}  credentials - (optional) The credentials for the player making this action.\r\n */\r\nconst gameEvent = (type, args, playerID, credentials) => ({\r\n    type: GAME_EVENT,\r\n    payload: { type, args, playerID, credentials },\r\n});\r\n/**\r\n * Generate an automatic game event that is a side-effect of a move.\r\n * @param {string} type - The event type.\r\n * @param {Array}  args - Additional arguments.\r\n * @param {string}  playerID - The ID of the player making this action.\r\n * @param {string}  credentials - (optional) The credentials for the player making this action.\r\n */\r\nconst automaticGameEvent = (type, args, playerID, credentials) => ({\r\n    type: GAME_EVENT,\r\n    payload: { type, args, playerID, credentials },\r\n    automatic: true,\r\n});\r\nconst sync = (info) => ({\r\n    type: SYNC,\r\n    state: info.state,\r\n    log: info.log,\r\n    initialState: info.initialState,\r\n    clientOnly: true,\r\n});\r\n/**\r\n * Used to update the Redux store's state with patch in response to\r\n * an action coming from another player.\r\n * @param prevStateID previous stateID\r\n * @param stateID stateID after this patch\r\n * @param {Operation[]} patch - The patch to apply.\r\n * @param {LogEntry[]} deltalog - A log delta.\r\n */\r\nconst patch = (prevStateID, stateID, patch, deltalog) => ({\r\n    type: PATCH,\r\n    prevStateID,\r\n    stateID,\r\n    patch,\r\n    deltalog,\r\n    clientOnly: true,\r\n});\r\n/**\r\n * Used to update the Redux store's state in response to\r\n * an action coming from another player.\r\n * @param {object} state - The state to restore.\r\n * @param {Array} deltalog - A log delta.\r\n */\r\nconst update = (state, deltalog) => ({\r\n    type: UPDATE,\r\n    state,\r\n    deltalog,\r\n    clientOnly: true,\r\n});\r\n/**\r\n * Used to reset the game state.\r\n * @param {object} state - The initial state.\r\n */\r\nconst reset = (state) => ({\r\n    type: RESET,\r\n    state,\r\n    clientOnly: true,\r\n});\r\n/**\r\n * Used to undo the last move.\r\n * @param {string}  playerID - The ID of the player making this action.\r\n * @param {string}  credentials - (optional) The credentials for the player making this action.\r\n */\r\nconst undo = (playerID, credentials) => ({\r\n    type: UNDO,\r\n    payload: { type: null, args: null, playerID, credentials },\r\n});\r\n/**\r\n * Used to redo the last undone move.\r\n * @param {string}  playerID - The ID of the player making this action.\r\n * @param {string}  credentials - (optional) The credentials for the player making this action.\r\n */\r\nconst redo = (playerID, credentials) => ({\r\n    type: REDO,\r\n    payload: { type: null, args: null, playerID, credentials },\r\n});\r\n/**\r\n * Allows plugins to define their own actions and intercept them.\r\n */\r\nconst plugin = (type, args, playerID, credentials) => ({\r\n    type: PLUGIN,\r\n    payload: { type, args, playerID, credentials },\r\n});\r\n/**\r\n * Private action used to strip transient metadata (e.g. errors) from the game\r\n * state.\r\n */\r\nconst stripTransients = () => ({\r\n    type: STRIP_TRANSIENTS,\r\n});\n\nvar ActionCreators = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  makeMove: makeMove,\n  gameEvent: gameEvent,\n  automaticGameEvent: automaticGameEvent,\n  sync: sync,\n  patch: patch,\n  update: update,\n  reset: reset,\n  undo: undo,\n  redo: redo,\n  plugin: plugin,\n  stripTransients: stripTransients\n});\n\n/**\r\n * Moves can return this when they want to indicate\r\n * that the combination of arguments is illegal and\r\n * the move ought to be discarded.\r\n */\r\nconst INVALID_MOVE = 'INVALID_MOVE';\n\n/*\r\n * Copyright 2018 The boardgame.io Authors\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\r\n/**\r\n * Plugin that allows using Immer to make immutable changes\r\n * to G by just mutating it.\r\n */\r\nconst ImmerPlugin = {\r\n    name: 'plugin-immer',\r\n    fnWrap: (move) => (context, ...args) => {\r\n        let isInvalid = false;\r\n        const newG = produce(context.G, (G) => {\r\n            const result = move({ ...context, G }, ...args);\r\n            if (result === INVALID_MOVE) {\r\n                isInvalid = true;\r\n                return;\r\n            }\r\n            return result;\r\n        });\r\n        if (isInvalid)\r\n            return INVALID_MOVE;\r\n        return newG;\r\n    },\r\n};\n\nvar GameMethod;\r\n(function (GameMethod) {\r\n    GameMethod[\"MOVE\"] = \"MOVE\";\r\n    GameMethod[\"GAME_ON_END\"] = \"GAME_ON_END\";\r\n    GameMethod[\"PHASE_ON_BEGIN\"] = \"PHASE_ON_BEGIN\";\r\n    GameMethod[\"PHASE_ON_END\"] = \"PHASE_ON_END\";\r\n    GameMethod[\"TURN_ON_BEGIN\"] = \"TURN_ON_BEGIN\";\r\n    GameMethod[\"TURN_ON_MOVE\"] = \"TURN_ON_MOVE\";\r\n    GameMethod[\"TURN_ON_END\"] = \"TURN_ON_END\";\r\n})(GameMethod || (GameMethod = {}));\n\n/*\r\n * Copyright 2018 The boardgame.io Authors\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\r\nvar Errors;\r\n(function (Errors) {\r\n    Errors[\"CalledOutsideHook\"] = \"Events must be called from moves or the `onBegin`, `onEnd`, and `onMove` hooks.\\nThis error probably means you called an event from other game code, like an `endIf` trigger or one of the `turn.order` methods.\";\r\n    Errors[\"EndTurnInOnEnd\"] = \"`endTurn` is disallowed in `onEnd` hooks \\u2014 the turn is already ending.\";\r\n    Errors[\"MaxTurnEndings\"] = \"Maximum number of turn endings exceeded for this update.\\nThis likely means game code is triggering an infinite loop.\";\r\n    Errors[\"PhaseEventInOnEnd\"] = \"`setPhase` & `endPhase` are disallowed in a phase\\u2019s `onEnd` hook \\u2014 the phase is already ending.\\nIf you\\u2019re trying to dynamically choose the next phase when a phase ends, use the phase\\u2019s `next` trigger.\";\r\n    Errors[\"StageEventInOnEnd\"] = \"`setStage`, `endStage` & `setActivePlayers` are disallowed in `onEnd` hooks.\";\r\n    Errors[\"StageEventInPhaseBegin\"] = \"`setStage`, `endStage` & `setActivePlayers` are disallowed in a phase\\u2019s `onBegin` hook.\\nUse `setActivePlayers` in a `turn.onBegin` hook or declare stages with `turn.activePlayers` instead.\";\r\n    Errors[\"StageEventInTurnBegin\"] = \"`setStage` & `endStage` are disallowed in `turn.onBegin`.\\nUse `setActivePlayers` or declare stages with `turn.activePlayers` instead.\";\r\n})(Errors || (Errors = {}));\r\n/**\r\n * Events\r\n */\r\nclass Events {\r\n    constructor(flow, ctx, playerID) {\r\n        this.flow = flow;\r\n        this.playerID = playerID;\r\n        this.dispatch = [];\r\n        this.initialTurn = ctx.turn;\r\n        this.updateTurnContext(ctx, undefined);\r\n        // This is an arbitrarily large upper threshold, which could be made\r\n        // configurable via a game option if the need arises.\r\n        this.maxEndedTurnsPerAction = ctx.numPlayers * 100;\r\n    }\r\n    api() {\r\n        const events = {\r\n            _private: this,\r\n        };\r\n        for (const type of this.flow.eventNames) {\r\n            events[type] = (...args) => {\r\n                this.dispatch.push({\r\n                    type,\r\n                    args,\r\n                    phase: this.currentPhase,\r\n                    turn: this.currentTurn,\r\n                    calledFrom: this.currentMethod,\r\n                    // Used to capture a stack trace in case it is needed later.\r\n                    error: new Error('Events Plugin Error'),\r\n                });\r\n            };\r\n        }\r\n        return events;\r\n    }\r\n    isUsed() {\r\n        return this.dispatch.length > 0;\r\n    }\r\n    updateTurnContext(ctx, methodType) {\r\n        this.currentPhase = ctx.phase;\r\n        this.currentTurn = ctx.turn;\r\n        this.currentMethod = methodType;\r\n    }\r\n    unsetCurrentMethod() {\r\n        this.currentMethod = undefined;\r\n    }\r\n    /**\r\n     * Updates ctx with the triggered events.\r\n     * @param {object} state - The state object { G, ctx }.\r\n     */\r\n    update(state) {\r\n        const initialState = state;\r\n        const stateWithError = ({ stack }, message) => ({\r\n            ...initialState,\r\n            plugins: {\r\n                ...initialState.plugins,\r\n                events: {\r\n                    ...initialState.plugins.events,\r\n                    data: { error: message + '\\n' + stack },\r\n                },\r\n            },\r\n        });\r\n        EventQueue: for (let i = 0; i < this.dispatch.length; i++) {\r\n            const event = this.dispatch[i];\r\n            const turnHasEnded = event.turn !== state.ctx.turn;\r\n            // This protects against potential infinite loops if specific events are called on hooks.\r\n            // The moment we exceed the defined threshold, we just bail out of all phases.\r\n            const endedTurns = this.currentTurn - this.initialTurn;\r\n            if (endedTurns >= this.maxEndedTurnsPerAction) {\r\n                return stateWithError(event.error, Errors.MaxTurnEndings);\r\n            }\r\n            if (event.calledFrom === undefined) {\r\n                return stateWithError(event.error, Errors.CalledOutsideHook);\r\n            }\r\n            // Stop processing events once the game has finished.\r\n            if (state.ctx.gameover)\r\n                break EventQueue;\r\n            switch (event.type) {\r\n                case 'endStage':\r\n                case 'setStage':\r\n                case 'setActivePlayers': {\r\n                    switch (event.calledFrom) {\r\n                        // Disallow all stage events in onEnd and phase.onBegin hooks.\r\n                        case GameMethod.TURN_ON_END:\r\n                        case GameMethod.PHASE_ON_END:\r\n                            return stateWithError(event.error, Errors.StageEventInOnEnd);\r\n                        case GameMethod.PHASE_ON_BEGIN:\r\n                            return stateWithError(event.error, Errors.StageEventInPhaseBegin);\r\n                        // Disallow setStage & endStage in turn.onBegin hooks.\r\n                        case GameMethod.TURN_ON_BEGIN:\r\n                            if (event.type === 'setActivePlayers')\r\n                                break;\r\n                            return stateWithError(event.error, Errors.StageEventInTurnBegin);\r\n                    }\r\n                    // If the turn already ended, don't try to process stage events.\r\n                    if (turnHasEnded)\r\n                        continue EventQueue;\r\n                    break;\r\n                }\r\n                case 'endTurn': {\r\n                    if (event.calledFrom === GameMethod.TURN_ON_END ||\r\n                        event.calledFrom === GameMethod.PHASE_ON_END) {\r\n                        return stateWithError(event.error, Errors.EndTurnInOnEnd);\r\n                    }\r\n                    // If the turn already ended some other way,\r\n                    // don't try to end the turn again.\r\n                    if (turnHasEnded)\r\n                        continue EventQueue;\r\n                    break;\r\n                }\r\n                case 'endPhase':\r\n                case 'setPhase': {\r\n                    if (event.calledFrom === GameMethod.PHASE_ON_END) {\r\n                        return stateWithError(event.error, Errors.PhaseEventInOnEnd);\r\n                    }\r\n                    // If the phase already ended some other way,\r\n                    // don't try to end the phase again.\r\n                    if (event.phase !== state.ctx.phase)\r\n                        continue EventQueue;\r\n                    break;\r\n                }\r\n            }\r\n            const action = automaticGameEvent(event.type, event.args, this.playerID);\r\n            state = this.flow.processEvent(state, action);\r\n        }\r\n        return state;\r\n    }\r\n}\n\n/*\r\n * Copyright 2020 The boardgame.io Authors\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\r\nconst EventsPlugin = {\r\n    name: 'events',\r\n    noClient: ({ api }) => api._private.isUsed(),\r\n    isInvalid: ({ data }) => data.error || false,\r\n    // Update the events plugin’s internal turn context each time a move\r\n    // or hook is called. This allows events called after turn or phase\r\n    // endings to dispatch the current turn and phase correctly.\r\n    fnWrap: (method, methodType) => (context, ...args) => {\r\n        const api = context.events;\r\n        if (api)\r\n            api._private.updateTurnContext(context.ctx, methodType);\r\n        const G = method(context, ...args);\r\n        if (api)\r\n            api._private.unsetCurrentMethod();\r\n        return G;\r\n    },\r\n    dangerouslyFlushRawState: ({ state, api }) => api._private.update(state),\r\n    api: ({ game, ctx, playerID }) => new Events(game.flow, ctx, playerID).api(),\r\n};\n\n/*\r\n * Copyright 2018 The boardgame.io Authors\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\r\n/**\r\n * Plugin that makes it possible to add metadata to log entries.\r\n * During a move, you can set metadata using ctx.log.setMetadata and it will be\r\n * available on the log entry for that move.\r\n */\r\nconst LogPlugin = {\r\n    name: 'log',\r\n    flush: () => ({}),\r\n    api: ({ data }) => {\r\n        return {\r\n            setMetadata: (metadata) => {\r\n                data.metadata = metadata;\r\n            },\r\n        };\r\n    },\r\n    setup: () => ({}),\r\n};\n\n/**\r\n * Check if a value can be serialized (e.g. using `JSON.stringify`).\r\n * Adapted from: https://stackoverflow.com/a/30712764/3829557\r\n */\r\nfunction isSerializable(value) {\r\n    // Primitives are OK.\r\n    if (value === undefined ||\r\n        value === null ||\r\n        typeof value === 'boolean' ||\r\n        typeof value === 'number' ||\r\n        typeof value === 'string') {\r\n        return true;\r\n    }\r\n    // A non-primitive value that is neither a POJO or an array cannot be serialized.\r\n    if (!isPlainObject(value) && !Array.isArray(value)) {\r\n        return false;\r\n    }\r\n    // Recurse entries if the value is an object or array.\r\n    for (const key in value) {\r\n        if (!isSerializable(value[key]))\r\n            return false;\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Plugin that checks whether state is serializable, in order to avoid\r\n * network serialization bugs.\r\n */\r\nconst SerializablePlugin = {\r\n    name: 'plugin-serializable',\r\n    fnWrap: (move) => (context, ...args) => {\r\n        const result = move(context, ...args);\r\n        // Check state in non-production environments.\r\n        if (process.env.NODE_ENV !== 'production' && !isSerializable(result)) {\r\n            throw new Error('Move state is not JSON-serialiazable.\\n' +\r\n                'See https://boardgame.io/documentation/#/?id=state for more information.');\r\n        }\r\n        return result;\r\n    },\r\n};\n\n/*\r\n * Copyright 2018 The boardgame.io Authors\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\r\nconst production = process.env.NODE_ENV === 'production';\r\nconst logfn = production ? () => { } : (...msg) => console.log(...msg);\r\nconst errorfn = (...msg) => console.error(...msg);\r\nfunction info(msg) {\r\n    logfn(`INFO: ${msg}`);\r\n}\r\nfunction error(error) {\r\n    errorfn('ERROR:', error);\r\n}\n\n/*\r\n * Copyright 2018 The boardgame.io Authors\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\r\n/**\r\n * List of plugins that are always added.\r\n */\r\nconst CORE_PLUGINS = [ImmerPlugin, RandomPlugin, LogPlugin, SerializablePlugin];\r\nconst DEFAULT_PLUGINS = [...CORE_PLUGINS, EventsPlugin];\r\n/**\r\n * Allow plugins to intercept actions and process them.\r\n */\r\nconst ProcessAction = (state, action, opts) => {\r\n    // TODO(#723): Extend error handling to plugins.\r\n    opts.game.plugins\r\n        .filter((plugin) => plugin.action !== undefined)\r\n        .filter((plugin) => plugin.name === action.payload.type)\r\n        .forEach((plugin) => {\r\n        const name = plugin.name;\r\n        const pluginState = state.plugins[name] || { data: {} };\r\n        const data = plugin.action(pluginState.data, action.payload);\r\n        state = {\r\n            ...state,\r\n            plugins: {\r\n                ...state.plugins,\r\n                [name]: { ...pluginState, data },\r\n            },\r\n        };\r\n    });\r\n    return state;\r\n};\r\n/**\r\n * The APIs created by various plugins are stored in the plugins\r\n * section of the state object:\r\n *\r\n * {\r\n *   G: {},\r\n *   ctx: {},\r\n *   plugins: {\r\n *     plugin-a: {\r\n *       data: {},  // this is generated by the plugin at Setup / Flush.\r\n *       api: {},   // this is ephemeral and generated by Enhance.\r\n *     }\r\n *   }\r\n * }\r\n *\r\n * This function retrieves plugin APIs and returns them as an object\r\n * for consumption as used by move contexts.\r\n */\r\nconst GetAPIs = ({ plugins }) => Object.entries(plugins || {}).reduce((apis, [name, { api }]) => {\r\n    apis[name] = api;\r\n    return apis;\r\n}, {});\r\n/**\r\n * Applies the provided plugins to the given move / flow function.\r\n *\r\n * @param methodToWrap - The move function or hook to apply the plugins to.\r\n * @param methodType - The type of the move or hook being wrapped.\r\n * @param plugins - The list of plugins.\r\n */\r\nconst FnWrap = (methodToWrap, methodType, plugins) => {\r\n    return [...CORE_PLUGINS, ...plugins, EventsPlugin]\r\n        .filter((plugin) => plugin.fnWrap !== undefined)\r\n        .reduce((method, { fnWrap }) => fnWrap(method, methodType), methodToWrap);\r\n};\r\n/**\r\n * Allows the plugin to generate its initial state.\r\n */\r\nconst Setup = (state, opts) => {\r\n    [...DEFAULT_PLUGINS, ...opts.game.plugins]\r\n        .filter((plugin) => plugin.setup !== undefined)\r\n        .forEach((plugin) => {\r\n        const name = plugin.name;\r\n        const data = plugin.setup({\r\n            G: state.G,\r\n            ctx: state.ctx,\r\n            game: opts.game,\r\n        });\r\n        state = {\r\n            ...state,\r\n            plugins: {\r\n                ...state.plugins,\r\n                [name]: { data },\r\n            },\r\n        };\r\n    });\r\n    return state;\r\n};\r\n/**\r\n * Invokes the plugin before a move or event.\r\n * The API that the plugin generates is stored inside\r\n * the `plugins` section of the state (which is subsequently\r\n * merged into ctx).\r\n */\r\nconst Enhance = (state, opts) => {\r\n    [...DEFAULT_PLUGINS, ...opts.game.plugins]\r\n        .filter((plugin) => plugin.api !== undefined)\r\n        .forEach((plugin) => {\r\n        const name = plugin.name;\r\n        const pluginState = state.plugins[name] || { data: {} };\r\n        const api = plugin.api({\r\n            G: state.G,\r\n            ctx: state.ctx,\r\n            data: pluginState.data,\r\n            game: opts.game,\r\n            playerID: opts.playerID,\r\n        });\r\n        state = {\r\n            ...state,\r\n            plugins: {\r\n                ...state.plugins,\r\n                [name]: { ...pluginState, api },\r\n            },\r\n        };\r\n    });\r\n    return state;\r\n};\r\n/**\r\n * Allows plugins to update their state after a move / event.\r\n */\r\nconst Flush = (state, opts) => {\r\n    // We flush the events plugin first, then custom plugins and the core plugins.\r\n    // This means custom plugins cannot use the events API but will be available in event hooks.\r\n    // Note that plugins are flushed in reverse, to allow custom plugins calling each other.\r\n    [...CORE_PLUGINS, ...opts.game.plugins, EventsPlugin]\r\n        .reverse()\r\n        .forEach((plugin) => {\r\n        const name = plugin.name;\r\n        const pluginState = state.plugins[name] || { data: {} };\r\n        if (plugin.flush) {\r\n            const newData = plugin.flush({\r\n                G: state.G,\r\n                ctx: state.ctx,\r\n                game: opts.game,\r\n                api: pluginState.api,\r\n                data: pluginState.data,\r\n            });\r\n            state = {\r\n                ...state,\r\n                plugins: {\r\n                    ...state.plugins,\r\n                    [plugin.name]: { data: newData },\r\n                },\r\n            };\r\n        }\r\n        else if (plugin.dangerouslyFlushRawState) {\r\n            state = plugin.dangerouslyFlushRawState({\r\n                state,\r\n                game: opts.game,\r\n                api: pluginState.api,\r\n                data: pluginState.data,\r\n            });\r\n            // Remove everything other than data.\r\n            const data = state.plugins[name].data;\r\n            state = {\r\n                ...state,\r\n                plugins: {\r\n                    ...state.plugins,\r\n                    [plugin.name]: { data },\r\n                },\r\n            };\r\n        }\r\n    });\r\n    return state;\r\n};\r\n/**\r\n * Allows plugins to indicate if they should not be materialized on the client.\r\n * This will cause the client to discard the state update and wait for the\r\n * master instead.\r\n */\r\nconst NoClient = (state, opts) => {\r\n    return [...DEFAULT_PLUGINS, ...opts.game.plugins]\r\n        .filter((plugin) => plugin.noClient !== undefined)\r\n        .map((plugin) => {\r\n        const name = plugin.name;\r\n        const pluginState = state.plugins[name];\r\n        if (pluginState) {\r\n            return plugin.noClient({\r\n                G: state.G,\r\n                ctx: state.ctx,\r\n                game: opts.game,\r\n                api: pluginState.api,\r\n                data: pluginState.data,\r\n            });\r\n        }\r\n        return false;\r\n    })\r\n        .includes(true);\r\n};\r\n/**\r\n * Allows plugins to indicate if the entire action should be thrown out\r\n * as invalid. This will cancel the entire state update.\r\n */\r\nconst IsInvalid = (state, opts) => {\r\n    const firstInvalidReturn = [...DEFAULT_PLUGINS, ...opts.game.plugins]\r\n        .filter((plugin) => plugin.isInvalid !== undefined)\r\n        .map((plugin) => {\r\n        const { name } = plugin;\r\n        const pluginState = state.plugins[name];\r\n        const message = plugin.isInvalid({\r\n            G: state.G,\r\n            ctx: state.ctx,\r\n            game: opts.game,\r\n            data: pluginState && pluginState.data,\r\n        });\r\n        return message ? { plugin: name, message } : false;\r\n    })\r\n        .find((value) => value);\r\n    return firstInvalidReturn || false;\r\n};\r\n/**\r\n * Update plugin state after move/event & check if plugins consider the update to be valid.\r\n * @returns Tuple of `[updatedState]` or `[originalState, invalidError]`.\r\n */\r\nconst FlushAndValidate = (state, opts) => {\r\n    const updatedState = Flush(state, opts);\r\n    const isInvalid = IsInvalid(updatedState, opts);\r\n    if (!isInvalid)\r\n        return [updatedState];\r\n    const { plugin, message } = isInvalid;\r\n    error(`${plugin} plugin declared action invalid:\\n${message}`);\r\n    return [state, isInvalid];\r\n};\r\n/**\r\n * Allows plugins to customize their data for specific players.\r\n * For example, a plugin may want to share no data with the client, or\r\n * want to keep some player data secret from opponents.\r\n */\r\nconst PlayerView = ({ G, ctx, plugins = {} }, { game, playerID }) => {\r\n    [...DEFAULT_PLUGINS, ...game.plugins].forEach(({ name, playerView }) => {\r\n        if (!playerView)\r\n            return;\r\n        const { data } = plugins[name] || { data: {} };\r\n        const newData = playerView({ G, ctx, game, data, playerID });\r\n        plugins = {\r\n            ...plugins,\r\n            [name]: { data: newData },\r\n        };\r\n    });\r\n    return plugins;\r\n};\n\n/**\r\n * Adjust the given options to use the new minMoves/maxMoves if a legacy moveLimit was given\r\n * @param options The options object to apply backwards compatibility to\r\n * @param enforceMinMoves Use moveLimit to set both minMoves and maxMoves\r\n */\r\nfunction supportDeprecatedMoveLimit(options, enforceMinMoves = false) {\r\n    if (options.moveLimit) {\r\n        if (enforceMinMoves) {\r\n            options.minMoves = options.moveLimit;\r\n        }\r\n        options.maxMoves = options.moveLimit;\r\n        delete options.moveLimit;\r\n    }\r\n}\n\n/*\r\n * Copyright 2017 The boardgame.io Authors\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\r\nfunction SetActivePlayers(ctx, arg) {\r\n    let activePlayers = {};\r\n    let _prevActivePlayers = [];\r\n    let _nextActivePlayers = null;\r\n    let _activePlayersMinMoves = {};\r\n    let _activePlayersMaxMoves = {};\r\n    if (Array.isArray(arg)) {\r\n        // support a simple array of player IDs as active players\r\n        const value = {};\r\n        arg.forEach((v) => (value[v] = Stage.NULL));\r\n        activePlayers = value;\r\n    }\r\n    else {\r\n        // process active players argument object\r\n        // stages previously did not enforce minMoves, this behaviour is kept intentionally\r\n        supportDeprecatedMoveLimit(arg);\r\n        if (arg.next) {\r\n            _nextActivePlayers = arg.next;\r\n        }\r\n        if (arg.revert) {\r\n            _prevActivePlayers = [\r\n                ...ctx._prevActivePlayers,\r\n                {\r\n                    activePlayers: ctx.activePlayers,\r\n                    _activePlayersMinMoves: ctx._activePlayersMinMoves,\r\n                    _activePlayersMaxMoves: ctx._activePlayersMaxMoves,\r\n                    _activePlayersNumMoves: ctx._activePlayersNumMoves,\r\n                },\r\n            ];\r\n        }\r\n        if (arg.currentPlayer !== undefined) {\r\n            ApplyActivePlayerArgument(activePlayers, _activePlayersMinMoves, _activePlayersMaxMoves, ctx.currentPlayer, arg.currentPlayer);\r\n        }\r\n        if (arg.others !== undefined) {\r\n            for (let i = 0; i < ctx.playOrder.length; i++) {\r\n                const id = ctx.playOrder[i];\r\n                if (id !== ctx.currentPlayer) {\r\n                    ApplyActivePlayerArgument(activePlayers, _activePlayersMinMoves, _activePlayersMaxMoves, id, arg.others);\r\n                }\r\n            }\r\n        }\r\n        if (arg.all !== undefined) {\r\n            for (let i = 0; i < ctx.playOrder.length; i++) {\r\n                const id = ctx.playOrder[i];\r\n                ApplyActivePlayerArgument(activePlayers, _activePlayersMinMoves, _activePlayersMaxMoves, id, arg.all);\r\n            }\r\n        }\r\n        if (arg.value) {\r\n            for (const id in arg.value) {\r\n                ApplyActivePlayerArgument(activePlayers, _activePlayersMinMoves, _activePlayersMaxMoves, id, arg.value[id]);\r\n            }\r\n        }\r\n        if (arg.minMoves) {\r\n            for (const id in activePlayers) {\r\n                if (_activePlayersMinMoves[id] === undefined) {\r\n                    _activePlayersMinMoves[id] = arg.minMoves;\r\n                }\r\n            }\r\n        }\r\n        if (arg.maxMoves) {\r\n            for (const id in activePlayers) {\r\n                if (_activePlayersMaxMoves[id] === undefined) {\r\n                    _activePlayersMaxMoves[id] = arg.maxMoves;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (Object.keys(activePlayers).length === 0) {\r\n        activePlayers = null;\r\n    }\r\n    if (Object.keys(_activePlayersMinMoves).length === 0) {\r\n        _activePlayersMinMoves = null;\r\n    }\r\n    if (Object.keys(_activePlayersMaxMoves).length === 0) {\r\n        _activePlayersMaxMoves = null;\r\n    }\r\n    const _activePlayersNumMoves = {};\r\n    for (const id in activePlayers) {\r\n        _activePlayersNumMoves[id] = 0;\r\n    }\r\n    return {\r\n        ...ctx,\r\n        activePlayers,\r\n        _activePlayersMinMoves,\r\n        _activePlayersMaxMoves,\r\n        _activePlayersNumMoves,\r\n        _prevActivePlayers,\r\n        _nextActivePlayers,\r\n    };\r\n}\r\n/**\r\n * Update activePlayers, setting it to previous, next or null values\r\n * when it becomes empty.\r\n * @param ctx\r\n */\r\nfunction UpdateActivePlayersOnceEmpty(ctx) {\r\n    let { activePlayers, _activePlayersMinMoves, _activePlayersMaxMoves, _activePlayersNumMoves, _prevActivePlayers, _nextActivePlayers, } = ctx;\r\n    if (activePlayers && Object.keys(activePlayers).length === 0) {\r\n        if (_nextActivePlayers) {\r\n            ctx = SetActivePlayers(ctx, _nextActivePlayers);\r\n            ({\r\n                activePlayers,\r\n                _activePlayersMinMoves,\r\n                _activePlayersMaxMoves,\r\n                _activePlayersNumMoves,\r\n                _prevActivePlayers,\r\n            } = ctx);\r\n        }\r\n        else if (_prevActivePlayers.length > 0) {\r\n            const lastIndex = _prevActivePlayers.length - 1;\r\n            ({\r\n                activePlayers,\r\n                _activePlayersMinMoves,\r\n                _activePlayersMaxMoves,\r\n                _activePlayersNumMoves,\r\n            } = _prevActivePlayers[lastIndex]);\r\n            _prevActivePlayers = _prevActivePlayers.slice(0, lastIndex);\r\n        }\r\n        else {\r\n            activePlayers = null;\r\n            _activePlayersMinMoves = null;\r\n            _activePlayersMaxMoves = null;\r\n        }\r\n    }\r\n    return {\r\n        ...ctx,\r\n        activePlayers,\r\n        _activePlayersMinMoves,\r\n        _activePlayersMaxMoves,\r\n        _activePlayersNumMoves,\r\n        _prevActivePlayers,\r\n    };\r\n}\r\n/**\r\n * Apply an active player argument to the given player ID\r\n * @param {Object} activePlayers\r\n * @param {Object} _activePlayersMinMoves\r\n * @param {Object} _activePlayersMaxMoves\r\n * @param {String} playerID The player to apply the parameter to\r\n * @param {(String|Object)} arg An active player argument\r\n */\r\nfunction ApplyActivePlayerArgument(activePlayers, _activePlayersMinMoves, _activePlayersMaxMoves, playerID, arg) {\r\n    if (typeof arg !== 'object' || arg === Stage.NULL) {\r\n        arg = { stage: arg };\r\n    }\r\n    if (arg.stage !== undefined) {\r\n        // stages previously did not enforce minMoves, this behaviour is kept intentionally\r\n        supportDeprecatedMoveLimit(arg);\r\n        activePlayers[playerID] = arg.stage;\r\n        if (arg.minMoves)\r\n            _activePlayersMinMoves[playerID] = arg.minMoves;\r\n        if (arg.maxMoves)\r\n            _activePlayersMaxMoves[playerID] = arg.maxMoves;\r\n    }\r\n}\r\n/**\r\n * Converts a playOrderPos index into its value in playOrder.\r\n * @param {Array} playOrder - An array of player ID's.\r\n * @param {number} playOrderPos - An index into the above.\r\n */\r\nfunction getCurrentPlayer(playOrder, playOrderPos) {\r\n    // convert to string in case playOrder is set to number[]\r\n    return playOrder[playOrderPos] + '';\r\n}\r\n/**\r\n * Called at the start of a turn to initialize turn order state.\r\n *\r\n * TODO: This is called inside StartTurn, which is called from\r\n * both UpdateTurn and StartPhase (so it's called at the beginning\r\n * of a new phase as well as between turns). We should probably\r\n * split it into two.\r\n */\r\nfunction InitTurnOrderState(state, turn) {\r\n    let { G, ctx } = state;\r\n    const { numPlayers } = ctx;\r\n    const pluginAPIs = GetAPIs(state);\r\n    const context = { ...pluginAPIs, G, ctx };\r\n    const order = turn.order;\r\n    let playOrder = [...Array.from({ length: numPlayers })].map((_, i) => i + '');\r\n    if (order.playOrder !== undefined) {\r\n        playOrder = order.playOrder(context);\r\n    }\r\n    const playOrderPos = order.first(context);\r\n    const posType = typeof playOrderPos;\r\n    if (posType !== 'number') {\r\n        error(`invalid value returned by turn.order.first — expected number got ${posType} “${playOrderPos}”.`);\r\n    }\r\n    const currentPlayer = getCurrentPlayer(playOrder, playOrderPos);\r\n    ctx = { ...ctx, currentPlayer, playOrderPos, playOrder };\r\n    ctx = SetActivePlayers(ctx, turn.activePlayers || {});\r\n    return ctx;\r\n}\r\n/**\r\n * Called at the end of each turn to update the turn order state.\r\n * @param {object} G - The game object G.\r\n * @param {object} ctx - The game object ctx.\r\n * @param {object} turn - A turn object for this phase.\r\n * @param {string} endTurnArg - An optional argument to endTurn that\r\n                                may specify the next player.\r\n */\r\nfunction UpdateTurnOrderState(state, currentPlayer, turn, endTurnArg) {\r\n    const order = turn.order;\r\n    let { G, ctx } = state;\r\n    let playOrderPos = ctx.playOrderPos;\r\n    let endPhase = false;\r\n    if (endTurnArg && endTurnArg !== true) {\r\n        if (typeof endTurnArg !== 'object') {\r\n            error(`invalid argument to endTurn: ${endTurnArg}`);\r\n        }\r\n        Object.keys(endTurnArg).forEach((arg) => {\r\n            switch (arg) {\r\n                case 'remove':\r\n                    currentPlayer = getCurrentPlayer(ctx.playOrder, playOrderPos);\r\n                    break;\r\n                case 'next':\r\n                    playOrderPos = ctx.playOrder.indexOf(endTurnArg.next);\r\n                    currentPlayer = endTurnArg.next;\r\n                    break;\r\n                default:\r\n                    error(`invalid argument to endTurn: ${arg}`);\r\n            }\r\n        });\r\n    }\r\n    else {\r\n        const pluginAPIs = GetAPIs(state);\r\n        const context = { ...pluginAPIs, G, ctx };\r\n        const t = order.next(context);\r\n        const type = typeof t;\r\n        if (t !== undefined && type !== 'number') {\r\n            error(`invalid value returned by turn.order.next — expected number or undefined got ${type} “${t}”.`);\r\n        }\r\n        if (t === undefined) {\r\n            endPhase = true;\r\n        }\r\n        else {\r\n            playOrderPos = t;\r\n            currentPlayer = getCurrentPlayer(ctx.playOrder, playOrderPos);\r\n        }\r\n    }\r\n    ctx = {\r\n        ...ctx,\r\n        playOrderPos,\r\n        currentPlayer,\r\n    };\r\n    return { endPhase, ctx };\r\n}\r\n/**\r\n * Set of different turn orders possible in a phase.\r\n * These are meant to be passed to the `turn` setting\r\n * in the flow objects.\r\n *\r\n * Each object defines the first player when the phase / game\r\n * begins, and also a function `next` to determine who the\r\n * next player is when the turn ends.\r\n *\r\n * The phase ends if next() returns undefined.\r\n */\r\nconst TurnOrder = {\r\n    /**\r\n     * DEFAULT\r\n     *\r\n     * The default round-robin turn order.\r\n     */\r\n    DEFAULT: {\r\n        first: ({ ctx }) => ctx.turn === 0\r\n            ? ctx.playOrderPos\r\n            : (ctx.playOrderPos + 1) % ctx.playOrder.length,\r\n        next: ({ ctx }) => (ctx.playOrderPos + 1) % ctx.playOrder.length,\r\n    },\r\n    /**\r\n     * RESET\r\n     *\r\n     * Similar to DEFAULT, but starts from 0 each time.\r\n     */\r\n    RESET: {\r\n        first: () => 0,\r\n        next: ({ ctx }) => (ctx.playOrderPos + 1) % ctx.playOrder.length,\r\n    },\r\n    /**\r\n     * CONTINUE\r\n     *\r\n     * Similar to DEFAULT, but starts with the player who ended the last phase.\r\n     */\r\n    CONTINUE: {\r\n        first: ({ ctx }) => ctx.playOrderPos,\r\n        next: ({ ctx }) => (ctx.playOrderPos + 1) % ctx.playOrder.length,\r\n    },\r\n    /**\r\n     * ONCE\r\n     *\r\n     * Another round-robin turn order, but goes around just once.\r\n     * The phase ends after all players have played.\r\n     */\r\n    ONCE: {\r\n        first: () => 0,\r\n        next: ({ ctx }) => {\r\n            if (ctx.playOrderPos < ctx.playOrder.length - 1) {\r\n                return ctx.playOrderPos + 1;\r\n            }\r\n        },\r\n    },\r\n    /**\r\n     * CUSTOM\r\n     *\r\n     * Identical to DEFAULT, but also sets playOrder at the\r\n     * beginning of the phase.\r\n     *\r\n     * @param {Array} playOrder - The play order.\r\n     */\r\n    CUSTOM: (playOrder) => ({\r\n        playOrder: () => playOrder,\r\n        first: () => 0,\r\n        next: ({ ctx }) => (ctx.playOrderPos + 1) % ctx.playOrder.length,\r\n    }),\r\n    /**\r\n     * CUSTOM_FROM\r\n     *\r\n     * Identical to DEFAULT, but also sets playOrder at the\r\n     * beginning of the phase to a value specified by a field\r\n     * in G.\r\n     *\r\n     * @param {string} playOrderField - Field in G.\r\n     */\r\n    CUSTOM_FROM: (playOrderField) => ({\r\n        playOrder: ({ G }) => G[playOrderField],\r\n        first: () => 0,\r\n        next: ({ ctx }) => (ctx.playOrderPos + 1) % ctx.playOrder.length,\r\n    }),\r\n};\r\nconst Stage = {\r\n    NULL: null,\r\n};\r\nconst ActivePlayers = {\r\n    /**\r\n     * ALL\r\n     *\r\n     * The turn stays with one player, but any player can play (in any order)\r\n     * until the phase ends.\r\n     */\r\n    ALL: { all: Stage.NULL },\r\n    /**\r\n     * ALL_ONCE\r\n     *\r\n     * The turn stays with one player, but any player can play (once, and in any order).\r\n     * This is typically used in a phase where you want to elicit a response\r\n     * from every player in the game.\r\n     */\r\n    ALL_ONCE: { all: Stage.NULL, minMoves: 1, maxMoves: 1 },\r\n    /**\r\n     * OTHERS\r\n     *\r\n     * The turn stays with one player, and every *other* player can play (in any order)\r\n     * until the phase ends.\r\n     */\r\n    OTHERS: { others: Stage.NULL },\r\n    /**\r\n     * OTHERS_ONCE\r\n     *\r\n     * The turn stays with one player, and every *other* player can play (once, and in any order).\r\n     * This is typically used in a phase where you want to elicit a response\r\n     * from every *other* player in the game.\r\n     */\r\n    OTHERS_ONCE: { others: Stage.NULL, minMoves: 1, maxMoves: 1 },\r\n};\n\nexport { ActionCreators as A, makeMove as B, ActivePlayers as C, Enhance as E, FnWrap as F, GameMethod as G, InitTurnOrderState as I, MAKE_MOVE as M, NoClient as N, PATCH as P, REDO as R, Stage as S, TurnOrder as T, UpdateTurnOrderState as U, GetAPIs as a, supportDeprecatedMoveLimit as b, SetActivePlayers as c, UpdateActivePlayersOnceEmpty as d, error as e, PLUGIN as f, gameEvent as g, ProcessAction as h, info as i, UNDO as j, SYNC as k, UPDATE as l, RESET as m, INVALID_MOVE as n, GAME_EVENT as o, STRIP_TRANSIENTS as p, FlushAndValidate as q, stripTransients as r, sync as s, Setup as t, reset as u, undo as v, redo as w, PlayerView as x, patch as y, update as z };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
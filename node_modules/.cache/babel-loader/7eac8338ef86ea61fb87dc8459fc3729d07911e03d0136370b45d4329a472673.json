{"ast":null,"code":"/*\r\n * Copyright 2017 The boardgame.io Authors\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\nclass Transport {\n  constructor(_ref) {\n    let {\n      transportDataCallback,\n      gameName,\n      playerID,\n      matchID,\n      credentials,\n      numPlayers\n    } = _ref;\n    /** Callback to let the client know when the connection status has changed. */\n    this.connectionStatusCallback = () => {};\n    this.isConnected = false;\n    this.transportDataCallback = transportDataCallback;\n    this.gameName = gameName || 'default';\n    this.playerID = playerID || null;\n    this.matchID = matchID || 'default';\n    this.credentials = credentials;\n    this.numPlayers = numPlayers || 2;\n  }\n  /** Subscribe to connection state changes. */\n  subscribeToConnectionStatus(fn) {\n    this.connectionStatusCallback = fn;\n  }\n  /** Transport implementations should call this when they connect/disconnect. */\n  setConnectionStatus(isConnected) {\n    this.isConnected = isConnected;\n    this.connectionStatusCallback();\n  }\n  /** Transport implementations should call this when they receive data from a master. */\n  notifyClient(data) {\n    this.transportDataCallback(data);\n  }\n}\nexport { Transport as T };","map":{"version":3,"names":["Transport","constructor","_ref","transportDataCallback","gameName","playerID","matchID","credentials","numPlayers","connectionStatusCallback","isConnected","subscribeToConnectionStatus","fn","setConnectionStatus","notifyClient","data","T"],"sources":["/Users/aaron/Desktop/School/488_CMPSC/GUI-based-Web-Game-with-Cloud-Native-Infrastructure-Backend 3-21 copy/upwardmobility/node_modules/boardgame.io/dist/esm/transport-ce07b771.js"],"sourcesContent":["/*\r\n * Copyright 2017 The boardgame.io Authors\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\r\nclass Transport {\r\n    constructor({ transportDataCallback, gameName, playerID, matchID, credentials, numPlayers, }) {\r\n        /** Callback to let the client know when the connection status has changed. */\r\n        this.connectionStatusCallback = () => { };\r\n        this.isConnected = false;\r\n        this.transportDataCallback = transportDataCallback;\r\n        this.gameName = gameName || 'default';\r\n        this.playerID = playerID || null;\r\n        this.matchID = matchID || 'default';\r\n        this.credentials = credentials;\r\n        this.numPlayers = numPlayers || 2;\r\n    }\r\n    /** Subscribe to connection state changes. */\r\n    subscribeToConnectionStatus(fn) {\r\n        this.connectionStatusCallback = fn;\r\n    }\r\n    /** Transport implementations should call this when they connect/disconnect. */\r\n    setConnectionStatus(isConnected) {\r\n        this.isConnected = isConnected;\r\n        this.connectionStatusCallback();\r\n    }\r\n    /** Transport implementations should call this when they receive data from a master. */\r\n    notifyClient(data) {\r\n        this.transportDataCallback(data);\r\n    }\r\n}\n\nexport { Transport as T };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,SAAS,CAAC;EACZC,WAAWA,CAAAC,IAAA,EAAmF;IAAA,IAAlF;MAAEC,qBAAqB;MAAEC,QAAQ;MAAEC,QAAQ;MAAEC,OAAO;MAAEC,WAAW;MAAEC;IAAY,CAAC,GAAAN,IAAA;IACxF;IACA,IAAI,CAACO,wBAAwB,GAAG,MAAM,CAAE,CAAC;IACzC,IAAI,CAACC,WAAW,GAAG,KAAK;IACxB,IAAI,CAACP,qBAAqB,GAAGA,qBAAqB;IAClD,IAAI,CAACC,QAAQ,GAAGA,QAAQ,IAAI,SAAS;IACrC,IAAI,CAACC,QAAQ,GAAGA,QAAQ,IAAI,IAAI;IAChC,IAAI,CAACC,OAAO,GAAGA,OAAO,IAAI,SAAS;IACnC,IAAI,CAACC,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,UAAU,GAAGA,UAAU,IAAI,CAAC;EACrC;EACA;EACAG,2BAA2BA,CAACC,EAAE,EAAE;IAC5B,IAAI,CAACH,wBAAwB,GAAGG,EAAE;EACtC;EACA;EACAC,mBAAmBA,CAACH,WAAW,EAAE;IAC7B,IAAI,CAACA,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACD,wBAAwB,EAAE;EACnC;EACA;EACAK,YAAYA,CAACC,IAAI,EAAE;IACf,IAAI,CAACZ,qBAAqB,CAACY,IAAI,CAAC;EACpC;AACJ;AAEA,SAASf,SAAS,IAAIgB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
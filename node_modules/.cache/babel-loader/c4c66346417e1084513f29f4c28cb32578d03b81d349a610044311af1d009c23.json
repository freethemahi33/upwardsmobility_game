{"ast":null,"code":"import { I as InitializeGame } from './initialize-7316768f.js';\nvar Type;\n(function (Type) {\n  Type[Type[\"SYNC\"] = 0] = \"SYNC\";\n  Type[Type[\"ASYNC\"] = 1] = \"ASYNC\";\n})(Type || (Type = {}));\n/**\r\n * Type guard that checks if a storage implementation is synchronous.\r\n */\nfunction isSynchronous(storageAPI) {\n  return storageAPI.type() === Type.SYNC;\n}\nclass Async {\n  /* istanbul ignore next */\n  type() {\n    /* istanbul ignore next */\n    return Type.ASYNC;\n  }\n  /**\r\n   * Create a new match.\r\n   *\r\n   * This might just need to call setState and setMetadata in\r\n   * most implementations.\r\n   *\r\n   * However, it exists as a separate call so that the\r\n   * implementation can provision things differently when\r\n   * a match is created.  For example, it might stow away the\r\n   * initial match state in a separate field for easier retrieval.\r\n   */\n  /* istanbul ignore next */\n  async createMatch(matchID, opts) {\n    if (this.createGame) {\n      console.warn('The database connector does not implement a createMatch method.', '\\nUsing the deprecated createGame method instead.');\n      return this.createGame(matchID, opts);\n    } else {\n      console.error('The database connector does not implement a createMatch method.');\n    }\n  }\n  /**\r\n   * Return all matches.\r\n   */\n  /* istanbul ignore next */\n  async listMatches(opts) {\n    if (this.listGames) {\n      console.warn('The database connector does not implement a listMatches method.', '\\nUsing the deprecated listGames method instead.');\n      return this.listGames(opts);\n    } else {\n      console.error('The database connector does not implement a listMatches method.');\n    }\n  }\n}\nclass Sync {\n  type() {\n    return Type.SYNC;\n  }\n  /**\r\n   * Connect.\r\n   */\n  connect() {\n    return;\n  }\n  /**\r\n   * Create a new match.\r\n   *\r\n   * This might just need to call setState and setMetadata in\r\n   * most implementations.\r\n   *\r\n   * However, it exists as a separate call so that the\r\n   * implementation can provision things differently when\r\n   * a match is created.  For example, it might stow away the\r\n   * initial match state in a separate field for easier retrieval.\r\n   */\n  /* istanbul ignore next */\n  createMatch(matchID, opts) {\n    if (this.createGame) {\n      console.warn('The database connector does not implement a createMatch method.', '\\nUsing the deprecated createGame method instead.');\n      return this.createGame(matchID, opts);\n    } else {\n      console.error('The database connector does not implement a createMatch method.');\n    }\n  }\n  /**\r\n   * Return all matches.\r\n   */\n  /* istanbul ignore next */\n  listMatches(opts) {\n    if (this.listGames) {\n      console.warn('The database connector does not implement a listMatches method.', '\\nUsing the deprecated listGames method instead.');\n      return this.listGames(opts);\n    } else {\n      console.error('The database connector does not implement a listMatches method.');\n    }\n  }\n}\n\n/**\r\n * Creates a new match metadata object.\r\n */\nconst createMetadata = _ref => {\n  let {\n    game,\n    unlisted,\n    setupData,\n    numPlayers\n  } = _ref;\n  const metadata = {\n    gameName: game.name,\n    unlisted: !!unlisted,\n    players: {},\n    createdAt: Date.now(),\n    updatedAt: Date.now()\n  };\n  if (setupData !== undefined) metadata.setupData = setupData;\n  for (let playerIndex = 0; playerIndex < numPlayers; playerIndex++) {\n    metadata.players[playerIndex] = {\n      id: playerIndex\n    };\n  }\n  return metadata;\n};\n/**\r\n * Creates initial state and metadata for a new match.\r\n * If the provided `setupData` doesn’t pass the game’s validation,\r\n * an error object is returned instead.\r\n */\nconst createMatch = _ref2 => {\n  let {\n    game,\n    numPlayers,\n    setupData,\n    unlisted\n  } = _ref2;\n  if (!numPlayers || typeof numPlayers !== 'number') numPlayers = 2;\n  const setupDataError = game.validateSetupData && game.validateSetupData(setupData, numPlayers);\n  if (setupDataError !== undefined) return {\n    setupDataError\n  };\n  const metadata = createMetadata({\n    game,\n    numPlayers,\n    setupData,\n    unlisted\n  });\n  const initialState = InitializeGame({\n    game,\n    numPlayers,\n    setupData\n  });\n  return {\n    metadata,\n    initialState\n  };\n};\nexport { Async as A, Sync as S, createMatch as c, isSynchronous as i };","map":{"version":3,"names":["I","InitializeGame","Type","isSynchronous","storageAPI","type","SYNC","Async","ASYNC","createMatch","matchID","opts","createGame","console","warn","error","listMatches","listGames","Sync","connect","createMetadata","_ref","game","unlisted","setupData","numPlayers","metadata","gameName","name","players","createdAt","Date","now","updatedAt","undefined","playerIndex","id","_ref2","setupDataError","validateSetupData","initialState","A","S","c","i"],"sources":["/Users/aaron/Desktop/School/488_CMPSC/GUI-based-Web-Game-with-Cloud-Native-Infrastructure-Backend 3-21/upwardmobility/node_modules/boardgame.io/dist/esm/util-991e76bb.js"],"sourcesContent":["import { I as InitializeGame } from './initialize-7316768f.js';\n\nvar Type;\r\n(function (Type) {\r\n    Type[Type[\"SYNC\"] = 0] = \"SYNC\";\r\n    Type[Type[\"ASYNC\"] = 1] = \"ASYNC\";\r\n})(Type || (Type = {}));\r\n/**\r\n * Type guard that checks if a storage implementation is synchronous.\r\n */\r\nfunction isSynchronous(storageAPI) {\r\n    return storageAPI.type() === Type.SYNC;\r\n}\r\nclass Async {\r\n    /* istanbul ignore next */\r\n    type() {\r\n        /* istanbul ignore next */\r\n        return Type.ASYNC;\r\n    }\r\n    /**\r\n     * Create a new match.\r\n     *\r\n     * This might just need to call setState and setMetadata in\r\n     * most implementations.\r\n     *\r\n     * However, it exists as a separate call so that the\r\n     * implementation can provision things differently when\r\n     * a match is created.  For example, it might stow away the\r\n     * initial match state in a separate field for easier retrieval.\r\n     */\r\n    /* istanbul ignore next */\r\n    async createMatch(matchID, opts) {\r\n        if (this.createGame) {\r\n            console.warn('The database connector does not implement a createMatch method.', '\\nUsing the deprecated createGame method instead.');\r\n            return this.createGame(matchID, opts);\r\n        }\r\n        else {\r\n            console.error('The database connector does not implement a createMatch method.');\r\n        }\r\n    }\r\n    /**\r\n     * Return all matches.\r\n     */\r\n    /* istanbul ignore next */\r\n    async listMatches(opts) {\r\n        if (this.listGames) {\r\n            console.warn('The database connector does not implement a listMatches method.', '\\nUsing the deprecated listGames method instead.');\r\n            return this.listGames(opts);\r\n        }\r\n        else {\r\n            console.error('The database connector does not implement a listMatches method.');\r\n        }\r\n    }\r\n}\r\nclass Sync {\r\n    type() {\r\n        return Type.SYNC;\r\n    }\r\n    /**\r\n     * Connect.\r\n     */\r\n    connect() {\r\n        return;\r\n    }\r\n    /**\r\n     * Create a new match.\r\n     *\r\n     * This might just need to call setState and setMetadata in\r\n     * most implementations.\r\n     *\r\n     * However, it exists as a separate call so that the\r\n     * implementation can provision things differently when\r\n     * a match is created.  For example, it might stow away the\r\n     * initial match state in a separate field for easier retrieval.\r\n     */\r\n    /* istanbul ignore next */\r\n    createMatch(matchID, opts) {\r\n        if (this.createGame) {\r\n            console.warn('The database connector does not implement a createMatch method.', '\\nUsing the deprecated createGame method instead.');\r\n            return this.createGame(matchID, opts);\r\n        }\r\n        else {\r\n            console.error('The database connector does not implement a createMatch method.');\r\n        }\r\n    }\r\n    /**\r\n     * Return all matches.\r\n     */\r\n    /* istanbul ignore next */\r\n    listMatches(opts) {\r\n        if (this.listGames) {\r\n            console.warn('The database connector does not implement a listMatches method.', '\\nUsing the deprecated listGames method instead.');\r\n            return this.listGames(opts);\r\n        }\r\n        else {\r\n            console.error('The database connector does not implement a listMatches method.');\r\n        }\r\n    }\r\n}\n\n/**\r\n * Creates a new match metadata object.\r\n */\r\nconst createMetadata = ({ game, unlisted, setupData, numPlayers, }) => {\r\n    const metadata = {\r\n        gameName: game.name,\r\n        unlisted: !!unlisted,\r\n        players: {},\r\n        createdAt: Date.now(),\r\n        updatedAt: Date.now(),\r\n    };\r\n    if (setupData !== undefined)\r\n        metadata.setupData = setupData;\r\n    for (let playerIndex = 0; playerIndex < numPlayers; playerIndex++) {\r\n        metadata.players[playerIndex] = { id: playerIndex };\r\n    }\r\n    return metadata;\r\n};\r\n/**\r\n * Creates initial state and metadata for a new match.\r\n * If the provided `setupData` doesn’t pass the game’s validation,\r\n * an error object is returned instead.\r\n */\r\nconst createMatch = ({ game, numPlayers, setupData, unlisted, }) => {\r\n    if (!numPlayers || typeof numPlayers !== 'number')\r\n        numPlayers = 2;\r\n    const setupDataError = game.validateSetupData && game.validateSetupData(setupData, numPlayers);\r\n    if (setupDataError !== undefined)\r\n        return { setupDataError };\r\n    const metadata = createMetadata({ game, numPlayers, setupData, unlisted });\r\n    const initialState = InitializeGame({ game, numPlayers, setupData });\r\n    return { metadata, initialState };\r\n};\n\nexport { Async as A, Sync as S, createMatch as c, isSynchronous as i };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
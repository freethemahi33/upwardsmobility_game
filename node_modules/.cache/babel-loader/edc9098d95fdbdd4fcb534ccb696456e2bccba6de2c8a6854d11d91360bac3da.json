{"ast":null,"code":"import { TurnOrder } from \"boardgame.io/core\";\nfunction setEvent() {\n  console.log(\"WORKS\");\n\n  //hides the confirm button from displaying roll amount, also disables and hides the roll amount text\n  document.getElementById(\"confirmButton\").setAttribute(\"disabled\", true);\n  document.getElementById(\"confirmButton\").style.visibility = \"hidden\";\n  document.getElementById(\"rollVal\").style.visibility = \"hidden\";\n\n  //creates the tags for events\n  let eventPic = document.createElement(\"img\");\n  eventPic.setAttribute(\"class\", \"gameImg\");\n  eventPic.src = \"./assets/brodie.jpg\";\n  let eventDesc = document.createElement(\"span\");\n  eventDesc.setAttribute(\"class\", \"eventDesc\");\n  eventDesc.innerHTML = \"\";\n  let eventButton = document.createElement(\"button\");\n  eventButton.setAttribute(\"class\", \"eventButton\");\n  eventButton.innerHTML = \"Confirm\";\n\n  //clears the temp div\n  document.getElementById(\"temp\").innerHTML = \"\";\n  document.getElementById(\"temp\").append(eventPic);\n  document.getElementById(\"temp\").append(eventDesc);\n  document.getElementById(\"temp\").append(eventButton);\n}\nfunction guessNumberEvent() {\n  // Generate a random number between 1 and 10\n  // const randomNumber = random.Die(10).roll();\n  const randomNumber = 5;\n\n  // player inputs number\n  const playerNumber = prompt(\"Enter a number between 1 and 10\");\n\n  // Compare the player's number to the random number\n  if (playerNumber === null) {\n    // The player clicked Cancel, so do nothing\n    return;\n  } else if (isNaN(playerNumber) || playerNumber < 1 || playerNumber > 10) {\n    // The player entered an invalid number, so end their turn\n    alert(\"Invalid input. Please enter a number between 1 and 10.\");\n    ctx.events.endTurn();\n    return;\n  } else if (playerNumber == randomNumber) {\n    // The player guessed correctly, so advance their position by 2\n    G.upwards.players[ctx.currentPlayer].position += 2;\n  } else {\n    // The player guessed incorrectly, so move their position back by 1\n    G.upwards.players[ctx.currentPlayer].position -= 1;\n  }\n\n  // Update the cell array to reflect the player's new position\n  // G.cells[G.upwards.players[ctx.currentPlayer].position] = id;\n\n  // End the player's turn\n  ctx.events.endTurn();\n}\nexport const UpwardsMobility = {\n  setup: () => ({\n    // cells: Array(25).fill(null),\n\n    // Initialize game.\n    upwards: {\n      // board has 25 cells\n\n      board: [{\n        event: 'guessNumberEvent'\n      }, {\n        event: 'none'\n      }, {\n        event: 'advance',\n        steps: 2\n      }, {\n        event: 'reverse'\n      }, {\n        event: 'advance',\n        steps: 3\n      }, {\n        event: 'none'\n      }, {\n        event: 'advance',\n        steps: 1\n      }, {\n        event: 'none'\n      }, {\n        event: 'none',\n        steps: 2\n      }, {\n        event: 'advance',\n        steps: 2\n      }, {\n        event: 'advance',\n        steps: 2\n      }, {\n        event: 'none'\n      }, {\n        event: 'advance',\n        steps: 2\n      }, {\n        event: 'reverse'\n      }, {\n        event: 'advance',\n        steps: 3\n      }, {\n        event: 'none'\n      }, {\n        event: 'advance',\n        steps: 1\n      }, {\n        event: 'none'\n      }, {\n        event: 'advance',\n        steps: 2\n      }, {\n        event: 'win'\n      }, {\n        event: 'none'\n      }, {\n        event: 'advance',\n        steps: 1\n      }, {\n        event: 'none'\n      }, {\n        event: 'none'\n      }, {\n        event: 'win'\n      }, {\n        event: 'go-to-start',\n        description: 'Go back to the starting cell'\n      }],\n      players: {\n        '0': {\n          position: 0\n        },\n        '1': {\n          position: 0\n        }\n      }\n    }\n  }),\n  // Define the turn order for the game.\n\n  // Define the moves for rolling the dice and updating the game state.\n  moves: {\n    tempRoll: _ref => {\n      let {\n        G,\n        ctx\n      } = _ref;\n      const die1 = Math.floor(Math.random() * 6) + 1;\n      const die2 = Math.floor(Math.random() * 6) + 1;\n      // let moveDist = die1 + die2;\n      let moveDist = 1;\n      G.upwards.players[ctx.currentPlayer].position += moveDist;\n      console.log(G.upwards.players[ctx.currentPlayer].position);\n      // G.cells[G.upwards.players[ctx.currentPlayer].position] = id;\n\n      const eventCell = G.upwards.board[G.upwards.players[ctx.currentPlayer].position + moveDist];\n      if (eventCell.event === 'advance') {\n        moveDist += eventCell.steps;\n      }\n      if (eventCell.event === 'reverse') {\n        moveDist -= eventCell.steps;\n      }\n      if (eventCell.event === 'guessNumberEvent') {\n        guessNumberEvent();\n      }\n      document.getElementById(\"A_pair_of_strange_dice_lay_bef\").style.visibility = \"hidden\";\n      document.getElementById(\"A_pair_of_strange_dice_lay_bef\").setAttribute(\"disabled\", \"True\");\n      document.getElementById(\"DiceButton\").style.visibility = \"hidden\";\n      document.getElementById(\"DiceButton\").setAttribute(\"disabled\", \"True\");\n      document.getElementById(\"NoPath_-_Copy_8\").style.visibility = \"hidden\";\n      document.getElementById(\"A_pair_of_strange_dice_lay_bef\").style.top = \"20%\";\n      let showConfirmButton = document.createElement(`button`);\n      showConfirmButton.setAttribute(\"class\", \"inGameButton\");\n      showConfirmButton.setAttribute(\"id\", \"confirmButton\");\n      showConfirmButton.addEventListener(\"click\", setEvent);\n      showConfirmButton.innerHTML = \"Confirm\";\n      let showRollVal = document.createElement(\"span\");\n      showRollVal.setAttribute(\"class\", \"inGameText\");\n      showRollVal.setAttribute(\"id\", \"rollVal\");\n      // showRollVal.innerHTML = \"Player 1 rolled \" + moveDist + \"!\"\n      showRollVal.innerHTML = \"Player \" + (ctx.currentPlayer + 1) + \" rolled \" + moveDist + \" with an event of \" + eventCell.steps + \" !\";\n      let testDiv = document.createElement(\"div\");\n      testDiv.setAttribute(\"class\", \"tempDiv\");\n      testDiv.setAttribute(\"id\", \"temp\");\n      testDiv.appendChild(showRollVal);\n      testDiv.appendChild(showConfirmButton);\n      document.getElementById(\"eventScreen\").append(testDiv);\n    },\n    rollDie: (_ref2, id) => {\n      let {\n        G,\n        random,\n        ctx\n      } = _ref2;\n      //rolling dice\n      const die1 = Math.floor(Math.random() * 6) + 1;\n      const die2 = Math.floor(Math.random() * 6) + 1;\n      let moveDist = die1 + die2;\n\n      //moveing players in array\n      G.cells[G.upwards.players[ctx.currentPlayer].position] = null;\n\n      // Check if the player lands on an event cell\n      const eventCell = G.upwards.board[G.upwards.players[ctx.currentPlayer].position + moveDist];\n      if (eventCell.event === 'advance') {\n        moveDist += eventCell.steps;\n      } else if (eventCell.event === 'reverse') {\n        moveDist = -moveDist;\n      } else if (eventCell.event === 'win') {\n        // End the game if a player has won.\n        ctx.events.endGame({\n          winner: ctx.currentPlayer\n        });\n        return;\n      } else if (eventCell.event === 'go-to-start') {\n        moveDist = -G.upwards.players[ctx.currentPlayer].position;\n      }\n      G.upwards.players[ctx.currentPlayer].position += moveDist;\n      // G.cells[G.upwards.players[ctx.currentPlayer].position] = id;\n    },\n\n    guessNumberEvent: _ref3 => {\n      let {\n        G,\n        random,\n        ctx\n      } = _ref3;\n      // Generate a random number between 1 and 10\n      // const randomNumber = random.Die(10).roll();\n      const randomNumber = 5;\n\n      // player inputs number\n      const playerNumber = prompt(\"Enter a number between 1 and 10\");\n\n      // Compare the player's number to the random number\n      if (playerNumber === null) {\n        // The player clicked Cancel, so do nothing\n        return;\n      } else if (isNaN(playerNumber) || playerNumber < 1 || playerNumber > 10) {\n        // The player entered an invalid number, so end their turn\n        alert(\"Invalid input. Please enter a number between 1 and 10.\");\n        ctx.events.endTurn();\n        return;\n      } else if (playerNumber == randomNumber) {\n        // The player guessed correctly, so advance their position by 2\n        G.upwards.players[ctx.currentPlayer].position += 2;\n      } else {\n        // The player guessed incorrectly, so move their position back by 1\n        G.upwards.players[ctx.currentPlayer].position -= 1;\n      }\n\n      // Update the cell array to reflect the player's new position\n      // G.cells[G.upwards.players[ctx.currentPlayer].position] = id;\n\n      // End the player's turn\n      ctx.events.endTurn();\n    }\n  },\n  turn: {\n    order: TurnOrder.ONCE,\n    minMoves: 1,\n    maxMoves: 1\n  }\n};","map":{"version":3,"names":["TurnOrder","setEvent","console","log","document","getElementById","setAttribute","style","visibility","eventPic","createElement","src","eventDesc","innerHTML","eventButton","append","guessNumberEvent","randomNumber","playerNumber","prompt","isNaN","alert","ctx","events","endTurn","G","upwards","players","currentPlayer","position","UpwardsMobility","setup","board","event","steps","description","moves","tempRoll","_ref","die1","Math","floor","random","die2","moveDist","eventCell","top","showConfirmButton","addEventListener","showRollVal","testDiv","appendChild","rollDie","_ref2","id","cells","endGame","winner","_ref3","turn","order","ONCE","minMoves","maxMoves"],"sources":["/Users/aaron/Desktop/School/488_CMPSC/GUI-based-Web-Game-with-Cloud-Native-Infrastructure-Backend/upwardmobility/src/Game.js"],"sourcesContent":["import { TurnOrder } from \"boardgame.io/core\";\n\nfunction setEvent() {\n  console.log(\"WORKS\")\n\n  //hides the confirm button from displaying roll amount, also disables and hides the roll amount text\n  document.getElementById(\"confirmButton\").setAttribute(\"disabled\", true)\n  document.getElementById(\"confirmButton\").style.visibility = \"hidden\"\n  document.getElementById(\"rollVal\").style.visibility = \"hidden\"\n\n  //creates the tags for events\n  let eventPic = document.createElement(\"img\")\n  eventPic.setAttribute(\"class\", \"gameImg\")\n  eventPic.src = \"./assets/brodie.jpg\"\n\n  let eventDesc = document.createElement(\"span\")\n  eventDesc.setAttribute(\"class\", \"eventDesc\")\n  eventDesc.innerHTML = \"\"\n\n  let eventButton = document.createElement(\"button\")\n  eventButton.setAttribute(\"class\", \"eventButton\")\n  eventButton.innerHTML = \"Confirm\"\n\n  //clears the temp div\n  document.getElementById(\"temp\").innerHTML = \"\"\n  document.getElementById(\"temp\").append(eventPic)\n  document.getElementById(\"temp\").append(eventDesc)\n  document.getElementById(\"temp\").append(eventButton)\n}\n\nfunction guessNumberEvent() {\n  // Generate a random number between 1 and 10\n  // const randomNumber = random.Die(10).roll();\n  const randomNumber = 5;\n\n  // player inputs number\n  const playerNumber = prompt(\"Enter a number between 1 and 10\");\n\n  // Compare the player's number to the random number\n  if (playerNumber === null) {\n    // The player clicked Cancel, so do nothing\n    return;\n  } else if (isNaN(playerNumber) || playerNumber < 1 || playerNumber > 10) {\n    // The player entered an invalid number, so end their turn\n    alert(\"Invalid input. Please enter a number between 1 and 10.\");\n    ctx.events.endTurn();\n    return;\n  } else if (playerNumber == randomNumber) {\n    // The player guessed correctly, so advance their position by 2\n    G.upwards.players[ctx.currentPlayer].position += 2;\n  } else {\n    // The player guessed incorrectly, so move their position back by 1\n    G.upwards.players[ctx.currentPlayer].position -= 1;\n  }\n\n  // Update the cell array to reflect the player's new position\n  // G.cells[G.upwards.players[ctx.currentPlayer].position] = id;\n\n  // End the player's turn\n  ctx.events.endTurn();\n\n}\n\nexport const UpwardsMobility = {\n  setup: () => ({\n    // cells: Array(25).fill(null),\n\n    // Initialize game.\n    upwards: {\n\n      // board has 25 cells\n\n      board: [\n        { event: 'guessNumberEvent' },\n        { event: 'none' },\n        { event: 'advance', steps: 2 },\n        { event: 'reverse' },\n        { event: 'advance', steps: 3 },\n        { event: 'none' },\n        { event: 'advance', steps: 1 },\n        { event: 'none' },\n        { event: 'none' , steps: 2},\n        { event: 'advance', steps: 2 },\n        { event: 'advance', steps: 2 },\n        { event: 'none' },\n        { event: 'advance', steps: 2 },\n        { event: 'reverse' },\n        { event: 'advance', steps: 3 },\n        { event: 'none' },\n        { event: 'advance', steps: 1 },\n        { event: 'none' },\n        { event: 'advance', steps: 2 },\n        { event: 'win' },\n        { event: 'none' },\n        { event: 'advance', steps: 1 },\n        { event: 'none' },\n        { event: 'none' },\n        { event: 'win' },\n        {\n          event: 'go-to-start',\n          description: 'Go back to the starting cell',\n        },\n      ],\n      players: {\n        '0': { position: 0 },\n        '1': { position: 0 },\n      },\n    },\n  }),\n\n  // Define the turn order for the game.\n\n\n    // Define the moves for rolling the dice and updating the game state.\n    moves: {\n      tempRoll: ({G,ctx}) => {\n        const die1 = Math.floor(Math.random() * 6) + 1\n        const die2 = Math.floor(Math.random() * 6) + 1\n        // let moveDist = die1 + die2;\n        let moveDist = 1;\n        G.upwards.players[ctx.currentPlayer].position += moveDist;\n        console.log(G.upwards.players[ctx.currentPlayer].position)\n        // G.cells[G.upwards.players[ctx.currentPlayer].position] = id;\n\n        const eventCell = G.upwards.board[G.upwards.players[ctx.currentPlayer].position + moveDist]\n\n        if (eventCell.event === 'advance') {\n          moveDist += eventCell.steps;\n        }\n        if (eventCell.event === 'reverse') {\n          moveDist -= eventCell.steps;\n        }\n        if (eventCell.event === 'guessNumberEvent') {\n          guessNumberEvent();\n        }\n\n        document.getElementById(\"A_pair_of_strange_dice_lay_bef\").style.visibility = \"hidden\"\n        document.getElementById(\"A_pair_of_strange_dice_lay_bef\").setAttribute(\"disabled\", \"True\")\n\n        document.getElementById(\"DiceButton\").style.visibility = \"hidden\"\n        document.getElementById(\"DiceButton\").setAttribute(\"disabled\", \"True\")\n\n        document.getElementById(\"NoPath_-_Copy_8\").style.visibility = \"hidden\"\n        document.getElementById(\"A_pair_of_strange_dice_lay_bef\").style.top = \"20%\"\n\n        let showConfirmButton = document.createElement(`button`)\n        showConfirmButton.setAttribute(\"class\", \"inGameButton\")\n        showConfirmButton.setAttribute(\"id\", \"confirmButton\")\n        showConfirmButton.addEventListener(\"click\", setEvent)\n        showConfirmButton.innerHTML = \"Confirm\"\n\n        let showRollVal = document.createElement(\"span\")\n        showRollVal.setAttribute(\"class\", \"inGameText\")\n        showRollVal.setAttribute(\"id\", \"rollVal\")\n        // showRollVal.innerHTML = \"Player 1 rolled \" + moveDist + \"!\"\n        showRollVal.innerHTML = \"Player \" + (ctx.currentPlayer + 1) + \" rolled \" + moveDist + \" with an event of \" + eventCell.steps + \" !\"\n\n        let testDiv = document.createElement(\"div\")\n        testDiv.setAttribute(\"class\", \"tempDiv\")\n        testDiv.setAttribute(\"id\", \"temp\")\n\n        testDiv.appendChild(showRollVal)\n        testDiv.appendChild(showConfirmButton)\n        document.getElementById(\"eventScreen\").append(testDiv)\n\n      },\n      rollDie: ({G, random, ctx}, id) => {\n        //rolling dice\n        const die1 = Math.floor(Math.random() * 6) + 1\n        const die2 = Math.floor(Math.random() * 6) + 1\n        let moveDist = die1 + die2;\n\n        //moveing players in array\n        G.cells[G.upwards.players[ctx.currentPlayer].position] = null;\n\n        // Check if the player lands on an event cell\n        const eventCell = G.upwards.board[G.upwards.players[ctx.currentPlayer].position + moveDist];\n        if (eventCell.event === 'advance') {\n          moveDist += eventCell.steps;\n        } else if (eventCell.event === 'reverse') {\n          moveDist = -moveDist;\n        } else if (eventCell.event === 'win') {\n          // End the game if a player has won.\n          ctx.events.endGame({ winner: ctx.currentPlayer });\n          return;\n        } else if (eventCell.event === 'go-to-start') {\n          moveDist = -G.upwards.players[ctx.currentPlayer].position;\n        }\n\n        G.upwards.players[ctx.currentPlayer].position += moveDist;\n        // G.cells[G.upwards.players[ctx.currentPlayer].position] = id;\n      },\n\n      guessNumberEvent: ({G, random, ctx}) => {\n        // Generate a random number between 1 and 10\n        // const randomNumber = random.Die(10).roll();\n        const randomNumber = 5;\n\n        // player inputs number\n        const playerNumber = prompt(\"Enter a number between 1 and 10\");\n\n        // Compare the player's number to the random number\n        if (playerNumber === null) {\n          // The player clicked Cancel, so do nothing\n          return;\n        } else if (isNaN(playerNumber) || playerNumber < 1 || playerNumber > 10) {\n          // The player entered an invalid number, so end their turn\n          alert(\"Invalid input. Please enter a number between 1 and 10.\");\n          ctx.events.endTurn();\n          return;\n        } else if (playerNumber == randomNumber) {\n          // The player guessed correctly, so advance their position by 2\n          G.upwards.players[ctx.currentPlayer].position += 2;\n        } else {\n          // The player guessed incorrectly, so move their position back by 1\n          G.upwards.players[ctx.currentPlayer].position -= 1;\n        }\n\n        // Update the cell array to reflect the player's new position\n        // G.cells[G.upwards.players[ctx.currentPlayer].position] = id;\n\n        // End the player's turn\n        ctx.events.endTurn();\n      },\n\n    },\n  turn: {\n    order: TurnOrder.ONCE,\n    minMoves: 1,\n    maxMoves: 1,\n  },\n};\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
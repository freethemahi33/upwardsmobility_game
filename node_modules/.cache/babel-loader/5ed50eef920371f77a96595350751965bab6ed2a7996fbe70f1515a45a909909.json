{"ast":null,"code":"import { T as Transport } from './transport-ce07b771.js';\nimport { S as Sync } from './util-991e76bb.js';\nimport { M as Master } from './master-17425f07.js';\nimport { g as getFilterPlayerView } from './filter-player-view-43ed49b0.js';\nimport ioNamespace__default from 'socket.io-client';\n\n/*\r\n * Copyright 2017 The boardgame.io Authors\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\n/**\r\n * InMemory data storage.\r\n */\nclass InMemory extends Sync {\n  /**\r\n   * Creates a new InMemory storage.\r\n   */\n  constructor() {\n    super();\n    this.state = new Map();\n    this.initial = new Map();\n    this.metadata = new Map();\n    this.log = new Map();\n  }\n  /**\r\n   * Create a new match.\r\n   *\r\n   * @override\r\n   */\n  createMatch(matchID, opts) {\n    this.initial.set(matchID, opts.initialState);\n    this.setState(matchID, opts.initialState);\n    this.setMetadata(matchID, opts.metadata);\n  }\n  /**\r\n   * Write the match metadata to the in-memory object.\r\n   */\n  setMetadata(matchID, metadata) {\n    this.metadata.set(matchID, metadata);\n  }\n  /**\r\n   * Write the match state to the in-memory object.\r\n   */\n  setState(matchID, state, deltalog) {\n    if (deltalog && deltalog.length > 0) {\n      const log = this.log.get(matchID) || [];\n      this.log.set(matchID, [...log, ...deltalog]);\n    }\n    this.state.set(matchID, state);\n  }\n  /**\r\n   * Fetches state for a particular matchID.\r\n   */\n  fetch(matchID, opts) {\n    const result = {};\n    if (opts.state) {\n      result.state = this.state.get(matchID);\n    }\n    if (opts.metadata) {\n      result.metadata = this.metadata.get(matchID);\n    }\n    if (opts.log) {\n      result.log = this.log.get(matchID) || [];\n    }\n    if (opts.initialState) {\n      result.initialState = this.initial.get(matchID);\n    }\n    return result;\n  }\n  /**\r\n   * Remove the match state from the in-memory object.\r\n   */\n  wipe(matchID) {\n    this.state.delete(matchID);\n    this.metadata.delete(matchID);\n  }\n  /**\r\n   * Return all keys.\r\n   *\r\n   * @override\r\n   */\n  listMatches(opts) {\n    return [...this.metadata.entries()].filter(_ref => {\n      let [, metadata] = _ref;\n      if (!opts) {\n        return true;\n      }\n      if (opts.gameName !== undefined && metadata.gameName !== opts.gameName) {\n        return false;\n      }\n      if (opts.where !== undefined) {\n        if (opts.where.isGameover !== undefined) {\n          const isGameover = metadata.gameover !== undefined;\n          if (isGameover !== opts.where.isGameover) {\n            return false;\n          }\n        }\n        if (opts.where.updatedBefore !== undefined && metadata.updatedAt >= opts.where.updatedBefore) {\n          return false;\n        }\n        if (opts.where.updatedAfter !== undefined && metadata.updatedAt <= opts.where.updatedAfter) {\n          return false;\n        }\n      }\n      return true;\n    }).map(_ref2 => {\n      let [key] = _ref2;\n      return key;\n    });\n  }\n}\nclass WithLocalStorageMap extends Map {\n  constructor(key) {\n    super();\n    this.key = key;\n    const cache = JSON.parse(localStorage.getItem(this.key)) || [];\n    cache.forEach(entry => this.set(...entry));\n  }\n  sync() {\n    const entries = [...this.entries()];\n    localStorage.setItem(this.key, JSON.stringify(entries));\n  }\n  set(key, value) {\n    super.set(key, value);\n    this.sync();\n    return this;\n  }\n  delete(key) {\n    const result = super.delete(key);\n    this.sync();\n    return result;\n  }\n}\n/**\r\n * locaStorage data storage.\r\n */\nclass LocalStorage extends InMemory {\n  constructor() {\n    let storagePrefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'bgio';\n    super();\n    const StorageMap = stateKey => new WithLocalStorageMap(`${storagePrefix}_${stateKey}`);\n    this.state = StorageMap('state');\n    this.initial = StorageMap('initial');\n    this.metadata = StorageMap('metadata');\n    this.log = StorageMap('log');\n  }\n}\n\n/*\r\n * Copyright 2018 The boardgame.io Authors\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\n/**\r\n * Returns null if it is not a bot's turn.\r\n * Otherwise, returns a playerID of a bot that may play now.\r\n */\nfunction GetBotPlayer(state, bots) {\n  if (state.ctx.gameover !== undefined) {\n    return null;\n  }\n  if (state.ctx.activePlayers) {\n    for (const key of Object.keys(bots)) {\n      if (key in state.ctx.activePlayers) {\n        return key;\n      }\n    }\n  } else if (state.ctx.currentPlayer in bots) {\n    return state.ctx.currentPlayer;\n  }\n  return null;\n}\n/**\r\n * Creates a local version of the master that the client\r\n * can interact with.\r\n */\nclass LocalMaster extends Master {\n  constructor(_ref3) {\n    let {\n      game,\n      bots,\n      storageKey,\n      persist\n    } = _ref3;\n    const clientCallbacks = {};\n    const initializedBots = {};\n    if (game && game.ai && bots) {\n      for (const playerID in bots) {\n        const bot = bots[playerID];\n        initializedBots[playerID] = new bot({\n          game,\n          enumerate: game.ai.enumerate,\n          seed: game.seed\n        });\n      }\n    }\n    const send = _ref4 => {\n      let {\n        playerID,\n        ...data\n      } = _ref4;\n      const callback = clientCallbacks[playerID];\n      if (callback !== undefined) {\n        callback(filterPlayerView(playerID, data));\n      }\n    };\n    const filterPlayerView = getFilterPlayerView(game);\n    const transportAPI = {\n      send,\n      sendAll: payload => {\n        for (const playerID in clientCallbacks) {\n          send({\n            playerID,\n            ...payload\n          });\n        }\n      }\n    };\n    const storage = persist ? new LocalStorage(storageKey) : new InMemory();\n    super(game, storage, transportAPI);\n    this.connect = (playerID, callback) => {\n      clientCallbacks[playerID] = callback;\n    };\n    this.subscribe(_ref5 => {\n      let {\n        state,\n        matchID\n      } = _ref5;\n      if (!bots) {\n        return;\n      }\n      const botPlayer = GetBotPlayer(state, initializedBots);\n      if (botPlayer !== null) {\n        setTimeout(async () => {\n          const botAction = await initializedBots[botPlayer].play(state, botPlayer);\n          await this.onUpdate(botAction.action, state._stateID, matchID, botAction.action.payload.playerID);\n        }, 100);\n      }\n    });\n  }\n}\n/**\r\n * Local\r\n *\r\n * Transport interface that embeds a GameMaster within it\r\n * that you can connect multiple clients to.\r\n */\nclass LocalTransport extends Transport {\n  /**\r\n   * Creates a new Mutiplayer instance.\r\n   * @param {string} matchID - The game ID to connect to.\r\n   * @param {string} playerID - The player ID associated with this client.\r\n   * @param {string} gameName - The game type (the `name` field in `Game`).\r\n   * @param {string} numPlayers - The number of players.\r\n   */\n  constructor(_ref6) {\n    let {\n      master,\n      ...opts\n    } = _ref6;\n    super(opts);\n    this.master = master;\n  }\n  sendChatMessage(matchID, chatMessage) {\n    const args = [matchID, chatMessage, this.credentials];\n    this.master.onChatMessage(...args);\n  }\n  sendAction(state, action) {\n    this.master.onUpdate(action, state._stateID, this.matchID, this.playerID);\n  }\n  requestSync() {\n    this.master.onSync(this.matchID, this.playerID, this.credentials, this.numPlayers);\n  }\n  connect() {\n    this.setConnectionStatus(true);\n    this.master.connect(this.playerID, data => this.notifyClient(data));\n    this.requestSync();\n  }\n  disconnect() {\n    this.setConnectionStatus(false);\n  }\n  updateMatchID(id) {\n    this.matchID = id;\n    this.connect();\n  }\n  updatePlayerID(id) {\n    this.playerID = id;\n    this.connect();\n  }\n  updateCredentials(credentials) {\n    this.credentials = credentials;\n    this.connect();\n  }\n}\n/**\r\n * Global map storing local master instances.\r\n */\nconst localMasters = new Map();\n/**\r\n * Create a local transport.\r\n */\nfunction Local() {\n  let {\n    bots,\n    persist,\n    storageKey\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return transportOpts => {\n    const {\n      gameKey,\n      game\n    } = transportOpts;\n    let master;\n    const instance = localMasters.get(gameKey);\n    if (instance && instance.bots === bots && instance.storageKey === storageKey && instance.persist === persist) {\n      master = instance.master;\n    }\n    if (!master) {\n      master = new LocalMaster({\n        game,\n        bots,\n        persist,\n        storageKey\n      });\n      localMasters.set(gameKey, {\n        master,\n        bots,\n        persist,\n        storageKey\n      });\n    }\n    return new LocalTransport({\n      master,\n      ...transportOpts\n    });\n  };\n}\n\n/*\r\n * Copyright 2017 The boardgame.io Authors\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\nconst io = ioNamespace__default;\n/**\r\n * SocketIO\r\n *\r\n * Transport interface that interacts with the Master via socket.io.\r\n */\nclass SocketIOTransport extends Transport {\n  /**\r\n   * Creates a new Multiplayer instance.\r\n   * @param {object} socket - Override for unit tests.\r\n   * @param {object} socketOpts - Options to pass to socket.io.\r\n   * @param {object} store - Redux store\r\n   * @param {string} matchID - The game ID to connect to.\r\n   * @param {string} playerID - The player ID associated with this client.\r\n   * @param {string} credentials - Authentication credentials\r\n   * @param {string} gameName - The game type (the `name` field in `Game`).\r\n   * @param {string} numPlayers - The number of players.\r\n   * @param {string} server - The game server in the form of 'hostname:port'. Defaults to the server serving the client if not provided.\r\n   */\n  constructor(_ref7) {\n    let {\n      socket,\n      socketOpts,\n      server,\n      ...opts\n    } = _ref7;\n    super(opts);\n    this.server = server;\n    this.socket = socket;\n    this.socketOpts = socketOpts;\n  }\n  sendAction(state, action) {\n    const args = [action, state._stateID, this.matchID, this.playerID];\n    this.socket.emit('update', ...args);\n  }\n  sendChatMessage(matchID, chatMessage) {\n    const args = [matchID, chatMessage, this.credentials];\n    this.socket.emit('chat', ...args);\n  }\n  connect() {\n    if (!this.socket) {\n      if (this.server) {\n        let server = this.server;\n        if (server.search(/^https?:\\/\\//) == -1) {\n          server = 'http://' + this.server;\n        }\n        if (server.slice(-1) != '/') {\n          // add trailing slash if not already present\n          server = server + '/';\n        }\n        this.socket = io(server + this.gameName, this.socketOpts);\n      } else {\n        this.socket = io('/' + this.gameName, this.socketOpts);\n      }\n    }\n    // Called when another player makes a move and the\n    // master broadcasts the update as a patch to other clients (including\n    // this one).\n    this.socket.on('patch', (matchID, prevStateID, stateID, patch, deltalog) => {\n      this.notifyClient({\n        type: 'patch',\n        args: [matchID, prevStateID, stateID, patch, deltalog]\n      });\n    });\n    // Called when another player makes a move and the\n    // master broadcasts the update to other clients (including\n    // this one).\n    this.socket.on('update', (matchID, state, deltalog) => {\n      this.notifyClient({\n        type: 'update',\n        args: [matchID, state, deltalog]\n      });\n    });\n    // Called when the client first connects to the master\n    // and requests the current game state.\n    this.socket.on('sync', (matchID, syncInfo) => {\n      this.notifyClient({\n        type: 'sync',\n        args: [matchID, syncInfo]\n      });\n    });\n    // Called when new player joins the match or changes\n    // it's connection status\n    this.socket.on('matchData', (matchID, matchData) => {\n      this.notifyClient({\n        type: 'matchData',\n        args: [matchID, matchData]\n      });\n    });\n    this.socket.on('chat', (matchID, chatMessage) => {\n      this.notifyClient({\n        type: 'chat',\n        args: [matchID, chatMessage]\n      });\n    });\n    // Keep track of connection status.\n    this.socket.on('connect', () => {\n      // Initial sync to get game state.\n      this.requestSync();\n      this.setConnectionStatus(true);\n    });\n    this.socket.on('disconnect', () => {\n      this.setConnectionStatus(false);\n    });\n  }\n  disconnect() {\n    this.socket.close();\n    this.socket = null;\n    this.setConnectionStatus(false);\n  }\n  requestSync() {\n    if (this.socket) {\n      const args = [this.matchID, this.playerID, this.credentials, this.numPlayers];\n      this.socket.emit('sync', ...args);\n    }\n  }\n  updateMatchID(id) {\n    this.matchID = id;\n    this.requestSync();\n  }\n  updatePlayerID(id) {\n    this.playerID = id;\n    this.requestSync();\n  }\n  updateCredentials(credentials) {\n    this.credentials = credentials;\n    this.requestSync();\n  }\n}\nfunction SocketIO() {\n  let {\n    server,\n    socketOpts\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return transportOpts => new SocketIOTransport({\n    server,\n    socketOpts,\n    ...transportOpts\n  });\n}\nexport { Local as L, SocketIO as S };","map":{"version":3,"names":["T","Transport","S","Sync","M","Master","g","getFilterPlayerView","ioNamespace__default","InMemory","constructor","state","Map","initial","metadata","log","createMatch","matchID","opts","set","initialState","setState","setMetadata","deltalog","length","get","fetch","result","wipe","delete","listMatches","entries","filter","_ref","gameName","undefined","where","isGameover","gameover","updatedBefore","updatedAt","updatedAfter","map","_ref2","key","WithLocalStorageMap","cache","JSON","parse","localStorage","getItem","forEach","entry","sync","setItem","stringify","value","LocalStorage","storagePrefix","arguments","StorageMap","stateKey","GetBotPlayer","bots","ctx","activePlayers","Object","keys","currentPlayer","LocalMaster","_ref3","game","storageKey","persist","clientCallbacks","initializedBots","ai","playerID","bot","enumerate","seed","send","_ref4","data","callback","filterPlayerView","transportAPI","sendAll","payload","storage","connect","subscribe","_ref5","botPlayer","setTimeout","botAction","play","onUpdate","action","_stateID","LocalTransport","_ref6","master","sendChatMessage","chatMessage","args","credentials","onChatMessage","sendAction","requestSync","onSync","numPlayers","setConnectionStatus","notifyClient","disconnect","updateMatchID","id","updatePlayerID","updateCredentials","localMasters","Local","transportOpts","gameKey","instance","io","SocketIOTransport","_ref7","socket","socketOpts","server","emit","search","slice","on","prevStateID","stateID","patch","type","syncInfo","matchData","close","SocketIO","L"],"sources":["/Users/aaron/Desktop/School/488_CMPSC/GUI-based-Web-Game-with-Cloud-Native-Infrastructure-Backend 3-21 copy 2/upwardmobility/node_modules/boardgame.io/dist/esm/socketio-a82b84e4.js"],"sourcesContent":["import { T as Transport } from './transport-ce07b771.js';\nimport { S as Sync } from './util-991e76bb.js';\nimport { M as Master } from './master-17425f07.js';\nimport { g as getFilterPlayerView } from './filter-player-view-43ed49b0.js';\nimport ioNamespace__default from 'socket.io-client';\n\n/*\r\n * Copyright 2017 The boardgame.io Authors\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\r\n/**\r\n * InMemory data storage.\r\n */\r\nclass InMemory extends Sync {\r\n    /**\r\n     * Creates a new InMemory storage.\r\n     */\r\n    constructor() {\r\n        super();\r\n        this.state = new Map();\r\n        this.initial = new Map();\r\n        this.metadata = new Map();\r\n        this.log = new Map();\r\n    }\r\n    /**\r\n     * Create a new match.\r\n     *\r\n     * @override\r\n     */\r\n    createMatch(matchID, opts) {\r\n        this.initial.set(matchID, opts.initialState);\r\n        this.setState(matchID, opts.initialState);\r\n        this.setMetadata(matchID, opts.metadata);\r\n    }\r\n    /**\r\n     * Write the match metadata to the in-memory object.\r\n     */\r\n    setMetadata(matchID, metadata) {\r\n        this.metadata.set(matchID, metadata);\r\n    }\r\n    /**\r\n     * Write the match state to the in-memory object.\r\n     */\r\n    setState(matchID, state, deltalog) {\r\n        if (deltalog && deltalog.length > 0) {\r\n            const log = this.log.get(matchID) || [];\r\n            this.log.set(matchID, [...log, ...deltalog]);\r\n        }\r\n        this.state.set(matchID, state);\r\n    }\r\n    /**\r\n     * Fetches state for a particular matchID.\r\n     */\r\n    fetch(matchID, opts) {\r\n        const result = {};\r\n        if (opts.state) {\r\n            result.state = this.state.get(matchID);\r\n        }\r\n        if (opts.metadata) {\r\n            result.metadata = this.metadata.get(matchID);\r\n        }\r\n        if (opts.log) {\r\n            result.log = this.log.get(matchID) || [];\r\n        }\r\n        if (opts.initialState) {\r\n            result.initialState = this.initial.get(matchID);\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * Remove the match state from the in-memory object.\r\n     */\r\n    wipe(matchID) {\r\n        this.state.delete(matchID);\r\n        this.metadata.delete(matchID);\r\n    }\r\n    /**\r\n     * Return all keys.\r\n     *\r\n     * @override\r\n     */\r\n    listMatches(opts) {\r\n        return [...this.metadata.entries()]\r\n            .filter(([, metadata]) => {\r\n            if (!opts) {\r\n                return true;\r\n            }\r\n            if (opts.gameName !== undefined &&\r\n                metadata.gameName !== opts.gameName) {\r\n                return false;\r\n            }\r\n            if (opts.where !== undefined) {\r\n                if (opts.where.isGameover !== undefined) {\r\n                    const isGameover = metadata.gameover !== undefined;\r\n                    if (isGameover !== opts.where.isGameover) {\r\n                        return false;\r\n                    }\r\n                }\r\n                if (opts.where.updatedBefore !== undefined &&\r\n                    metadata.updatedAt >= opts.where.updatedBefore) {\r\n                    return false;\r\n                }\r\n                if (opts.where.updatedAfter !== undefined &&\r\n                    metadata.updatedAt <= opts.where.updatedAfter) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        })\r\n            .map(([key]) => key);\r\n    }\r\n}\n\nclass WithLocalStorageMap extends Map {\r\n    constructor(key) {\r\n        super();\r\n        this.key = key;\r\n        const cache = JSON.parse(localStorage.getItem(this.key)) || [];\r\n        cache.forEach((entry) => this.set(...entry));\r\n    }\r\n    sync() {\r\n        const entries = [...this.entries()];\r\n        localStorage.setItem(this.key, JSON.stringify(entries));\r\n    }\r\n    set(key, value) {\r\n        super.set(key, value);\r\n        this.sync();\r\n        return this;\r\n    }\r\n    delete(key) {\r\n        const result = super.delete(key);\r\n        this.sync();\r\n        return result;\r\n    }\r\n}\r\n/**\r\n * locaStorage data storage.\r\n */\r\nclass LocalStorage extends InMemory {\r\n    constructor(storagePrefix = 'bgio') {\r\n        super();\r\n        const StorageMap = (stateKey) => new WithLocalStorageMap(`${storagePrefix}_${stateKey}`);\r\n        this.state = StorageMap('state');\r\n        this.initial = StorageMap('initial');\r\n        this.metadata = StorageMap('metadata');\r\n        this.log = StorageMap('log');\r\n    }\r\n}\n\n/*\r\n * Copyright 2018 The boardgame.io Authors\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\r\n/**\r\n * Returns null if it is not a bot's turn.\r\n * Otherwise, returns a playerID of a bot that may play now.\r\n */\r\nfunction GetBotPlayer(state, bots) {\r\n    if (state.ctx.gameover !== undefined) {\r\n        return null;\r\n    }\r\n    if (state.ctx.activePlayers) {\r\n        for (const key of Object.keys(bots)) {\r\n            if (key in state.ctx.activePlayers) {\r\n                return key;\r\n            }\r\n        }\r\n    }\r\n    else if (state.ctx.currentPlayer in bots) {\r\n        return state.ctx.currentPlayer;\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Creates a local version of the master that the client\r\n * can interact with.\r\n */\r\nclass LocalMaster extends Master {\r\n    constructor({ game, bots, storageKey, persist }) {\r\n        const clientCallbacks = {};\r\n        const initializedBots = {};\r\n        if (game && game.ai && bots) {\r\n            for (const playerID in bots) {\r\n                const bot = bots[playerID];\r\n                initializedBots[playerID] = new bot({\r\n                    game,\r\n                    enumerate: game.ai.enumerate,\r\n                    seed: game.seed,\r\n                });\r\n            }\r\n        }\r\n        const send = ({ playerID, ...data }) => {\r\n            const callback = clientCallbacks[playerID];\r\n            if (callback !== undefined) {\r\n                callback(filterPlayerView(playerID, data));\r\n            }\r\n        };\r\n        const filterPlayerView = getFilterPlayerView(game);\r\n        const transportAPI = {\r\n            send,\r\n            sendAll: (payload) => {\r\n                for (const playerID in clientCallbacks) {\r\n                    send({ playerID, ...payload });\r\n                }\r\n            },\r\n        };\r\n        const storage = persist ? new LocalStorage(storageKey) : new InMemory();\r\n        super(game, storage, transportAPI);\r\n        this.connect = (playerID, callback) => {\r\n            clientCallbacks[playerID] = callback;\r\n        };\r\n        this.subscribe(({ state, matchID }) => {\r\n            if (!bots) {\r\n                return;\r\n            }\r\n            const botPlayer = GetBotPlayer(state, initializedBots);\r\n            if (botPlayer !== null) {\r\n                setTimeout(async () => {\r\n                    const botAction = await initializedBots[botPlayer].play(state, botPlayer);\r\n                    await this.onUpdate(botAction.action, state._stateID, matchID, botAction.action.payload.playerID);\r\n                }, 100);\r\n            }\r\n        });\r\n    }\r\n}\r\n/**\r\n * Local\r\n *\r\n * Transport interface that embeds a GameMaster within it\r\n * that you can connect multiple clients to.\r\n */\r\nclass LocalTransport extends Transport {\r\n    /**\r\n     * Creates a new Mutiplayer instance.\r\n     * @param {string} matchID - The game ID to connect to.\r\n     * @param {string} playerID - The player ID associated with this client.\r\n     * @param {string} gameName - The game type (the `name` field in `Game`).\r\n     * @param {string} numPlayers - The number of players.\r\n     */\r\n    constructor({ master, ...opts }) {\r\n        super(opts);\r\n        this.master = master;\r\n    }\r\n    sendChatMessage(matchID, chatMessage) {\r\n        const args = [\r\n            matchID,\r\n            chatMessage,\r\n            this.credentials,\r\n        ];\r\n        this.master.onChatMessage(...args);\r\n    }\r\n    sendAction(state, action) {\r\n        this.master.onUpdate(action, state._stateID, this.matchID, this.playerID);\r\n    }\r\n    requestSync() {\r\n        this.master.onSync(this.matchID, this.playerID, this.credentials, this.numPlayers);\r\n    }\r\n    connect() {\r\n        this.setConnectionStatus(true);\r\n        this.master.connect(this.playerID, (data) => this.notifyClient(data));\r\n        this.requestSync();\r\n    }\r\n    disconnect() {\r\n        this.setConnectionStatus(false);\r\n    }\r\n    updateMatchID(id) {\r\n        this.matchID = id;\r\n        this.connect();\r\n    }\r\n    updatePlayerID(id) {\r\n        this.playerID = id;\r\n        this.connect();\r\n    }\r\n    updateCredentials(credentials) {\r\n        this.credentials = credentials;\r\n        this.connect();\r\n    }\r\n}\r\n/**\r\n * Global map storing local master instances.\r\n */\r\nconst localMasters = new Map();\r\n/**\r\n * Create a local transport.\r\n */\r\nfunction Local({ bots, persist, storageKey } = {}) {\r\n    return (transportOpts) => {\r\n        const { gameKey, game } = transportOpts;\r\n        let master;\r\n        const instance = localMasters.get(gameKey);\r\n        if (instance &&\r\n            instance.bots === bots &&\r\n            instance.storageKey === storageKey &&\r\n            instance.persist === persist) {\r\n            master = instance.master;\r\n        }\r\n        if (!master) {\r\n            master = new LocalMaster({ game, bots, persist, storageKey });\r\n            localMasters.set(gameKey, { master, bots, persist, storageKey });\r\n        }\r\n        return new LocalTransport({ master, ...transportOpts });\r\n    };\r\n}\n\n/*\r\n * Copyright 2017 The boardgame.io Authors\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\r\nconst io = ioNamespace__default;\r\n/**\r\n * SocketIO\r\n *\r\n * Transport interface that interacts with the Master via socket.io.\r\n */\r\nclass SocketIOTransport extends Transport {\r\n    /**\r\n     * Creates a new Multiplayer instance.\r\n     * @param {object} socket - Override for unit tests.\r\n     * @param {object} socketOpts - Options to pass to socket.io.\r\n     * @param {object} store - Redux store\r\n     * @param {string} matchID - The game ID to connect to.\r\n     * @param {string} playerID - The player ID associated with this client.\r\n     * @param {string} credentials - Authentication credentials\r\n     * @param {string} gameName - The game type (the `name` field in `Game`).\r\n     * @param {string} numPlayers - The number of players.\r\n     * @param {string} server - The game server in the form of 'hostname:port'. Defaults to the server serving the client if not provided.\r\n     */\r\n    constructor({ socket, socketOpts, server, ...opts }) {\r\n        super(opts);\r\n        this.server = server;\r\n        this.socket = socket;\r\n        this.socketOpts = socketOpts;\r\n    }\r\n    sendAction(state, action) {\r\n        const args = [\r\n            action,\r\n            state._stateID,\r\n            this.matchID,\r\n            this.playerID,\r\n        ];\r\n        this.socket.emit('update', ...args);\r\n    }\r\n    sendChatMessage(matchID, chatMessage) {\r\n        const args = [\r\n            matchID,\r\n            chatMessage,\r\n            this.credentials,\r\n        ];\r\n        this.socket.emit('chat', ...args);\r\n    }\r\n    connect() {\r\n        if (!this.socket) {\r\n            if (this.server) {\r\n                let server = this.server;\r\n                if (server.search(/^https?:\\/\\//) == -1) {\r\n                    server = 'http://' + this.server;\r\n                }\r\n                if (server.slice(-1) != '/') {\r\n                    // add trailing slash if not already present\r\n                    server = server + '/';\r\n                }\r\n                this.socket = io(server + this.gameName, this.socketOpts);\r\n            }\r\n            else {\r\n                this.socket = io('/' + this.gameName, this.socketOpts);\r\n            }\r\n        }\r\n        // Called when another player makes a move and the\r\n        // master broadcasts the update as a patch to other clients (including\r\n        // this one).\r\n        this.socket.on('patch', (matchID, prevStateID, stateID, patch, deltalog) => {\r\n            this.notifyClient({\r\n                type: 'patch',\r\n                args: [matchID, prevStateID, stateID, patch, deltalog],\r\n            });\r\n        });\r\n        // Called when another player makes a move and the\r\n        // master broadcasts the update to other clients (including\r\n        // this one).\r\n        this.socket.on('update', (matchID, state, deltalog) => {\r\n            this.notifyClient({\r\n                type: 'update',\r\n                args: [matchID, state, deltalog],\r\n            });\r\n        });\r\n        // Called when the client first connects to the master\r\n        // and requests the current game state.\r\n        this.socket.on('sync', (matchID, syncInfo) => {\r\n            this.notifyClient({ type: 'sync', args: [matchID, syncInfo] });\r\n        });\r\n        // Called when new player joins the match or changes\r\n        // it's connection status\r\n        this.socket.on('matchData', (matchID, matchData) => {\r\n            this.notifyClient({ type: 'matchData', args: [matchID, matchData] });\r\n        });\r\n        this.socket.on('chat', (matchID, chatMessage) => {\r\n            this.notifyClient({ type: 'chat', args: [matchID, chatMessage] });\r\n        });\r\n        // Keep track of connection status.\r\n        this.socket.on('connect', () => {\r\n            // Initial sync to get game state.\r\n            this.requestSync();\r\n            this.setConnectionStatus(true);\r\n        });\r\n        this.socket.on('disconnect', () => {\r\n            this.setConnectionStatus(false);\r\n        });\r\n    }\r\n    disconnect() {\r\n        this.socket.close();\r\n        this.socket = null;\r\n        this.setConnectionStatus(false);\r\n    }\r\n    requestSync() {\r\n        if (this.socket) {\r\n            const args = [\r\n                this.matchID,\r\n                this.playerID,\r\n                this.credentials,\r\n                this.numPlayers,\r\n            ];\r\n            this.socket.emit('sync', ...args);\r\n        }\r\n    }\r\n    updateMatchID(id) {\r\n        this.matchID = id;\r\n        this.requestSync();\r\n    }\r\n    updatePlayerID(id) {\r\n        this.playerID = id;\r\n        this.requestSync();\r\n    }\r\n    updateCredentials(credentials) {\r\n        this.credentials = credentials;\r\n        this.requestSync();\r\n    }\r\n}\r\nfunction SocketIO({ server, socketOpts } = {}) {\r\n    return (transportOpts) => new SocketIOTransport({\r\n        server,\r\n        socketOpts,\r\n        ...transportOpts,\r\n    });\r\n}\n\nexport { Local as L, SocketIO as S };\n"],"mappings":"AAAA,SAASA,CAAC,IAAIC,SAAS,QAAQ,yBAAyB;AACxD,SAASC,CAAC,IAAIC,IAAI,QAAQ,oBAAoB;AAC9C,SAASC,CAAC,IAAIC,MAAM,QAAQ,sBAAsB;AAClD,SAASC,CAAC,IAAIC,mBAAmB,QAAQ,kCAAkC;AAC3E,OAAOC,oBAAoB,MAAM,kBAAkB;;AAEnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,QAAQ,SAASN,IAAI,CAAC;EACxB;AACJ;AACA;EACIO,WAAWA,CAAA,EAAG;IACV,KAAK,EAAE;IACP,IAAI,CAACC,KAAK,GAAG,IAAIC,GAAG,EAAE;IACtB,IAAI,CAACC,OAAO,GAAG,IAAID,GAAG,EAAE;IACxB,IAAI,CAACE,QAAQ,GAAG,IAAIF,GAAG,EAAE;IACzB,IAAI,CAACG,GAAG,GAAG,IAAIH,GAAG,EAAE;EACxB;EACA;AACJ;AACA;AACA;AACA;EACII,WAAWA,CAACC,OAAO,EAAEC,IAAI,EAAE;IACvB,IAAI,CAACL,OAAO,CAACM,GAAG,CAACF,OAAO,EAAEC,IAAI,CAACE,YAAY,CAAC;IAC5C,IAAI,CAACC,QAAQ,CAACJ,OAAO,EAAEC,IAAI,CAACE,YAAY,CAAC;IACzC,IAAI,CAACE,WAAW,CAACL,OAAO,EAAEC,IAAI,CAACJ,QAAQ,CAAC;EAC5C;EACA;AACJ;AACA;EACIQ,WAAWA,CAACL,OAAO,EAAEH,QAAQ,EAAE;IAC3B,IAAI,CAACA,QAAQ,CAACK,GAAG,CAACF,OAAO,EAAEH,QAAQ,CAAC;EACxC;EACA;AACJ;AACA;EACIO,QAAQA,CAACJ,OAAO,EAAEN,KAAK,EAAEY,QAAQ,EAAE;IAC/B,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,MAAM,GAAG,CAAC,EAAE;MACjC,MAAMT,GAAG,GAAG,IAAI,CAACA,GAAG,CAACU,GAAG,CAACR,OAAO,CAAC,IAAI,EAAE;MACvC,IAAI,CAACF,GAAG,CAACI,GAAG,CAACF,OAAO,EAAE,CAAC,GAAGF,GAAG,EAAE,GAAGQ,QAAQ,CAAC,CAAC;IAChD;IACA,IAAI,CAACZ,KAAK,CAACQ,GAAG,CAACF,OAAO,EAAEN,KAAK,CAAC;EAClC;EACA;AACJ;AACA;EACIe,KAAKA,CAACT,OAAO,EAAEC,IAAI,EAAE;IACjB,MAAMS,MAAM,GAAG,CAAC,CAAC;IACjB,IAAIT,IAAI,CAACP,KAAK,EAAE;MACZgB,MAAM,CAAChB,KAAK,GAAG,IAAI,CAACA,KAAK,CAACc,GAAG,CAACR,OAAO,CAAC;IAC1C;IACA,IAAIC,IAAI,CAACJ,QAAQ,EAAE;MACfa,MAAM,CAACb,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAACW,GAAG,CAACR,OAAO,CAAC;IAChD;IACA,IAAIC,IAAI,CAACH,GAAG,EAAE;MACVY,MAAM,CAACZ,GAAG,GAAG,IAAI,CAACA,GAAG,CAACU,GAAG,CAACR,OAAO,CAAC,IAAI,EAAE;IAC5C;IACA,IAAIC,IAAI,CAACE,YAAY,EAAE;MACnBO,MAAM,CAACP,YAAY,GAAG,IAAI,CAACP,OAAO,CAACY,GAAG,CAACR,OAAO,CAAC;IACnD;IACA,OAAOU,MAAM;EACjB;EACA;AACJ;AACA;EACIC,IAAIA,CAACX,OAAO,EAAE;IACV,IAAI,CAACN,KAAK,CAACkB,MAAM,CAACZ,OAAO,CAAC;IAC1B,IAAI,CAACH,QAAQ,CAACe,MAAM,CAACZ,OAAO,CAAC;EACjC;EACA;AACJ;AACA;AACA;AACA;EACIa,WAAWA,CAACZ,IAAI,EAAE;IACd,OAAO,CAAC,GAAG,IAAI,CAACJ,QAAQ,CAACiB,OAAO,EAAE,CAAC,CAC9BC,MAAM,CAACC,IAAA,IAAkB;MAAA,IAAjB,GAAGnB,QAAQ,CAAC,GAAAmB,IAAA;MACrB,IAAI,CAACf,IAAI,EAAE;QACP,OAAO,IAAI;MACf;MACA,IAAIA,IAAI,CAACgB,QAAQ,KAAKC,SAAS,IAC3BrB,QAAQ,CAACoB,QAAQ,KAAKhB,IAAI,CAACgB,QAAQ,EAAE;QACrC,OAAO,KAAK;MAChB;MACA,IAAIhB,IAAI,CAACkB,KAAK,KAAKD,SAAS,EAAE;QAC1B,IAAIjB,IAAI,CAACkB,KAAK,CAACC,UAAU,KAAKF,SAAS,EAAE;UACrC,MAAME,UAAU,GAAGvB,QAAQ,CAACwB,QAAQ,KAAKH,SAAS;UAClD,IAAIE,UAAU,KAAKnB,IAAI,CAACkB,KAAK,CAACC,UAAU,EAAE;YACtC,OAAO,KAAK;UAChB;QACJ;QACA,IAAInB,IAAI,CAACkB,KAAK,CAACG,aAAa,KAAKJ,SAAS,IACtCrB,QAAQ,CAAC0B,SAAS,IAAItB,IAAI,CAACkB,KAAK,CAACG,aAAa,EAAE;UAChD,OAAO,KAAK;QAChB;QACA,IAAIrB,IAAI,CAACkB,KAAK,CAACK,YAAY,KAAKN,SAAS,IACrCrB,QAAQ,CAAC0B,SAAS,IAAItB,IAAI,CAACkB,KAAK,CAACK,YAAY,EAAE;UAC/C,OAAO,KAAK;QAChB;MACJ;MACA,OAAO,IAAI;IACf,CAAC,CAAC,CACGC,GAAG,CAACC,KAAA;MAAA,IAAC,CAACC,GAAG,CAAC,GAAAD,KAAA;MAAA,OAAKC,GAAG;IAAA,EAAC;EAC5B;AACJ;AAEA,MAAMC,mBAAmB,SAASjC,GAAG,CAAC;EAClCF,WAAWA,CAACkC,GAAG,EAAE;IACb,KAAK,EAAE;IACP,IAAI,CAACA,GAAG,GAAGA,GAAG;IACd,MAAME,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,IAAI,CAACN,GAAG,CAAC,CAAC,IAAI,EAAE;IAC9DE,KAAK,CAACK,OAAO,CAAEC,KAAK,IAAK,IAAI,CAACjC,GAAG,CAAC,GAAGiC,KAAK,CAAC,CAAC;EAChD;EACAC,IAAIA,CAAA,EAAG;IACH,MAAMtB,OAAO,GAAG,CAAC,GAAG,IAAI,CAACA,OAAO,EAAE,CAAC;IACnCkB,YAAY,CAACK,OAAO,CAAC,IAAI,CAACV,GAAG,EAAEG,IAAI,CAACQ,SAAS,CAACxB,OAAO,CAAC,CAAC;EAC3D;EACAZ,GAAGA,CAACyB,GAAG,EAAEY,KAAK,EAAE;IACZ,KAAK,CAACrC,GAAG,CAACyB,GAAG,EAAEY,KAAK,CAAC;IACrB,IAAI,CAACH,IAAI,EAAE;IACX,OAAO,IAAI;EACf;EACAxB,MAAMA,CAACe,GAAG,EAAE;IACR,MAAMjB,MAAM,GAAG,KAAK,CAACE,MAAM,CAACe,GAAG,CAAC;IAChC,IAAI,CAACS,IAAI,EAAE;IACX,OAAO1B,MAAM;EACjB;AACJ;AACA;AACA;AACA;AACA,MAAM8B,YAAY,SAAShD,QAAQ,CAAC;EAChCC,WAAWA,CAAA,EAAyB;IAAA,IAAxBgD,aAAa,GAAAC,SAAA,CAAAnC,MAAA,QAAAmC,SAAA,QAAAxB,SAAA,GAAAwB,SAAA,MAAG,MAAM;IAC9B,KAAK,EAAE;IACP,MAAMC,UAAU,GAAIC,QAAQ,IAAK,IAAIhB,mBAAmB,CAAE,GAAEa,aAAc,IAAGG,QAAS,EAAC,CAAC;IACxF,IAAI,CAAClD,KAAK,GAAGiD,UAAU,CAAC,OAAO,CAAC;IAChC,IAAI,CAAC/C,OAAO,GAAG+C,UAAU,CAAC,SAAS,CAAC;IACpC,IAAI,CAAC9C,QAAQ,GAAG8C,UAAU,CAAC,UAAU,CAAC;IACtC,IAAI,CAAC7C,GAAG,GAAG6C,UAAU,CAAC,KAAK,CAAC;EAChC;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,YAAYA,CAACnD,KAAK,EAAEoD,IAAI,EAAE;EAC/B,IAAIpD,KAAK,CAACqD,GAAG,CAAC1B,QAAQ,KAAKH,SAAS,EAAE;IAClC,OAAO,IAAI;EACf;EACA,IAAIxB,KAAK,CAACqD,GAAG,CAACC,aAAa,EAAE;IACzB,KAAK,MAAMrB,GAAG,IAAIsB,MAAM,CAACC,IAAI,CAACJ,IAAI,CAAC,EAAE;MACjC,IAAInB,GAAG,IAAIjC,KAAK,CAACqD,GAAG,CAACC,aAAa,EAAE;QAChC,OAAOrB,GAAG;MACd;IACJ;EACJ,CAAC,MACI,IAAIjC,KAAK,CAACqD,GAAG,CAACI,aAAa,IAAIL,IAAI,EAAE;IACtC,OAAOpD,KAAK,CAACqD,GAAG,CAACI,aAAa;EAClC;EACA,OAAO,IAAI;AACf;AACA;AACA;AACA;AACA;AACA,MAAMC,WAAW,SAAShE,MAAM,CAAC;EAC7BK,WAAWA,CAAA4D,KAAA,EAAsC;IAAA,IAArC;MAAEC,IAAI;MAAER,IAAI;MAAES,UAAU;MAAEC;IAAQ,CAAC,GAAAH,KAAA;IAC3C,MAAMI,eAAe,GAAG,CAAC,CAAC;IAC1B,MAAMC,eAAe,GAAG,CAAC,CAAC;IAC1B,IAAIJ,IAAI,IAAIA,IAAI,CAACK,EAAE,IAAIb,IAAI,EAAE;MACzB,KAAK,MAAMc,QAAQ,IAAId,IAAI,EAAE;QACzB,MAAMe,GAAG,GAAGf,IAAI,CAACc,QAAQ,CAAC;QAC1BF,eAAe,CAACE,QAAQ,CAAC,GAAG,IAAIC,GAAG,CAAC;UAChCP,IAAI;UACJQ,SAAS,EAAER,IAAI,CAACK,EAAE,CAACG,SAAS;UAC5BC,IAAI,EAAET,IAAI,CAACS;QACf,CAAC,CAAC;MACN;IACJ;IACA,MAAMC,IAAI,GAAGC,KAAA,IAA2B;MAAA,IAA1B;QAAEL,QAAQ;QAAE,GAAGM;MAAK,CAAC,GAAAD,KAAA;MAC/B,MAAME,QAAQ,GAAGV,eAAe,CAACG,QAAQ,CAAC;MAC1C,IAAIO,QAAQ,KAAKjD,SAAS,EAAE;QACxBiD,QAAQ,CAACC,gBAAgB,CAACR,QAAQ,EAAEM,IAAI,CAAC,CAAC;MAC9C;IACJ,CAAC;IACD,MAAME,gBAAgB,GAAG9E,mBAAmB,CAACgE,IAAI,CAAC;IAClD,MAAMe,YAAY,GAAG;MACjBL,IAAI;MACJM,OAAO,EAAGC,OAAO,IAAK;QAClB,KAAK,MAAMX,QAAQ,IAAIH,eAAe,EAAE;UACpCO,IAAI,CAAC;YAAEJ,QAAQ;YAAE,GAAGW;UAAQ,CAAC,CAAC;QAClC;MACJ;IACJ,CAAC;IACD,MAAMC,OAAO,GAAGhB,OAAO,GAAG,IAAIhB,YAAY,CAACe,UAAU,CAAC,GAAG,IAAI/D,QAAQ,EAAE;IACvE,KAAK,CAAC8D,IAAI,EAAEkB,OAAO,EAAEH,YAAY,CAAC;IAClC,IAAI,CAACI,OAAO,GAAG,CAACb,QAAQ,EAAEO,QAAQ,KAAK;MACnCV,eAAe,CAACG,QAAQ,CAAC,GAAGO,QAAQ;IACxC,CAAC;IACD,IAAI,CAACO,SAAS,CAACC,KAAA,IAAwB;MAAA,IAAvB;QAAEjF,KAAK;QAAEM;MAAQ,CAAC,GAAA2E,KAAA;MAC9B,IAAI,CAAC7B,IAAI,EAAE;QACP;MACJ;MACA,MAAM8B,SAAS,GAAG/B,YAAY,CAACnD,KAAK,EAAEgE,eAAe,CAAC;MACtD,IAAIkB,SAAS,KAAK,IAAI,EAAE;QACpBC,UAAU,CAAC,YAAY;UACnB,MAAMC,SAAS,GAAG,MAAMpB,eAAe,CAACkB,SAAS,CAAC,CAACG,IAAI,CAACrF,KAAK,EAAEkF,SAAS,CAAC;UACzE,MAAM,IAAI,CAACI,QAAQ,CAACF,SAAS,CAACG,MAAM,EAAEvF,KAAK,CAACwF,QAAQ,EAAElF,OAAO,EAAE8E,SAAS,CAACG,MAAM,CAACV,OAAO,CAACX,QAAQ,CAAC;QACrG,CAAC,EAAE,GAAG,CAAC;MACX;IACJ,CAAC,CAAC;EACN;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMuB,cAAc,SAASnG,SAAS,CAAC;EACnC;AACJ;AACA;AACA;AACA;AACA;AACA;EACIS,WAAWA,CAAA2F,KAAA,EAAsB;IAAA,IAArB;MAAEC,MAAM;MAAE,GAAGpF;IAAK,CAAC,GAAAmF,KAAA;IAC3B,KAAK,CAACnF,IAAI,CAAC;IACX,IAAI,CAACoF,MAAM,GAAGA,MAAM;EACxB;EACAC,eAAeA,CAACtF,OAAO,EAAEuF,WAAW,EAAE;IAClC,MAAMC,IAAI,GAAG,CACTxF,OAAO,EACPuF,WAAW,EACX,IAAI,CAACE,WAAW,CACnB;IACD,IAAI,CAACJ,MAAM,CAACK,aAAa,CAAC,GAAGF,IAAI,CAAC;EACtC;EACAG,UAAUA,CAACjG,KAAK,EAAEuF,MAAM,EAAE;IACtB,IAAI,CAACI,MAAM,CAACL,QAAQ,CAACC,MAAM,EAAEvF,KAAK,CAACwF,QAAQ,EAAE,IAAI,CAAClF,OAAO,EAAE,IAAI,CAAC4D,QAAQ,CAAC;EAC7E;EACAgC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACP,MAAM,CAACQ,MAAM,CAAC,IAAI,CAAC7F,OAAO,EAAE,IAAI,CAAC4D,QAAQ,EAAE,IAAI,CAAC6B,WAAW,EAAE,IAAI,CAACK,UAAU,CAAC;EACtF;EACArB,OAAOA,CAAA,EAAG;IACN,IAAI,CAACsB,mBAAmB,CAAC,IAAI,CAAC;IAC9B,IAAI,CAACV,MAAM,CAACZ,OAAO,CAAC,IAAI,CAACb,QAAQ,EAAGM,IAAI,IAAK,IAAI,CAAC8B,YAAY,CAAC9B,IAAI,CAAC,CAAC;IACrE,IAAI,CAAC0B,WAAW,EAAE;EACtB;EACAK,UAAUA,CAAA,EAAG;IACT,IAAI,CAACF,mBAAmB,CAAC,KAAK,CAAC;EACnC;EACAG,aAAaA,CAACC,EAAE,EAAE;IACd,IAAI,CAACnG,OAAO,GAAGmG,EAAE;IACjB,IAAI,CAAC1B,OAAO,EAAE;EAClB;EACA2B,cAAcA,CAACD,EAAE,EAAE;IACf,IAAI,CAACvC,QAAQ,GAAGuC,EAAE;IAClB,IAAI,CAAC1B,OAAO,EAAE;EAClB;EACA4B,iBAAiBA,CAACZ,WAAW,EAAE;IAC3B,IAAI,CAACA,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAAChB,OAAO,EAAE;EAClB;AACJ;AACA;AACA;AACA;AACA,MAAM6B,YAAY,GAAG,IAAI3G,GAAG,EAAE;AAC9B;AACA;AACA;AACA,SAAS4G,KAAKA,CAAA,EAAqC;EAAA,IAApC;IAAEzD,IAAI;IAAEU,OAAO;IAAED;EAAW,CAAC,GAAAb,SAAA,CAAAnC,MAAA,QAAAmC,SAAA,QAAAxB,SAAA,GAAAwB,SAAA,MAAG,CAAC,CAAC;EAC7C,OAAQ8D,aAAa,IAAK;IACtB,MAAM;MAAEC,OAAO;MAAEnD;IAAK,CAAC,GAAGkD,aAAa;IACvC,IAAInB,MAAM;IACV,MAAMqB,QAAQ,GAAGJ,YAAY,CAAC9F,GAAG,CAACiG,OAAO,CAAC;IAC1C,IAAIC,QAAQ,IACRA,QAAQ,CAAC5D,IAAI,KAAKA,IAAI,IACtB4D,QAAQ,CAACnD,UAAU,KAAKA,UAAU,IAClCmD,QAAQ,CAAClD,OAAO,KAAKA,OAAO,EAAE;MAC9B6B,MAAM,GAAGqB,QAAQ,CAACrB,MAAM;IAC5B;IACA,IAAI,CAACA,MAAM,EAAE;MACTA,MAAM,GAAG,IAAIjC,WAAW,CAAC;QAAEE,IAAI;QAAER,IAAI;QAAEU,OAAO;QAAED;MAAW,CAAC,CAAC;MAC7D+C,YAAY,CAACpG,GAAG,CAACuG,OAAO,EAAE;QAAEpB,MAAM;QAAEvC,IAAI;QAAEU,OAAO;QAAED;MAAW,CAAC,CAAC;IACpE;IACA,OAAO,IAAI4B,cAAc,CAAC;MAAEE,MAAM;MAAE,GAAGmB;IAAc,CAAC,CAAC;EAC3D,CAAC;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMG,EAAE,GAAGpH,oBAAoB;AAC/B;AACA;AACA;AACA;AACA;AACA,MAAMqH,iBAAiB,SAAS5H,SAAS,CAAC;EACtC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIS,WAAWA,CAAAoH,KAAA,EAA0C;IAAA,IAAzC;MAAEC,MAAM;MAAEC,UAAU;MAAEC,MAAM;MAAE,GAAG/G;IAAK,CAAC,GAAA4G,KAAA;IAC/C,KAAK,CAAC5G,IAAI,CAAC;IACX,IAAI,CAAC+G,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACF,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,UAAU,GAAGA,UAAU;EAChC;EACApB,UAAUA,CAACjG,KAAK,EAAEuF,MAAM,EAAE;IACtB,MAAMO,IAAI,GAAG,CACTP,MAAM,EACNvF,KAAK,CAACwF,QAAQ,EACd,IAAI,CAAClF,OAAO,EACZ,IAAI,CAAC4D,QAAQ,CAChB;IACD,IAAI,CAACkD,MAAM,CAACG,IAAI,CAAC,QAAQ,EAAE,GAAGzB,IAAI,CAAC;EACvC;EACAF,eAAeA,CAACtF,OAAO,EAAEuF,WAAW,EAAE;IAClC,MAAMC,IAAI,GAAG,CACTxF,OAAO,EACPuF,WAAW,EACX,IAAI,CAACE,WAAW,CACnB;IACD,IAAI,CAACqB,MAAM,CAACG,IAAI,CAAC,MAAM,EAAE,GAAGzB,IAAI,CAAC;EACrC;EACAf,OAAOA,CAAA,EAAG;IACN,IAAI,CAAC,IAAI,CAACqC,MAAM,EAAE;MACd,IAAI,IAAI,CAACE,MAAM,EAAE;QACb,IAAIA,MAAM,GAAG,IAAI,CAACA,MAAM;QACxB,IAAIA,MAAM,CAACE,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,EAAE;UACrCF,MAAM,GAAG,SAAS,GAAG,IAAI,CAACA,MAAM;QACpC;QACA,IAAIA,MAAM,CAACG,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,EAAE;UACzB;UACAH,MAAM,GAAGA,MAAM,GAAG,GAAG;QACzB;QACA,IAAI,CAACF,MAAM,GAAGH,EAAE,CAACK,MAAM,GAAG,IAAI,CAAC/F,QAAQ,EAAE,IAAI,CAAC8F,UAAU,CAAC;MAC7D,CAAC,MACI;QACD,IAAI,CAACD,MAAM,GAAGH,EAAE,CAAC,GAAG,GAAG,IAAI,CAAC1F,QAAQ,EAAE,IAAI,CAAC8F,UAAU,CAAC;MAC1D;IACJ;IACA;IACA;IACA;IACA,IAAI,CAACD,MAAM,CAACM,EAAE,CAAC,OAAO,EAAE,CAACpH,OAAO,EAAEqH,WAAW,EAAEC,OAAO,EAAEC,KAAK,EAAEjH,QAAQ,KAAK;MACxE,IAAI,CAAC0F,YAAY,CAAC;QACdwB,IAAI,EAAE,OAAO;QACbhC,IAAI,EAAE,CAACxF,OAAO,EAAEqH,WAAW,EAAEC,OAAO,EAAEC,KAAK,EAAEjH,QAAQ;MACzD,CAAC,CAAC;IACN,CAAC,CAAC;IACF;IACA;IACA;IACA,IAAI,CAACwG,MAAM,CAACM,EAAE,CAAC,QAAQ,EAAE,CAACpH,OAAO,EAAEN,KAAK,EAAEY,QAAQ,KAAK;MACnD,IAAI,CAAC0F,YAAY,CAAC;QACdwB,IAAI,EAAE,QAAQ;QACdhC,IAAI,EAAE,CAACxF,OAAO,EAAEN,KAAK,EAAEY,QAAQ;MACnC,CAAC,CAAC;IACN,CAAC,CAAC;IACF;IACA;IACA,IAAI,CAACwG,MAAM,CAACM,EAAE,CAAC,MAAM,EAAE,CAACpH,OAAO,EAAEyH,QAAQ,KAAK;MAC1C,IAAI,CAACzB,YAAY,CAAC;QAAEwB,IAAI,EAAE,MAAM;QAAEhC,IAAI,EAAE,CAACxF,OAAO,EAAEyH,QAAQ;MAAE,CAAC,CAAC;IAClE,CAAC,CAAC;IACF;IACA;IACA,IAAI,CAACX,MAAM,CAACM,EAAE,CAAC,WAAW,EAAE,CAACpH,OAAO,EAAE0H,SAAS,KAAK;MAChD,IAAI,CAAC1B,YAAY,CAAC;QAAEwB,IAAI,EAAE,WAAW;QAAEhC,IAAI,EAAE,CAACxF,OAAO,EAAE0H,SAAS;MAAE,CAAC,CAAC;IACxE,CAAC,CAAC;IACF,IAAI,CAACZ,MAAM,CAACM,EAAE,CAAC,MAAM,EAAE,CAACpH,OAAO,EAAEuF,WAAW,KAAK;MAC7C,IAAI,CAACS,YAAY,CAAC;QAAEwB,IAAI,EAAE,MAAM;QAAEhC,IAAI,EAAE,CAACxF,OAAO,EAAEuF,WAAW;MAAE,CAAC,CAAC;IACrE,CAAC,CAAC;IACF;IACA,IAAI,CAACuB,MAAM,CAACM,EAAE,CAAC,SAAS,EAAE,MAAM;MAC5B;MACA,IAAI,CAACxB,WAAW,EAAE;MAClB,IAAI,CAACG,mBAAmB,CAAC,IAAI,CAAC;IAClC,CAAC,CAAC;IACF,IAAI,CAACe,MAAM,CAACM,EAAE,CAAC,YAAY,EAAE,MAAM;MAC/B,IAAI,CAACrB,mBAAmB,CAAC,KAAK,CAAC;IACnC,CAAC,CAAC;EACN;EACAE,UAAUA,CAAA,EAAG;IACT,IAAI,CAACa,MAAM,CAACa,KAAK,EAAE;IACnB,IAAI,CAACb,MAAM,GAAG,IAAI;IAClB,IAAI,CAACf,mBAAmB,CAAC,KAAK,CAAC;EACnC;EACAH,WAAWA,CAAA,EAAG;IACV,IAAI,IAAI,CAACkB,MAAM,EAAE;MACb,MAAMtB,IAAI,GAAG,CACT,IAAI,CAACxF,OAAO,EACZ,IAAI,CAAC4D,QAAQ,EACb,IAAI,CAAC6B,WAAW,EAChB,IAAI,CAACK,UAAU,CAClB;MACD,IAAI,CAACgB,MAAM,CAACG,IAAI,CAAC,MAAM,EAAE,GAAGzB,IAAI,CAAC;IACrC;EACJ;EACAU,aAAaA,CAACC,EAAE,EAAE;IACd,IAAI,CAACnG,OAAO,GAAGmG,EAAE;IACjB,IAAI,CAACP,WAAW,EAAE;EACtB;EACAQ,cAAcA,CAACD,EAAE,EAAE;IACf,IAAI,CAACvC,QAAQ,GAAGuC,EAAE;IAClB,IAAI,CAACP,WAAW,EAAE;EACtB;EACAS,iBAAiBA,CAACZ,WAAW,EAAE;IAC3B,IAAI,CAACA,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACG,WAAW,EAAE;EACtB;AACJ;AACA,SAASgC,QAAQA,CAAA,EAA8B;EAAA,IAA7B;IAAEZ,MAAM;IAAED;EAAW,CAAC,GAAArE,SAAA,CAAAnC,MAAA,QAAAmC,SAAA,QAAAxB,SAAA,GAAAwB,SAAA,MAAG,CAAC,CAAC;EACzC,OAAQ8D,aAAa,IAAK,IAAII,iBAAiB,CAAC;IAC5CI,MAAM;IACND,UAAU;IACV,GAAGP;EACP,CAAC,CAAC;AACN;AAEA,SAASD,KAAK,IAAIsB,CAAC,EAAED,QAAQ,IAAI3I,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}